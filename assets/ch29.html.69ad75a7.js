import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as r,b as e,a,w as o,e as i,d as n,r as p}from"./app.887b133c.js";const u={},d=i('<h1 id="chap29-clean-embedded-architecture-\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784" tabindex="-1"><a class="header-anchor" href="#chap29-clean-embedded-architecture-\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784" aria-hidden="true">#</a> Chap29. CLEAN EMBEDDED ARCHITECTURE \u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784</h1><p>By James Grenning</p><p>A while ago I read an article entitled \u201CThe Growing Importance of Sustaining Software for the DoD\u201D1 on Doug Schmidt\u2019s blog. Doug made the following claim:</p><blockquote><p>\u524D\u4E00\u6BB5\u65F6\u95F4\uFF0C\u6211\u5728 Doug Schmidt \u7684\u4E2A\u4EBA\u535A\u5BA2\u4E0A\u770B\u5230\u4E86\u4E00\u7BC7\u6587\u7AE0\uFF0C\u6807\u9898\u662F\u201CThe Growing Importance of Sustaining Software for the DoD\u201D\uFF0CDoug \u5728\u8FD9\u7BC7\u6587\u7AE0\u4E2D\u63D0\u51FA\u4E86\u4EE5\u4E0B\u89C2\u70B9\uFF1A</p></blockquote><p>\u201CAlthough software does not wear out, firmware and hardware become obsolete, thereby requiring software modifications.\u201D</p><blockquote><p>\u201C\u867D\u7136\u8F6F\u4EF6\u672C\u8EAB\u5E76\u4E0D\u4F1A\u968F\u65F6\u95F4\u63A8\u79FB\u800C\u78E8\u635F\uFF0C\u4F46\u786C\u4EF6\u53CA\u5176\u56FA\u4EF6\u5374\u4F1A\u968F\u65F6\u95F4\u63A8\u79FB\u800C\u8FC7\u65F6\uFF0C\u968F\u5373\u4E5F\u9700\u8981\u5BF9\u8F6F\u4EF6\u505A\u76F8\u5E94\u6539\u52A8\u3002\u201D</p></blockquote><p>It was a clarifying moment for me. Doug mentioned two terms that I would have thought to be obvious\u2014but maybe not. Software is this thing that can have a long useful life, but firmware will become obsolete as hardware evolves. If you have spent any time in embedded systems development, you know the hardware is continually evolving and being improved. At the same time, features are added to the new \u201Csoftware,\u201D and it continually grows in complexity.</p><blockquote><p>\u8FD9\u53E5\u8BDD\u5BF9\u6211\u6709\u5982\u918D\u9190\u704C\u9876\u3002Doug \u5728\u8FD9\u91CC\u7528\u5230\u4E86\u4E24\u4E2A\u4E13\u4E1A\u540D\u8BCD\uFF0C\u6211\u4E00\u76F4\u8BA4\u4E3A\u662F\u663E\u800C\u6613\u89C1\u7684\uFF0C\u4F46\u662F\u5176\u4ED6\u4EBA\u53EF\u80FD\u5E76\u6CA1\u6709\u8FD9\u4E48\u89C9\u5F97\u3002\u5176\u4E2D\uFF0C\u8F6F\u4EF6\uFF08software\uFF09\u5E94\u8BE5\u662F\u4E00\u79CD\u4F7F\u7528\u5468\u671F\u5F88\u957F\u7684\u4E1C\u897F\uFF0C\u800C\u56FA\u4EF6\uFF08firmware\uFF09\u5219\u4F1A\u968F\u7740\u786C\u4EF6\u6F14\u8FDB\u800C\u6DD8\u6C70\u8FC7\u65F6\u3002\u66FE\u7ECF\u5F00\u53D1\u8FC7\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u4EBA\u4E00\u5B9A\u90FD\u77E5\u9053\uFF0C\u786C\u4EF6\u7CFB\u7EDF\u662F\u5728\u6301\u7EED\u4E0D\u65AD\u5730\u6F14\u8FDB\u7684\u3002\u4E0E\u6B64\u540C\u65F6\uFF0C\u968F\u7740\u65B0\u529F\u80FD\u4E0D\u65AD\u5730\u589E\u52A0\uFF0C\u8F6F\u4EF6\u590D\u6742\u5EA6\u4E5F\u5728\u4E0D\u65AD\u4E0A\u5347\u3002</p></blockquote><p>I\u2019d like to add to Doug\u2019s statement:</p><blockquote><p>\u5728\u8FD9\u91CC\uFF0C\u6211\u60F3\u5BF9 Dough \u4E0A\u9762\u7684\u90A3\u4E2A\u89C2\u70B9\u505A\u4E00\u70B9\u8865\u5145\uFF1A</p></blockquote><p>Although software does not wear out, it can be destroyed from within by unmanaged dependencies on firmware and hardware.</p><blockquote><p>\u201C\u867D\u7136\u8F6F\u4EF6\u8D28\u91CF\u672C\u8EAB\u5E76\u4E0D\u4F1A\u968F\u65F6\u95F4\u63A8\u79FB\u800C\u635F\u8017\uFF0C\u4F46\u662F\u672A\u59A5\u5584\u7BA1\u7406\u7684\u786C\u4EF6\u4F9D\u8D56\u548C\u56FA\u4EF6\u4F9D\u8D56\u5374\u662F\u8F6F\u4EF6\u7684\u5934\u53F7\u6740\u624B\u3002\u201D</p></blockquote><p>It is not uncommon for embedded software to be denied a potentially long life due to being infected with dependencies on hardware.</p><blockquote><p>\u4E5F\u5C31\u662F\u8BF4\uFF0C\u672C\u53EF\u4EE5\u957F\u671F\u4F7F\u7528\u7684\u5D4C\u5165\u5F0F\u8F6F\u4EF6\u53EF\u80FD\u4F1A\u7531\u4E8E\u5176\u4E2D\u9690\u542B\u7684\u786C\u4EF6\u4F9D\u8D56\u5173\u7CFB\u800C\u65E0\u6CD5\u7EE7\u7EED\u4F7F\u7528\uFF0C\u8FD9\u79CD\u60C5\u51B5\u662F\u5F88\u5E38\u89C1\u7684\u3002</p></blockquote><p>I like Doug\u2019s definition of firmware, but let\u2019s see which other definitions are out there. I found these alternatives:</p><blockquote><p>\u6211\u4E2A\u4EBA\u5F88\u559C\u6B22 Doug \u5BF9\u56FA\u4EF6\u6240\u505A\u7684\u5B9A\u4E49\uFF0C\u4F46\u6211\u4EEC\u4E5F\u53EF\u4EE5\u6765\u770B\u4E00\u4E0B\u5176\u4ED6\u4EBA\u5BF9\u56FA\u4EF6\u7684\u5B9A\u4E49\uFF0C\u4EE5\u4E0B\u662F\u6211\u76EE\u524D\u6240\u627E\u5230\u7684\u4E00\u4E9B\u8BF4\u6CD5\uFF1A</p></blockquote>',16),h=n("\u201CFirmware is held in non-volatile memory devices such as ROM, EPROM, or flash memory.\u201D ("),k={href:"https://en.wikipedia.org/wiki/Firmware",target:"_blank",rel:"noopener noreferrer"},m=n("https://en.wikipedia.org/wiki/Firmware"),w=n(")"),b=n("\u201CFirmware is a software program or set of instructions programmed on a hardware device.\u201D ("),f={href:"https://techterms.com/definition/firmware",target:"_blank",rel:"noopener noreferrer"},v=n("https://techterms.com/definition/firmware"),y=n(")"),g=n("\u201CFirmware is software that is embedded in a piece of hardware.\u201D ("),_={href:"https://www.lifewire.com/what-is-firmware-2625881",target:"_blank",rel:"noopener noreferrer"},q=n("https://www.lifewire.com/what-is-firmware-2625881"),A=n(")"),T=n("Firmware is \u201CSoftware (programs or data) that has been written onto read-only memory (ROM).\u201D ("),I={href:"http://www.webopedia.com/TERM/F/firmware.html",target:"_blank",rel:"noopener noreferrer"},S=n("http://www.webopedia.com/TERM/F/firmware.html"),L=n(")"),E=e("hr",null,null,-1),O=n("\u201C\u56FA\u4EF6\u901A\u5E38\u88AB\u5B58\u50A8\u5728\u975E\u53EF\u53D8\u5185\u5B58\u8BBE\u5907\uFF0C\u4F8B\u5982 ROM\u3001EPROM \u6216\u8005\u95EA\u5B58\u4E2D\u3002\u201D\uFF08"),D={href:"https://en.wikipedia.org/wiki/Firmware%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},C=n("https://en.wikipedia.org/wiki/Firmware\uFF09"),x=n("\u201C\u56FA\u4EF6\u662F\u76F4\u63A5\u7F16\u7A0B\u5728\u4E00\u4E2A\u786C\u4EF6\u8BBE\u5907\u4E0A\u7684\u4E00\u7EC4\u6307\u4EE4\u6216\u8005\u4E00\u6BB5\u7A0B\u5E8F\u3002\u201D\uFF08"),R={href:"https://techterms.com/definition/firmware%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},M=n("https://techterms.com/definition/firmware\uFF09"),F=n("\u201C\u56FA\u4EF6\u662F\u5D4C\u5165\u5728\u4E00\u4E2A\u786C\u4EF6\u4E2D\u7684\u8F6F\u4EF6\u7A0B\u5E8F\u3002\u201D\uFF08"),H={href:"https://www.lifewire.com/what-is-firmware-2625881%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},P=n("https://www.lifewire.com/what-is-firmware-2625881\uFF09"),B=n("\u201C\u56FA\u4EF6\u662F\u88AB\u5199\u5165\u5230\u53EA\u8BFB\u5185\u5B58\u8BBE\u5907\u4E2D\u7684\uFF08ROM\uFF09\u7A0B\u5E8F\u6216\u6570\u636E\u3002\u201D\uFF08"),U={href:"http://www.webopedia.com/TERM/F/firmware.html%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},N=n("http://www.webopedia.com/TERM/F/firmware.html\uFF09"),Y=i(`<p>Doug\u2019s statement makes me realize that these accepted definitions of firmware are wrong, or at least obsolete. Firmware does not mean code lives in ROM. It\u2019s not firmware because of where it is stored; rather, it is firmware because of what it depends on and how hard it is to change as hardware evolves. Hardware does evolve (pause and look at your for phone for evidence), so we should structure our embedded code with that reality in mind.</p><blockquote><p>Doug \u7684\u8FD9\u6BB5\u89C2\u70B9\u8868\u8FF0\u8BA9\u6211\u610F\u8BC6\u5230\uFF0C\u5927\u5BB6\u666E\u904D\u6240\u8BA4\u77E5\u7684\u56FA\u4EF6\u5B9A\u4E49\u662F\u9519\u8BEF\u7684\uFF0C\u6216\u8005\u81F3\u5C11\u662F\u8FC7\u65F6\u7684\u3002\u56FA\u4EF6\u5E76\u4E0D\u4E00\u5B9A\u662F\u5B58\u50A8\u5728 ROM \u4E2D\u7684\u4EE3\u7801\u3002\u56FA\u4EF6\u4E5F\u4E0D\u662F\u4F9D\u636E\u5176\u5B58\u50A8\u7684\u4F4D\u7F6E\u6765\u5B9A\u4E49\u7684\uFF0C\u800C\u662F\u7531\u5176\u4EE3\u7801\u7684\u4F9D\u8D56\u5173\u7CFB\uFF0C\u53CA\u5176\u968F\u7740\u786C\u4EF6\u7684\u6F14\u8FDB\u5728\u53D8\u66F4\u96BE\u5EA6\u4E0A\u7684\u53D8\u5316\u6765\u5B9A\u4E49\u7684\u3002\u786C\u4EF6\u7684\u6F14\u8FDB\u662F\u663E\u800C\u6613\u89C1\u7684\uFF08\u5982\u679C\u5BF9\u6B64\u6709\u4EFB\u4F55\u7591\u95EE\uFF0C\u8BF7\u60F3\u4E00\u60F3\u4F60\u624B\u4E2D\u7684\u624B\u673A\uFF09\uFF0C\u6211\u4EEC\u5728\u67B6\u6784\u5D4C\u5165\u5F0F\u4EE3\u7801\u65F6\u8981\u65F6\u523B\u8BB0\u4F4F\u8FD9\u4E00\u70B9\u3002</p></blockquote><p>I have nothing against firmware, or firmware engineers (I\u2019ve been known to write some firmware myself). But what we really need is less firmware and more software. Actually, I am disappointed that firmware engineers write so much firmware!</p><blockquote><p>\u6211\u5E76\u4E0D\u53CD\u5BF9\u56FA\u4EF6\uFF0C\u4E5F\u4E0D\u53CD\u5BF9\u56FA\u4EF6\u5DE5\u7A0B\u5E08\uFF08\u6211\u81EA\u5DF1\u4E5F\u66FE\u7ECF\u5199\u8FC7\u56FA\u4EF6\uFF09\u3002\u4F46\u662F\u6211\u4EEC\u771F\u7684\u5E94\u8BE5\u5C11\u5199\u70B9\u56FA\u4EF6\uFF0C\u800C\u591A\u5199\u70B9\u8F6F\u4EF6\u3002\u4E8B\u5B9E\u4E0A\uFF0C\u6211\u6700\u5931\u671B\u7684\u662F\u56FA\u4EF6\u5DE5\u7A0B\u5E08\u7ADF\u7136\u8981\u5199\u90A3\u4E48\u591A\u56FA\u4EF6\u7A0B\u5E8F\uFF01</p></blockquote><p>Non-embedded engineers also write firmware! You non-embedded developers essentially write firmware whenever you bury SQL in your code or when you spread platform dependencies throughout your code. Android app developers write firmware when they don\u2019t separate their business logic from the Android API.</p><blockquote><p>\u8FD8\u6709\uFF0C\u975E\u5D4C\u5165\u5F0F\u5DE5\u7A0B\u5E08\u7ADF\u7136\u4E5F\u8981\u5199\u56FA\u4EF6\u7A0B\u5E8F\uFF01\u867D\u7136\u4F60\u53EF\u80FD\u5E76\u4E0D\u662F\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u5F00\u53D1\u8005\uFF0C\u4F46\u5982\u679C\u4F60\u5728\u4EE3\u7801\u4E2D\u5D4C\u5165\u4E86 SQL \u6216\u8005\u662F\u4EE3\u7801\u4E2D\u5F15\u5165\u4E86\u5BF9\u67D0\u4E2A\u5E73\u53F0\u7684\u4F9D\u8D56\u7684\u8BDD\uFF0C\u5176\u5B9E\u5C31\u662F\u5728\u5199\u56FA\u4EF6\u4EE3\u7801\u3002\u8B6C\u5982\uFF0CAndroid \u5DE5\u7A0B\u5E08\u5728\u6CA1\u6709\u5C06\u4E1A\u52A1\u903B\u8F91\u4E0E Android API \u5206\u79BB\u4E4B\u524D\uFF0C\u5B9E\u9645\u4E0A\u4E5F\u662F\u5728\u5199\u56FA\u4EF6\u4EE3\u7801\u3002</p></blockquote><p>I\u2019ve been involved in a lot of efforts where the line between the product code (the software) and the code that interacts with the product\u2019s hardware (the firmware) is fuzzy to the point of nonexistence. For example, in the late 1990s I had the fun of helping redesign a communications subsystem that was transitioning from time-division multiplexing (TDM) to voice over IP (VOIP). VOIP is how things are done now, but TDM was considered the state of the art from the 1950s and 1960s, and was widely deployed in the 1980s and 1990s.</p><blockquote><p>\u6211\u53C2\u4E0E\u8FC7\u5F88\u591A\u8F6F\u4EF6\u9879\u76EE\uFF0C\u5176\u4E2D\u4E00\u4E9B\u4EA7\u54C1\u7684\u529F\u80FD\u4EE3\u7801\uFF08\u8F6F\u4EF6\uFF09\u4E0E\u786C\u4EF6\u652F\u6301\u4EE3\u7801\uFF08\u56FA\u4EF6\uFF09\u7684\u8FB9\u754C\u6A21\u7CCA\u5F97\u51E0\u4E4E\u4E0D\u5B58\u5728\u3002\u4F8B\u5982\uFF0C\u5728 20 \u4E16\u7EAA 90 \u5E74\u4EE3\u672B\uFF0C\u6211\u6709\u5E78\u53C2\u4E0E\u4E86\u4E00\u5957\u901A\u4FE1\u7CFB\u7EDF\u7684\u91CD\u65B0\u8BBE\u8BA1\uFF0C\u5C06\u5176\u4ECE\u65F6\u5206\u590D\u7528\uFF08TDM\uFF09\u6A21\u5F0F\u8FC1\u79FB\u5230 VOIP \u6A21\u5F0F\u3002\u867D\u7136 VOIP \u5982\u4ECA\u5DF2\u7ECF\u662F\u884C\u4E1A\u6807\u51C6\uFF0C\u4F46\u662F\u4ECE 20 \u4E16\u7EAA 50 \u5E74\u4EE3\u5230 60 \u5E74\u4EE3\uFF0CTDM \u4E00\u76F4\u90FD\u662F\u975E\u5E38\u5148\u8FDB\u7684\u6280\u672F\uFF0C\u76F4\u5230 20 \u4E16\u7EAA 80 \u5E74\u4EE3\u548C 90 \u5E74\u4EE3\u5B83\u4E5F\u88AB\u5E7F\u6CDB\u90E8\u7F72\u5728\u5404\u79CD\u7CFB\u7EDF\u4E2D\u3002</p></blockquote><p>Whenever we had a question for the systems engineer about how a call should react to a given situation, he would disappear and a little later emerge with a very detailed answer. \u201CWhere did he get that answer?\u201D we asked. \u201CFrom the current product\u2019s code,\u201D he\u2019d answer. The tangled legacy code was the spec for the new product! The existing implementation had no separation between TDM and the business logic of making calls. The whole product was hardware/technology dependent from top to bottom and could not be untangled. The whole product had essentially become firmware.</p><blockquote><p>\u6BCF\u5F53\u6211\u4EEC\u5411\u7CFB\u7EDF\u5DE5\u7A0B\u5E08\u63D0\u51FA\u4E00\u4E2A\u4EA7\u54C1\u95EE\u9898\u2014\u2014\u7CFB\u7EDF\u5728\u67D0\u4E2A\u60C5\u51B5\u4E0B\u5E94\u8BE5\u5982\u4F55\u5904\u7406\u67D0\u901A\u7535\u8BDD\uFF0C\u8FD9\u4F4D\u7CFB\u7EDF\u5DE5\u7A0B\u5E08\u5C31\u4F1A\u6D88\u5931\u4E00\u6BB5\u65F6\u95F4\uFF0C\u7136\u540E\u7ED9\u51FA\u4E00\u4E2A\u975E\u5E38\u5177\u4F53\u7684\u7B54\u6848\u3002\u6211\u4EEC\u95EE\u4ED6\u662F\u4ECE\u54EA\u91CC\u67E5\u5230\u8FD9\u4E2A\u7ED3\u679C\u7684\uFF1F\u7B54\u6848\u662F\u201C\u4ECE\u5F53\u524D\u7684\u4EA7\u54C1\u4EE3\u7801\u91CC\uFF01\u201D\u8FD9\u4E9B\u590D\u6742\u4EA4\u9519\u7684\u8001\u4EE3\u7801\u5DF1\u7ECF\u6210\u4E3A\u7CFB\u7EDF\u5B9A\u4E49\u7684\u4E00\u90E8\u5206\u3002\u8BE5\u7CFB\u7EDF\u5728\u5B9E\u73B0\u8FC7\u7A0B\u4E2D\u5E76\u6CA1\u6709\u533A\u5206 TDM \u6280\u672F\u4EE3\u7801\u548C\u62E8\u6253\u7535\u8BDD\u8FD9\u6837\u7684\u4E1A\u52A1\u903B\u8F91\u4EE3\u7801\u3002\u6574\u4E2A\u4EA7\u54C1\u4ECE\u5934\u5230\u5C3E\u90FD\u4E0E\u5177\u4F53\u6280\u672F\u3001\u5177\u4F53\u786C\u4EF6\u606F\u606F\u76F8\u5173\uFF0C\u65E0\u6CD5\u5206\u5272\u3002\u53EF\u4EE5\u8BF4\u6574\u4E2A\u4EA7\u54C1\u5DF2\u7ECF\u6210\u4E3A\u4E8B\u5B9E\u4E0A\u7684\u56FA\u4EF6\u3002</p></blockquote><p>Consider another example: Command messages arrive to this system via serial port. Unsurprisingly, there is a message processor/dispatcher. The message processor knows the format of messages, is able to parse them, and can then dispatch the message to the code that can handle the request. None of this is surprising, except that the message processor/dispatcher resides in the same file as code that interacts with a UART2 hardware. The message processor is polluted with UART details. The message processor could have been software with a potentially long useful life, but instead it is firmware. The message processor is denied the opportunity to become software\u2014and that is just not right!</p><blockquote><p>\u518D\u6765\u770B\u53E6\u5916\u4E00\u4E2A\u4F8B\u5B50\uFF1A\u6211\u4EEC\u90FD\u77E5\u9053\u547D\u4EE4\u6D88\u606F\u662F\u901A\u8FC7\u4E32\u884C\u7AEF\u53E3\u4F20\u9012\u7ED9\u7CFB\u7EDF\u7684\u3002\u8FD9\u81EA\u7136\u5C31\u8981\u6709\u4E00\u4E2A\u6D88\u606F\u7684\u5904\u7406\u5668/\u5206\u53D1\u5668\u7CFB\u7EDF\u3002\u5176\u4E2D\uFF0C\u6D88\u606F\u5904\u7406\u5668\u5F97\u4E86\u89E3\u6D88\u606F\u683C\u5F0F\uFF0C\u53EF\u4EE5\u89E3\u6790\u6D88\u606F\uFF0C\u7136\u540E\u5C06\u6D88\u606F\u5206\u53D1\u7ED9\u5177\u4F53\u7684\u5904\u7406\u4EE3\u7801\u3002\u8FD9\u4E9B\u90FD\u5F88\u6B63\u5E38\uFF0C\u4F46\u6D88\u606F\u5904\u7406\u5668\u5206\u53D1\u5668\u7684\u4EE3\u7801\u548C\u64CD\u4F5C UART \u786C\u4EF6\u7684\u4EE3\u7801\u5F80\u5F80\u4F1A\u88AB\u653E\u5B58\u540C\u4E00\u4E2A\u6587\u4EF6\u4E2D\u6D88\u606F\u5904\u7406\u5668\u7684\u4EE3\u7801\u4E2D\u5E38\u5E38\u5145\u65A5\u7740\u4E0E UART \u76F8\u5173\u7684\u5B9E\u73B0\u7EC6\u8282\u3002\u8FD9\u6837\u4E00\u6765\uFF0C\u672C\u53EF\u4EE5\u957F\u65F6\u95F4\u4F7F\u7528\u7684\u6D88\u606F\u5904\u7406\u5668\u4EE3\u7801\u53D8\u6210\u4E86\u4E00\u6BB5\u56FA\u4EF6\u4EE3\u7801\uFF0C\u8FD9\u592A\u4E0D\u5E94\u8BE5\u4E86\uFF01</p></blockquote><p>I\u2019ve known and understood the need for separating software from hardware for a long time, but Doug\u2019s words clarified how to use the terms software and firmware in relationship to each other.</p><blockquote><p>\u867D\u7136\u6211\u610F\u8BC6\u5230\u8981\u4ECE\u4F7F\u7528\u610F\u4E49\u4E0A\u5C06\u8F6F\u4EF6\u4E0E\u786C\u4EF6\u3001\u56FA\u4EF6\u533A\u5206\u5F00\u6765\u4E5F\u5DF2\u7ECF\u6709\u4E00\u6BB5\u65F6\u95F4\u4E86\uFF0C\u4F46\u662F\u501F\u52A9 Doug \u5BF9\u8F6F\u4EF6\u548C\u56FA\u4EF6\u7684\u5B9A\u4E49\uFF0C\u6211\u73B0\u5728\u53EF\u4EE5\u5427\u8FD9\u4EF6\u4E8B\u60C5\u8BF4\u5F97\u66F4\u660E\u767D\u4E00\u4E9B\u3002</p></blockquote><p>For engineers and programmers, the message is clear: Stop writing so much firmware and give your code a chance at a long useful life. Of course, demanding it won\u2019t make it so. Let\u2019s look at how we can keep embedded software architecture clean to give the software a fighting chance of having a long and useful life.</p><blockquote><p>\u5BF9\u4E8E\u7A0B\u5E8F\u5458\u548C\u5DE5\u7A0B\u5E08\uFF0C\u6211\u7684\u610F\u601D\u5F88\u660E\u786E\uFF1A\u4E0D\u8981\u518D\u5199\u56FA\u4EF6\u4EE3\u7801\u4E86\uFF0C\u8BA9\u6211\u4EEC\u7684\u4EE3\u7801\u6D3B\u5F97\u66F4\u4E45\u70B9\uFF01\u5F53\u7136\uFF0C\u6211\u4EEC\u4E5F\u4E0D\u80FD\u603B\u662F\u7A7A\u8C08\u7406\u5FF5\uFF0C\u4E0B\u9762\u5C31\u6765\u770B\u4E00\u4E0B\u5E94\u8BE5\u5982\u4F55\u901A\u8FC7\u597D\u7684\u67B6\u6784\u8BBE\u8BA1\u8BA9\u5D4C\u5165\u5F0F\u4EE3\u7801\u62E5\u6709\u66F4\u957F\u7684\u6709\u6548\u751F\u547D\u5468\u671F\u3002</p></blockquote><h2 id="app-titude-test-\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5-\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#app-titude-test-\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5-\u6D4B\u8BD5" aria-hidden="true">#</a> APP-TITUDE TEST \u201C\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5\u201D\u6D4B\u8BD5</h2><p>Why does so much potential embedded software become firmware? It seems that most of the emphasis is on getting the embedded code to work, and not so much emphasis is placed on structuring it for a long useful life. Kent Beck describes three activities in building software (the quoted text is Kent\u2019s words and the italics are my commentary):</p><blockquote><p>\u4E3A\u4EC0\u4E48\u8FD9\u4E48\u591A\u5D4C\u5165\u5F0F\u8F6F\u4EF6\u6700\u540E\u90FD\u6210\u4E86\u56FA\u4EF6\uFF1F\u770B\u8D77\u6765\uFF0C\u5F88\u53EF\u80FD\u662F\u56E0\u4E3A\u6211\u4EEC\u5728\u505A\u5D4C\u5165\u5F0F\u8BBE\u8BA1\u65F6\u53EA\u5173\u6CE8\u4EE3\u7801\u80FD\u5426\u987A\u5229\u8FD0\u884C\uFF0C\u5E76\u4E0D\u592A\u5173\u5FC3\u5176\u7ED3\u6784\u80FD\u5426\u6491\u8D77\u4E00\u4E2A\u8F83\u957F\u7684\u6709\u6548\u751F\u547D\u5468\u671F\u3002Kent Beck \u63CF\u8FF0\u4E86\u8F6F\u4EF6\u6784\u5EFA\u8FC7\u7A0B\u4E2D\u7684\u4E09\u4E2A\u9636\u6BB5\uFF08\u5F15\u53F7\u90E8\u5206\u662F\u4ED6\u7684\u539F\u8BDD\uFF0C\u6977\u4F53\u90E8\u5206\u662F\u6211\u7684\u6CE8\u89E3\uFF09\uFF1A</p></blockquote><ol><li>\u201CFirst make it work.\u201D You are out of business if it doesn\u2019t work.</li><li>\u201CThen make it right.\u201D Refactor the code so that you and others can understand it and evolve it as needs change or are better understood.</li><li>\u201CThen make it fast.\u201D Refactor the code for \u201Cneeded\u201D performance.</li></ol><hr><blockquote><ol><li>\u201C\u5148\u8BA9\u4EE3\u7801\u5DE5\u4F5C\u8D77\u6765\u201D\u2014\u2014\u5982\u679C\u4EE3\u7801\u4E0D\u80FD\u5DE5\u4F5C\uFF0C\u5C31\u4E0D\u80FD\u4EA7\u751F\u4EF7\u503C\u3002</li><li>\u201C\u7136\u540E\u518D\u8BD5\u56FE\u5C06\u5B83\u53D8\u597D\u2014\u2014\u901A\u8FC7\u5BF9\u4EE3\u7801\u8FDB\u884C\u91CD\u6784\uFF0C\u8BA9\u6211\u4EEC\u81EA\u5DF1\u548C\u5176\u4ED6\u4EBA\u66F4\u597D\u5730\u7406\u89E3\u4EE3\u7801\uFF0C\u5E76\u80FD\u6309\u7167\u9700\u6C42\u4E0D\u65AD\u5730\u4FEE\u6539\u4EE3\u7801\u3002</li><li>\u201C\u6700\u540E\u518D\u8BD5\u7740\u8BA9\u5B83\u8FD0\u884C\u5F97\u66F4\u5FEB\u201D\u2014\u2014\u6309\u7167\u6027\u80FD\u63D0\u5347\u7684\u201C\u9700\u6C42\u201D\u6765\u91CD\u6784\u4EE3\u7801\u3002</li></ol></blockquote><p>Much of the embedded systems software that I see in the wild seems to have been written with \u201CMake it work\u201D in mind\u2014and perhaps also with an obsession for the \u201CMake it fast\u201D goal, achieved by adding micro-optimizations at every opportunity. In The Mythical Man-Month, Fred Brooks suggests we \u201Cplan to throw one away.\u201D Kent and Fred are giving virtually the same advice: Learn what works, then make a better solution.</p><blockquote><p>\u6211\u6240\u89C1\u8FC7\u7684\u5927\u90E8\u5206\u201C\u91CE\u751F\u201D\u7684\u5D4C\u5165\u5F0F\u4EE3\u7801\uFF0C\u90FD\u53EA\u5173\u6CE8\u201C\u5148\u8BA9\u5B83\u5DE5\u4F5C\u8D77\u6765\u201D\u8FD9\u4E2A\u76EE\u6807\u2014\u2014\u4E5F\u8BB8\u8FD8\u6709\u4E9B\u56E2\u961F\u4F1A\u540C\u65F6\u75F4\u8FF7\u4E8E\u201C\u8BA9\u5B83\u66F4\u5FEB\u201D\u8FD9\u4E2A\u76EE\u6807\uFF0C\u4E0D\u653E\u8FC7\u4EFB\u4F55\u4E00\u4E2A\u673A\u4F1A\u52A0\u5165\u5404\u79CD\u5FAE\u4F18\u5316\u3002\u5728\u300A\u4EBA\u6708\u795E\u8BDD\u300B\u8FD9\u672C\u4E66\u4E2D\uFF0CFred Brooks \u5EFA\u8BAE\u6211\u4EEC\u5E94\u8BE5\u968F\u65F6\u51C6\u5907\u201C\u629B\u5F03\u4E00\u4E2A\u8BBE\u8BA1\u201D\u3002Kent \u548C Fred \u8BF4\u7684\u5176\u5B9E\u662F\u540C\u4E00\u4EF6\u4E8B\uFF1A\u201C\u5728\u5B9E\u8DF5\u4E2D\u5B66\u4E60\u6B63\u786E\u7684\u5DE5\u4F5C\u65B9\u6CD5\uFF0C\u7136\u540E\u518D\u91CD\u5199\u4E00\u4E2A\u66F4\u597D\u7684\u7248\u672C\u201D\u3002</p></blockquote><p>Embedded software is not special when it comes to these problems. Most non-embedded apps are built just to work, with little regard to making the code right for a long useful life.</p><blockquote><p>\u8FD9\u4E2A\u5EFA\u8BAE\u5BF9\u975E\u5D4C\u5165\u5F0F\u8F6F\u4EF6\u7CFB\u7EDF\u5F00\u53D1\u540C\u6837\u6709\u7528\u3002\u6BD5\u7ADF\u76EE\u524D\u5927\u90E8\u5206\u975E\u5D4C\u5165\u5F0F\u5E94\u7528\u4E5F\u4EC5\u4EC5\u505C\u7559\u5728\u201C\u53EF\u7528\u201D\u8FD9\u4E2A\u76EE\u6807\u4E0A\uFF0C\u5F88\u5C11\u8003\u8651\u4E3A\u4E86\u957F\u4E45\u4F7F\u7528\u800C\u8FDB\u884C\u6B63\u786E\u7684\u8BBE\u8BA1\u3002</p></blockquote><p>Getting an app to work is what I call the App-titude test for a programmer. Programmers, embedded or not, who just concern themselves with getting their app to work are doing their products and employers a disservice. There is much more to programming than just getting an app to work.</p><blockquote><p>\u5BF9\u4E8E\u7A0B\u5E8F\u5458\u6765\u8BF4\uFF0C\u8BA9\u4ED6\u7684\u7A0B\u5E8F\u5DE5\u4F5C\u8FD9\u4EF6\u4E8B\u53EA\u80FD\u88AB\u79F0\u4E3A\u201C\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5\uFF08app-titude test\uFF09\u201D\u3002\u4E00\u4E2A\u7A0B\u5E8F\u5458\uFF0C\u4E0D\u8BBA\u4ED6\u5199\u7684\u662F\u5426\u662F\u5D4C\u5165\u5F0F\u7A0B\u5E8F\uFF0C\u5982\u679C\u76EE\u6807\u4EC5\u4EC5\u662F\u8BA9\u7A0B\u5E8F\u53EF\u4EE5\u5DE5\u4F5C\uFF0C\u6050\u6015\u5BF9\u4ED6\u7684\u8001\u677F\u548C\u8FD9\u4E2A\u7A0B\u5E8F\u672C\u8EAB\u800C\u8A00\u90FD\u662F\u4E00\u4EF6\u574F\u4E8B\u3002\u6BD5\u7ADF\uFF0C\u7F16\u7A0B\u8FD9\u4EF6\u4E8B\u53EF\u8FDC\u4E0D\u6B62\u662F\u8BA9\u7A0B\u5E8F\u53EF\u4EE5\u5DE5\u4F5C\u8FD9\u4E48\u7B80\u5355\u3002</p></blockquote><p>As an example of code produced while passing the App-titude test, check out these functions located in one file of a small embedded system:</p><blockquote><p>\u4E0B\u9762\u6211\u4EEC\u6765\u793A\u8303\u4E00\u4E0B\u53EF\u4EE5\u901A\u8FC7\u201C\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5\u201D\u7684\u4EE3\u7801\u662F\u4EC0\u4E48\u6837\u5B50\u7684\u3002\u5148\u6765\u770B\u4E00\u4E2A\u5C0F\u578B\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u4E2D\u67D0\u4E2A\u6E90\u6587\u4EF6\u4E2D\u7684\u4E00\u6BB5\u51FD\u6570\u58F0\u660E\uFF1A</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">ISR</span><span class="token punctuation">(</span>TIMER1_vect<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token function">ISR</span><span class="token punctuation">(</span>INT2_vect<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">btn_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">float</span> <span class="token function">calc_RPM</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">Read_RawData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Do_Average</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Get_Next_Measurement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Zero_Sensor_1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Zero_Sensor_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Dev_Control</span><span class="token punctuation">(</span><span class="token keyword">char</span> Activation<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">char</span> <span class="token function">Load_FLASH_Setup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Save_FLASH_Setup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Store_DataSet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">float</span> <span class="token function">bytes2float</span><span class="token punctuation">(</span><span class="token keyword">char</span> bytes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Recall_DataSet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">Sensor_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">uC_Sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That list of functions is in the order I found them in the source file. Now I\u2019ll separate them and group them by concern:</p><blockquote><p>\u53EF\u4EE5\u770B\u5230\u8BE5\u6E90\u6587\u4EF6\u4E2D\u7684\u51FD\u6570\u662F\u6309\u4E00\u5B9A\u987A\u5E8F\u5217\u51FA\u6765\u7684\u3002\u73B0\u5728\u6211\u4EEC\u8981\u6309\u7167\u529F\u80FD\u8FDB\u884C\u5206\u7EC4\uFF1A</p></blockquote><ul><li>Functions that have domain logic</li></ul><blockquote><ul><li>\u7528\u4E8E\u5B9A\u4E49\u57DF\u903B\u8F91\uFF08domain logic\uFF09\u7684\u51FD\u6570</li></ul></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">float</span> <span class="token function">calc_RPM</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Do_Average</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Get_Next_Measurement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Zero_Sensor_1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Zero_Sensor_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Functions that set up the hardware platform</li></ul><blockquote><ul><li>\u7528\u4E8E\u8BBE\u7F6E\u786C\u4EF6\u5E73\u53F0\u7684\u51FD\u6570</li></ul></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">ISR</span><span class="token punctuation">(</span>TIMER1_vect<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token operator">*</span>

<span class="token function">ISR</span><span class="token punctuation">(</span>INT2_vect<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uC_Sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

Functions that react to the on off button press

<span class="token keyword">void</span> <span class="token function">btn_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Dev_Control</span><span class="token punctuation">(</span><span class="token keyword">char</span> Activation<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A Function that can get A/D input readings from the hardware</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token class-name">Read_RawData</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Functions that store values to the persistent storage</li></ul><blockquote><ul><li>\u7528\u4E8E\u6267\u884C\u6301\u4E45\u5316\u5B58\u50A8\u7684\u51FD\u6570</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">char</span> <span class="token class-name">Load_FLASH_Setup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Save_FLASH_Setup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Store_DataSet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">float</span> <span class="token function">bytes2float</span><span class="token punctuation">(</span><span class="token keyword">char</span> bytes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Recall_DataSet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Function that does not do what its name implies</li></ul><blockquote><ul><li>\u529F\u80FD\u4E0E\u5176\u540D\u5B57\u4E0D\u7B26\u7684\u51FD\u6570</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token class-name">Sensor_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Looking at some of the other files in this application, I found many impediments to understanding the code. I also found a file structure that implied that the only way to test any of this code is in the embedded target. Virtually every bit of this code knows it is in a special microprocessor architecture, using \u201Cextended\u201D C constructs3 that tie the code to a particular tool chain and microprocessor. There is no way for this code to have a long useful life unless the product never needs to be moved to a different hardware environment.</p><blockquote><p>\u5728\u67E5\u770B\u8BE5\u5E94\u7528\u7A0B\u5E8F\u5176\u4ED6\u6E90\u4EE3\u7801\u6587\u4EF6\u7684\u8FC7\u7A0B\u4E2D\uFF0C\u6211\u540C\u6837\u53D1\u73B0\u4E86\u8BB8\u591A\u7406\u89E3\u4E0A\u7684\u969C\u788D\u70B9\u3002\u540C\u65F6\uFF0C\u6211\u8FD8\u53D1\u73B0\u8FD9\u4E2A\u9879\u76EE\u7684\u7ED3\u6784\u51B3\u5B9A\u4E86\u8BE5\u5E94\u7528\u7A0B\u5E8F\u7684\u6240\u6709\u4EE3\u7801\u53EA\u6709\u5728\u6307\u5B9A\u786C\u4EF6\u5E73\u53F0\u4E0A\u624D\u80FD\u88AB\u6D4B\u8BD5\u3002\u51E0\u4E4E\u4EE3\u7801\u7684\u6240\u6709\u90E8\u5206\u90FD\u77E5\u9053\u5B83\u8981\u8FD0\u884C\u5728\u4E00\u4E2A\u7279\u6B8A\u7684\u5FAE\u5904\u7406\u5668\u5E73\u53F0\u4E0A\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u7528\u7684\u662F\u201C\u88AB\u6269\u5C55\u4E86\u7684\u201D C \u7ED3\u6784\uFF0C\u9700\u8981\u7279\u6B8A\u7684\u5DE5\u5177\u94FE\u548C\u5FAE\u5904\u7406\u5668\u624D\u80FD\u6267\u884C\u3002\u9664\u975E\u8FD9\u4E2A\u4EA7\u54C1\u6C38\u8FDC\u4E0D\u9700\u8981\u8FC1\u79FB\u5230\u53E6\u4E00\u4E2A\u786C\u4EF6\u5E73\u53F0\u4E0A\uFF0C\u5426\u5219\u8FD9\u6BB5\u4EE3\u7801\u51E0\u4E4E\u4E0D\u53EF\u80FD\u6709\u957F\u4E45\u7684\u4F7F\u7528\u4EF7\u503C\u3002</p></blockquote><p>This application works: The engineer passed the App-titude test. But the application can\u2019t be said to have a clean embedded architecture.</p><blockquote><p>\u6240\u4EE5\u4F60\u770B\uFF0C\u8FD9\u6BB5\u4EE3\u7801\u7684\u786E\u80FD\u591F\u6B63\u5E38\u5DE5\u4F5C\uFF1A\u5B83\u7684\u5DE5\u7A0B\u5E08\u4E5F\u901A\u8FC7\u4E86\u201C\u7A0B\u5E8F\u9002\u7528\u6027\u6D4B\u8BD5\u201D\uFF0C\u4F46\u6211\u4EEC\u4E0D\u80FD\u8BF4\u8BE5\u5E94\u7528\u7A0B\u5E8F\u6709\u4E00\u5957\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u3002</p></blockquote><h2 id="the-target-hardware-bottleneck-\u76EE\u6807\u786C\u4EF6\u74F6\u9888" tabindex="-1"><a class="header-anchor" href="#the-target-hardware-bottleneck-\u76EE\u6807\u786C\u4EF6\u74F6\u9888" aria-hidden="true">#</a> THE TARGET-HARDWARE BOTTLENECK \u76EE\u6807\u786C\u4EF6\u74F6\u9888</h2><p>There are many special concerns that embedded developers have to deal with that non-embedded developers do not\u2014for example, limited memory space, real-time constraints and deadlines, limited IO, unconventional user interfaces, and sensors and connections to the real world. Most of the time the hardware is concurrently developed with the software and firmware. As an engineer developing code for this kind of system, you may have no place to run the code. If that\u2019s not bad enough, once you get the hardware, it is likely that the hardware will have its own defects, making software development progress even slower than usual.</p><blockquote><p>\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u7A0B\u5E8F\u5458\u901A\u5E38\u9700\u8981\u5904\u7406\u5F88\u591A\u5728\u5199\u975E\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u65F6\u4E0D\u9700\u8981\u5173\u5FC3\u7684\u4E8B\u60C5\u2014\u2014\u4F8B\u5982\uFF0C\u6709\u9650\u7684\u5730\u5740\u7A7A\u95F4\u3001\u5B9E\u65F6\u6027\u9650\u5236\u3001\u8FD0\u884C\u622A\u6B62\u65F6\u95F4\u3001\u6709\u9650\u7684 I/O \u80FD\u529B\u3001\u975E\u5E38\u89C4\u7684\u7528\u6237\u63A5\u53E3\u3001\u611F\u5E94\u5668\uFF0C\u4EE5\u53CA\u5176\u4ED6\u4E0E\u7269\u7406\u4E16\u754C\u7684\u5B9E\u9645\u94FE\u63A5\u3002\u5927\u90E8\u5206\u65F6\u5019\uFF0C\u8FD9\u4E9B\u7CFB\u7EDF\u7684\u786C\u4EF6\u662F\u548C\u5B83\u7684\u8F6F\u4EF6\u3001\u56FA\u4EF6\u5E76\u884C\u5F00\u53D1\u7684\u3002\u5DE5\u7A0B\u5E08\u5728\u4E3A\u8FD9\u79CD\u7CFB\u7EDF\u7F16\u5199\u4EE3\u7801\u7684\u65F6\u5019\uFF0C\u5F80\u5F80\u6CA1\u6709\u4EFB\u4F55\u5730\u65B9\u53EF\u4EE5\u8FD0\u884C\u3002\u5982\u679C\u4F60\u8BA4\u4E3A\u8FD9\u8FD8\u4E0D\u7B97\u7CDF\u7CD5\u7684\u8BDD\uFF0C\u8BF7\u60F3\u8C61\u4E00\u4E0B\uFF0C\u5982\u679C\u6211\u4EEC\u8981\u7B49\u5230\u771F\u6B63\u62FF\u5230\u786C\u4EF6\u65F6\uFF0C\u624D\u80FD\u4E86\u89E3\u4EE3\u7801\u5728\u8BE5\u786C\u4EF6\u4E0A\u5B58\u5728\u7740\u54EA\u4E9B\u610F\u6599\u4E4B\u5916\u7684\u7F3A\u9677\uFF0C\u8FD9\u4F1A\u5728\u591A\u5927\u7A0B\u5EA6\u4E0A\u62D6\u6162\u6211\u4EEC\u7684\u5F00\u53D1\u8FDB\u5EA6?</p></blockquote><p>Yes, embedded is special. Embedded engineers are special. But embedded development is not so special that the principles in this book are not applicable to embedded systems.</p><blockquote><p>\u662F\u7684\uFF0C\u6211\u4EEC\u627F\u8BA4\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u5F00\u53D1\u6709\u5176\u7279\u6B8A\u6027\uFF0C\u5D4C\u5165\u5F0F\u5DE5\u7A0B\u5E08\u7684\u5DE5\u4F5C\u6709\u5176\u7279\u6B8A\u6027\uFF0C\u4F46\u6211\u4EEC\u5E76\u4E0D\u8BA4\u4E3A\u5D4C\u5165\u5F0F\u5F00\u53D1\u7279\u6B8A\u5230\u672C\u4E66\u6240\u8BB2\u7684\u539F\u5219\u90FD\u4E0D\u9002\u7528\u7684\u7A0B\u5EA6\u3002</p></blockquote><p>One of the special embedded problems is the target-hardware bottleneck. When embedded code is structured without applying clean architecture principles and practices, you will often face the scenario in which you can test your code only on the target. If the target is the only place where testing is possible, the target-hardware bottleneck will slow you down.</p><blockquote><p>\u6807\u786C\u4EF6\u74F6\u9888\uFF08target-hardware bottleneck\uFF09\u662F\u5D4C\u5165\u5F0F\u5F00\u53D1\u6240\u7279\u6709\u7684\u4E00\u4E2A\u95EE\u9898\uFF0C\u5982\u679C\u6211\u4EEC\u6CA1\u6709\u91C7\u7528\u67D0\u79CD\u6E05\u6670\u7684\u67B6\u6784\u6765\u8BBE\u8BA1\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u4EE3\u7801\u7ED3\u6784\uFF0C\u5C31\u7ECF\u5E38\u4F1A\u9762\u4E34\u53EA\u80FD\u5728\u76EE\u6807\u7CFB\u7EDF\u5E73\u53F0\u4E0A\u6D4B\u8BD5\u4EE3\u7801\u7684\u96BE\u9898\u3002\u5982\u679C\u53EA\u80FD\u5728\u7279\u5B9A\u7684\u5E73\u53F0\u4E0A\u6D4B\u8BD5\u4EE3\u7801\uFF0C\u90A3\u4E48\u8FD9\u4E00\u5B9A\u4F1A\u62D6\u6162\u9879\u76EE\u7684\u5F00\u53D1\u8FDB\u5EA6\u3002</p></blockquote><h3 id="a-clean-embedded-architecture-is-a-testable-embedded-architecture-\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u5C31\u662F\u53EF\u6D4B\u8BD5\u7684\u5D4C\u5165\u5F0F\u67B6\u6784" tabindex="-1"><a class="header-anchor" href="#a-clean-embedded-architecture-is-a-testable-embedded-architecture-\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u5C31\u662F\u53EF\u6D4B\u8BD5\u7684\u5D4C\u5165\u5F0F\u67B6\u6784" aria-hidden="true">#</a> A CLEAN EMBEDDED ARCHITECTURE IS A TESTABLE EMBEDDED ARCHITECTURE \u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u5C31\u662F\u53EF\u6D4B\u8BD5\u7684\u5D4C\u5165\u5F0F\u67B6\u6784</h3><p>Let\u2019s see how to apply some of the architectural principles to embedded software and firmware to help you eliminate the target-hardware bottleneck.</p><blockquote><p>\u4E0B\u9762\uFF0C\u6211\u4EEC\u6765\u770B\u4E00\u4E0B\u5177\u4F53\u5E94\u5982\u4F55\u5C06\u67B6\u6784\u8BBE\u8BA1\u7684\u539F\u5219\u5E94\u7528\u5728\u5D4C\u5165\u5F0F\u8F6F\u4EF6\u548C\u56FA\u4EF6\u4E0A\uFF0C\u4EE5\u907F\u514D\u9677\u5165\u76EE\u6807\u786C\u4EF6\u74F6\u9888\u3002</p></blockquote><h3 id="layers-\u5206\u5C42" tabindex="-1"><a class="header-anchor" href="#layers-\u5206\u5C42" aria-hidden="true">#</a> Layers \u5206\u5C42</h3><p>Layering comes in many flavors. Let\u2019s start with three layers, as shown in Figure 29.1. At the bottom, there is the hardware. As Doug warns us, due to technology advances and Moore\u2019s law, the hardware will change. Parts become obsolete, and new parts use less power or provide better performance or are cheaper. Whatever the reason, as an embedded engineer, I don\u2019t want to have a bigger job than is necessary when the inevitable hardware change finally happens.</p><blockquote><p>\u5206\u5C42\u53EF\u4EE5\u6709\u5F88\u591A\u79CD\u65B9\u5F0F\uFF0C\u8FD9\u91CC\u5148\u6309\u56FE 29.1 \u6240\u793A\u7684\u8BBE\u8BA1\u5C06\u7CFB\u7EDF\u5206\u6210\u4E09\u5C42\u3002\u9996\u5148\uFF0C\u5E95\u5C42\u662F\u786C\u4EF6\u5C42\u3002\u6B63\u5982 Doug \u8B66\u544A\u6211\u4EEC\u7684\u90A3\u6837\uFF0C\u7531\u4E8E\u79D1\u6280\u7684\u8FDB\u6B65\u4E0E\u6469\u5C14\u5B9A\u5F8B\uFF0C\u786C\u4EF6\u662F\u4E00\u5B9A\u4F1A\u6539\u53D8\u7684\u3002\u65E7\u7684\u786C\u4EF6\u4E0D\u89C1\u5C06\u4F1A\u88AB\u6DD8\u6C70\uFF0C\u65B0\u7684\u786C\u4EF6\u90E8\u4EF6\u53EF\u80FD\u8017\u7535\u91CF\u66F4\u5C11\uFF0C\u6216\u8005\u6027\u80FD\u66F4\u597D\uFF0C\u6216\u8005\u4EF7\u683C\u66F4\u4FBF\u5B9C\u3002\u4E0D\u7BA1\u786C\u4EF6\u66F4\u65B0\u7684\u539F\u56E0\u662F\u4EC0\u4E48\uFF0C\u4F5C\u4E3A\u5D4C\u5165\u5F0F\u5DE5\u7A0B\u5E08\uFF0C\u6211\u4EEC\u90FD\u4E0D\u4F1A\u5E0C\u671B\u8FD9\u4E9B\u4E0D\u53EF\u907F\u514D\u7684\u786C\u4EF6\u53D8\u52A8\u5E26\u6765\u66F4\u591A\u7684\u5DE5\u4F5C\u91CF\u3002</p></blockquote>`,64),j=n("Three layers"),W=e("p",null,"The separation between hardware and the rest of the system is a given\u2014at least once the hardware is defined (Figure 29.2). Here is where the problems often begin when you are trying to pass the App-titude test. There is nothing that keeps hardware knowledge from polluting all the code. If you are not careful about where you put things and what one module is allowed to know about another module, the code will be very hard to change. I\u2019m not just talking about when the hardware changes, but when the user asks for a change, or when a bug needs to be fixed.",-1),G=e("blockquote",null,[e("p",null,"\u786C\u4EF6\u4E0E\u7CFB\u7EDF\u5176\u4ED6\u90E8\u5206\u7684\u5206\u9694\u662F\u65E2\u5B9A\u7684\u2014\u2014\u81F3\u5C11\u5728\u786C\u4EF6\u8BBE\u8BA1\u5B8C\u6210\u4E4B\u540E\u5982\u6B64\uFF08\u5982\u56FE 29.2 \u6240\u793A\uFF09\u3002\u8FD9\u4E5F\u662F\u5728\u6211\u4EEC\u8BD5\u56FE\u901A\u8FC7\u7A0B\u5E8F\u9002\u7528\u6D4B\u8BD5\u4E4B\u65F6\u5F80\u5F80\u4F1A\u53D1\u751F\u95EE\u9898\u7684\u5730\u65B9\u3002\u56E0\u4E3A\u6CA1\u6709\u4EC0\u4E48\u4E1C\u897F\u53EF\u4EE5\u771F\u6B63\u963B\u788D\u786C\u4EF6\u5B9E\u73B0\u7EC6\u8282\u6C61\u67D3\u5230\u5E94\u7528\u4EE3\u7801\u3002\u5982\u679C\u6211\u4EEC\u5728\u6784\u5EFA\u4EE3\u7801\u7684\u65F6\u5019\u4E0D\u591F\u5C0F\u5FC3\uFF0C\u6CA1\u6709\u5C0F\u5FC3\u5B89\u6392\u54EA\u4E9B\u6A21\u5757\u4E4B\u95F4\u53EF\u4EE5\u4E92\u76F8\u4F9D\u8D56\uFF0C\u4EE3\u7801\u5F88\u5FEB\u5C31\u975E\u5E38\u96BE\u4EE5\u66F4\u6539\u4E86\u3002\u8BF7\u6CE8\u610F\uFF0C\u8FD9\u91CC\u6240\u8BF4\u7684\u53D8\u66F4\u4E0D\u4EC5\u4EC5\u662F\u6307\u6765\u81EA\u786C\u4EF6\u7684\u53D8\u66F4\uFF0C\u8FD8\u5305\u62EC\u7528\u6237\u7684\u529F\u80FD\u6027\u53D8\u66F4\u3001\u4FEE\u590D\u4EE3\u7801\u4E2D\u7684 Bug\u3002")],-1),V=n("Hardware must be separated from the rest of the system"),z=e("p",null,"Software and firmware intermingling is an anti-pattern. Code exhibiting this anti-pattern will resist changes. In addition, changes will be dangerous, often leading to unintended consequences. Full regression tests of the whole system will be needed for minor changes. If you have not created externally instrumented tests, expect to get bored with manual tests\u2014and then you can expect new bug reports.",-1),K=e("blockquote",null,[e("p",null,"\u53E6\u5916\uFF0C\u8F6F\u4EF6\u4E0E\u56FA\u4EF6\u96C6\u6210\u5728\u4E00\u8D77\u4E5F\u5C5E\u4E8E\u8BBE\u8BA1\u4E0A\u7684\u53CD\u6A21\u5F0F\uFF08anti-pattern\uFF09\u3002\u7B26\u5408\u8FD9\u79CD\u53CD\u6A21\u5F0F\u7684\u4EE3\u7801\u4FEE\u6539\u8D77\u6765\u90FD\u4F1A\u5F88\u56F0\u96BE\u3002\u540C\u65F6\uFF0C\u8FD9\u79CD\u4EE3\u7801\u4E5F\u5F88\u5371\u9669\uFF0C\u5BB9\u6613\u9020\u6210\u610F\u5916\u4E8B\u6545\uFF0C\u8FD9\u5BFC\u81F4\u5B83\u7ECF\u5386\u4EFB\u4F55\u5FAE\u5C11\u7684\u6539\u52A8\u90FD\u9700\u8981\u8FDB\u884C\u5B8C\u6574\u7684\u56DE\u5F52\u6D4B\u8BD5\u3002\u5982\u679C\u6CA1\u6709\u5B8C\u5584\u7684\u6D4B\u8BD5\u6D41\u7A0B\uFF0C\u90A3\u4E48\u4F60\u5C31\u7B49\u7740\u65E0\u7A77\u65E0\u5C3D\u7684\u624B\u5DE5\u6D4B\u8BD5\u5427\u2014\u2014\u540C\u65F6\u8FD8\u6709\u7EB7\u6C93\u800C\u6765\u7684 Bug \u62A5\u544A\u3002")],-1),Z=e("h3",{id:"the-hardware-is-a-detail-\u786C\u4EF6\u662F\u5B9E\u73B0\u7EC6\u8282",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-hardware-is-a-detail-\u786C\u4EF6\u662F\u5B9E\u73B0\u7EC6\u8282","aria-hidden":"true"},"#"),n(" The Hardware Is a Detail \u786C\u4EF6\u662F\u5B9E\u73B0\u7EC6\u8282")],-1),X=e("p",null,"The line between software and firmware is typically not so well defined as the line between code and hardware, as shown in Figure 29.3.",-1),Q=e("blockquote",null,[e("p",null,"\u8F6F\u4EF6\u4E0E\u56FA\u4EF6\u4E4B\u95F4\u7684\u8FB9\u754C\u5F80\u5F80\u6CA1\u6709\u4EE3\u7801\u4E0E\u786C\u4EF6\u4E4B\u95F4\u7684\u8FB9\u754C\u90A3\u4E48\u6E05\u6670\uFF0C\u5982\u56FE 29.3 \u6240\u793A\u3002")],-1),J=n("The line between software and firmware is a bit fuzzier than the line between code and hardware"),$=e("p",null,"One of your jobs as an embedded software developer is to firm up that line. The name of the boundary between the software and the firmware is the hardware abstraction layer (HAL) (Figure 29.4). This is not a new idea: It has been in PCs since the days before Windows.",-1),ee=e("blockquote",null,[e("p",null,"\u6240\u4EE5\uFF0C\u6211\u4EEC\u7684\u5DE5\u4F5C\u4E4B\u4E00\u5C31\u662F\u5C06\u8FD9\u4E2A\u8FB9\u754C\u5B9A\u4E49\u5F97\u66F4\u6E05\u6670\u4E00\u4E9B\u3002\u8F6F\u4EF6\u4E0E\u56FA\u4EF6\u4E4B\u95F4\u7684\u8FB9\u754C\u88AB\u79F0\u4E3A\u786C\u4EF6\u62BD\u8C61\u5C42\uFF08HAL\uFF09\uFF0C\u5982\u56FE 29.4 \u6240\u793A\u3002\u8FD9\u4E0D\u662F\u4E00\u4E2A\u65B0\u6982\u5FF5\uFF0C\u5B83\u5728 PC \u4E0A\u7684\u5B58\u5728\u751A\u81F3\u53EF\u4EE5\u8FFD\u6EAF\u5230 Windows \u8BDE\u751F\u4E4B\u524D\u3002")],-1),ne=n("The hardware abstraction layer"),ae=i(`<p>The HAL exists for the software that sits on top of it, and its API should be tailored to that software\u2019s needs. As an example, the firmware can store bytes and arrays of bytes into flash memory. In contrast, the application needs to store and read name/value pairs to some persistence mechanism. The software should not be concerned that the name/value pairs are stored in flash memory, a spinning disk, the cloud, or core memory. The HAL provides a service, and it does not reveal to the software how it does it. The flash implementation is a detail that should be hidden from software.</p><blockquote><p>HAL \u7684\u5B58\u5728\u662F\u4E3A\u4E86\u7ED9\u5B83\u4E0A\u5C42\u7684\u8F6F\u4EF6\u63D0\u4F9B\u670D\u52A1\uFF0CHAL \u7684 API \u5E94\u8BE5\u6309\u7167\u8FD9\u4E9B\u8F6F\u4EF6\u7684\u9700\u8981\u6765\u91CF\u8EAB\u5B9A\u505A\u3002\u4F8B\u5982\uFF0C\u56FA\u4EF6\u53EF\u4EE5\u76F4\u63A5\u5C06\u5B57\u8282\u548C\u5B57\u8282\u7EC4\u5B58\u5165\u95EA\u5B58\u4E2D\u3002\u76F8\u6BD4\u4E4B\u4E0B\uFF0C\u8F6F\u4EF6\u9700\u8981\u7684\u662F\u4ECE\u67D0\u79CD\u6301\u4E45\u5316\u5E73\u53F0\u4FDD\u5B58\u548C\u8BFB\u53D6 name/value \u5BF9\u4FE1\u606F\uFF0C\u5B83\u4E0D\u5E94\u8BE5\u5173\u5FC3\u81EA\u5DF1\u4FE1\u606F\u5230\u5E95\u662F\u88AB\u5B58\u50A8\u5230\u95EA\u5B58\u4E2D\u3001\u78C1\u76D8\u4E2D\u3001\u4E91\u7AEF\u5B58\u50A8\u4E2D\uFF0C\u8FD8\u662F\u5728\u5185\u5B58\u4E2D\u8BFB\u53D6/\u5B58\u50A8\u8FD9\u4E9B\u4FE1\u606F\u3002\u603B\u4E4B\uFF0CHAL \u7684\u4F5C\u7528\u662F\u4E3A\u8F6F\u4EF6\u90E8\u5206\u63D0\u4F9B\u4E00\u79CD\u670D\u52A1\uFF0C\u4EE5\u4FBF\u9690\u85CF\u5177\u4F53\u7684\u5B9E\u73B0\u7EC6\u8282\u3002\u6BD5\u7ADF\u662F\u4E13\u95E8\u9488\u5BF9\u95EA\u5B58\u7684\u5B9E\u73B0\u4EE3\u7801\u662F\u4E00\u79CD\u7EC6\u8282\u4FE1\u606F\uFF0C\u5B83\u5E94\u8BE5\u4E0E\u8F6F\u4EF6\u90E8\u5206\u9694\u79BB\u3002</p></blockquote><p>As another example, an LED is tied to a GPIO bit. The firmware could provide access to the GPIO bits, where a HAL might provide Led_TurnOn(5). That is a pretty low-level hardware abstraction layer. Let\u2019s consider raising the level of abstraction from a hardware perspective to the software/product perspective. What is the LED indicating? Suppose that it indicated low battery power. At some level, the firmware (or a board support package) could provide Led_TurnOn(5), while the HAL provides Indicate_LowBattery(). You can see the HAL expressing services needed by the application. You can also see that layers may contain layers. It is more of a repeating fractal pattern than a limited set of predefined layers. The GPIO assignments are details that should be hidden from the software.</p><blockquote><p>\u6211\u4EEC\u518D\u6765\u770B\u53E6\u4E00\u4E2A\u4F8B\u5B50\uFF1A\u6709\u4E00\u4E2A LED \u88AB\u8FDE\u63A5\u5230\u4E00\u4E2A GPIO \u6BD4\u7279\u4F4D\u4E0A\u3002\u56FA\u4EF6\u53EF\u4EE5\u76F4\u63A5\u64CD\u4F5C GPIO \u6BD4\u7279\u4F4D\uFF0C\u800C HAL \u5219\u4F1A\u63D0\u4F9B\u4E00\u4E2A Led_TurnOn(5) \u6570\u3002\u8FD9\u79CD\u786C\u4EF6\u62BD\u8C61\u5C42\u7684\u5C42\u6B21\u662F\u76F8\u5F53\u4F4E\u7684\u3002\u73B0\u5728\uFF0C\u5047\u8BBE\u6211\u4EEC\u60F3\u5C06\u62BD\u8C61\u5C42\u6B21\u4ECE\u786C\u4EF6\u5C42\u6B21\u63D0\u5347\u5230\u8F6F\u4EF6/\u4EA7\u54C1\u7684\u5C42\u6B21\u3002\u8FD9\u65F6\u5019\u5C31\u8981\u5F04\u6E05\u695A\u8FD9\u4E2A LED \u5230\u5E95\u4EE3\u8868\u7684\u662F\u4EC0\u4E48\u3002\u5047\u8BBE\u5B83\u4EE3\u8868\u4E86\u7535\u6C60\u7535\u91CF\u4E0D\u8DB3\uFF0C\u90A3\u4E48\u5176\u56FA\u7801\uFF08\u6216\u8BE5\u7535\u8DEF\u677F\u7684\u652F\u6301\u5305\uFF09\u53EF\u80FD\u5C31\u4F1A\u8D1F\u8D23\u63D0\u4F9B Led_TurnOn(5) \u51FD\u6570\uFF0C\u800C HAL \u5219\u8D1F\u8D23\u63D0\u4F9B Indicate_LowBattery() \u51FD\u6570\u3002\u7531\u6B64\u53EF\u89C1\uFF0CHAL \u5C42\u662F\u6309\u7167\u5E94\u7528\u7A0B\u5E8F\u7684\u9700\u8981\u6765\u63D0\u4F9B\u670D\u52A1\u7684\u3002\u540C\u65F6\uFF0C\u6211\u4EEC\u4E5F\u80FD\u770B\u51FA\u6765\u7CFB\u7EDF\u7684\u6BCF\u4E00\u4E2A\u5206\u5C42\u4E2D\u90FD\u53EF\u4EE5\u5305\u542B\u8BB8\u591A\u5206\u5C42\u3002\u76F8\u5BF9\u4E8E\u4E4B\u524D\u7684\u56FA\u5B9A\u5206\u5C42\u6CD5\uFF0C\u8FD9\u91CC\u66F4\u50CF\u662F\u4E00\u79CD\u65E0\u9650\u5206\u5C42\u6A21\u5F0F\u3002\u603B\u4E4B\uFF0CGPIO \u4F4D\u7684\u5BF9\u5E94\u5173\u7CFB\u5E94\u8BE5\u662F\u4E00\u4E2A\u5177\u4F53\u7684\u5B9E\u73B0\u7EC6\u8282\uFF0C\u5B83\u5E94\u8BE5\u4E0E\u8F6F\u4EF6\u90E8\u5206\u9694\u79BB\u3002</p></blockquote><h3 id="don-t-reveal-hardware-details-to-the-user-of-the-hal-\u4E0D\u8981\u5411-hal-\u7684\u7528\u6237\u66B4\u9732\u786C\u4EF6\u7EC6\u8282" tabindex="-1"><a class="header-anchor" href="#don-t-reveal-hardware-details-to-the-user-of-the-hal-\u4E0D\u8981\u5411-hal-\u7684\u7528\u6237\u66B4\u9732\u786C\u4EF6\u7EC6\u8282" aria-hidden="true">#</a> DON\u2019T REVEAL HARDWARE DETAILS TO THE USER OF THE HAL \u4E0D\u8981\u5411 HAL \u7684\u7528\u6237\u66B4\u9732\u786C\u4EF6\u7EC6\u8282</h3><p>A clean embedded architecture\u2019s software is testable off the target hardware. A successful HAL provides that seam or set of substitution points that facilitate off-target testing.</p><blockquote><p>\u4F9D\u7167\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u6240\u5EFA\u6784\u7684\u8F6F\u4EF6\u5E94\u8BE5\u662F\u53EF\u4EE5\u8131\u79BB\u76EE\u6807\u786C\u4EF6\u5E73\u53F0\u6765\u8FDB\u884C\u6D4B\u8BD5\u7684\u3002\u56E0\u4E3A\u8BBE\u8BA1\u5408\u7406\u7684 HAL \u53EF\u4EE5\u4E3A\u6211\u4EEC\u8131\u79BB\u786C\u4EF6\u5E73\u53F0\u7684\u6D4B\u8BD5\u63D0\u4F9B\u76F8\u5E94\u7684\u652F\u6491\u3002</p></blockquote><h3 id="the-processor-is-a-detail" tabindex="-1"><a class="header-anchor" href="#the-processor-is-a-detail" aria-hidden="true">#</a> The Processor Is a Detail</h3><p>When your embedded application uses a specialized tool chain, it will often provide header files to <code>&lt;i&gt;</code>help you<code>&lt;/i&gt;</code>.4 These compilers often take liberties with the C language, adding new keywords to access their processor features. The code will look like C, but it is no longer C.</p><blockquote><p>\u5F53\u6211\u4EEC\u7684\u5D4C\u5165\u5F0F\u5E94\u7528\u4F9D\u8D56\u4E8E\u67D0\u79CD\u7279\u6B8A\u7684\u5DE5\u5177\u94FE\u65F6\uFF0C\u8BE5\u5DE5\u5177\u94FE\u901A\u5E38\u4F1A\u4E3A\u6211\u4EEC\u63D0\u4F9B\u4E00\u4E9B\u201C<code>&lt;i&gt;\u5E2E\u52A9&lt;/i&gt;</code>&quot;\u6027\u8D28\u7684\u5934\u6587\u4EF6\u3002\u8FD9\u4E9B\u7F16\u8BD1\u5668\u5F80\u5F80\u4F1A\u81EA\u5E26\u4E00\u4E9B\u57FA\u4E8E C \u8BED\u8A00\u7684\u6269\u5C55\u5E93\uFF0C\u5E76\u6DFB\u52A0\u4E00\u4E9B\u7528\u4E8E\u8BBF\u95EE\u7279\u6B8A\u529F\u80FD\u7684\u5173\u952E\u8BCD\u3002\u8FD9\u4F1A\u5BFC\u81F4\u8FD9\u4E9B\u7A0B\u5E8F\u7684\u4EE3\u7801\u770B\u8D77\u6765\u4ECD\u7136\u7528\u7684\u662F C \u8BED\u8A00\uFF0C\u4F46\u5B9E\u9645\u4E0A\u5B83\u4EEC\u5DF2\u7ECF\u4E0D\u662F C \u8BED\u8A00\u4E86\u3002</p></blockquote><p>Sometimes vendor-supplied C compilers provide what look like global variables to give access directly to processor registers, IO ports, clock timers, IO bits, interrupt controllers, and other processor functions. It is helpful to get access to these things easily, but realize that any of your code that uses these helpful facilities is no longer C. It won\u2019t compile for another processor, or maybe even with a different compiler for the same processor.</p><blockquote><p>\u6709\u65F6\u5019\uFF0C\u8FD9\u4E9B\u5D4C\u5165\u5F0F\u5E94\u7528\u7684\u63D0\u4F9B\u5546\u6240\u6307\u5B9A\u7684 C \u7F16\u8BD1\u5668\u8FD8\u4F1A\u63D0\u4F9B\u7C7B\u4F3C\u4E8E\u5168\u5C40\u53D8\u91CF\u7684\u529F\u80FD\uFF0C\u4EE5\u4FBF\u6211\u4EEC\u76F4\u63A5\u8BBF\u95EE\u5BC4\u5B58\u5668\u3001I/O \u7AEF\u53E3\u3001\u65F6\u949F\u4FE1\u606F\u3001I/O \u4F4D\u3001\u4E2D\u65AD\u63A7\u5236\u5668\u4EE5\u53CA\u5176\u4ED6\u5904\u7406\u5668\u51FD\u6570\uFF0C\u8FD9\u4E9B\u51FD\u6570\u4F1A\u6781\u5927\u5730\u65B9\u4FBF\u6211\u4EEC\u5BF9\u76F8\u5173\u786C\u4EF6\u7684\u8BBF\u95EE\u3002\u4F46\u8BF7\u6CE8\u610F\uFF0C\u4E00\u65E6\u4F60\u5728\u4EE3\u7801\u4E2D\u4F7F\u7528\u4E86\u8FD9\u4E9B\u51FD\u6570\uFF0C\u4F60\u5199\u7684\u5C31\u4E0D\u518D\u662F C \u8BED\u8A00\u7A0B\u5E8F\uFF0C\u5B83\u5C31\u4E0D\u80FD\u7528\u5176\u4ED6\u7F16\u8BD1\u5668\u6765\u7F16\u8BD1\u4E86\uFF0C\u751A\u81F3\u53EF\u80FD\u8FDE\u540C\u4E00\u4E2A\u5904\u7406\u5668\u7684\u4E0D\u540C\u7F16\u8BD1\u5668\u4E5F\u4E0D\u884C\u3002</p></blockquote><p>I would hate to think that the silicon and tool provider is being cynical, tying your product to the compiler. Let\u2019s give the provider the benefit of a doubt by assuming that it is truly trying to help. But now it\u2019s up to you to use that help in a way that does not hurt in the future. You will have to limit which files are allowed to know about the C extensions.</p><blockquote><p>\u6211\u4E0D\u60F3\u8BF4\u8FD9\u662F\u63D0\u4F9B\u5546\u6545\u610F\u7ED9\u6211\u4EEC\u8BBE\u7F6E\u7684\u9677\u9631\uFF0C\u5373\u4FBF\u6211\u4EEC\u5047\u8BBE\u8FD9\u4E9B\u786C\u4EF6\u63D0\u4F9B\u5546\u8FD9\u6837\u505A\u771F\u7684\u662F\u4E3A\u4E86\u201C\u5E2E\u52A9\u201D\u6211\u4EEC\uFF0C\u6211\u4EEC\u81EA\u5DF1\u4E5F\u8981\u77E5\u9053\u5982\u4F55\u6765\u5229\u7528\u8FD9\u4E9B\u201C\u5E2E\u52A9\u201D\uFF0C\u8FD9\u624D\u662F\u95EE\u9898\u7684\u5173\u952E\u3002\u4E3A\u907F\u514D\u81EA\u5DF1\u7684\u4EE3\u7801\u5728\u672A\u6765\u51FA\u73B0\u95EE\u9898\uFF0C\u6211\u4EEC\u5C31\u5FC5\u987B\u9650\u5236\u8FD9\u4E9B C \u6269\u5C55\u7684\u4F7F\u7528\u8303\u56F4\u3002</p></blockquote><p>Let\u2019s look at this header file designed for the ACME family of DSPs\u2014you know, the ones used by Wile E. Coyote:</p><blockquote><p>\u4E0B\u9762\u6765\u770B\u4E00\u4E0B\u9488\u5BF9 ACME DSP\uFF08\u6570\u5B57\u4FE1\u53F7\u5904\u7406\u5668\uFF09\u7CFB\u7EDF\u8BBE\u8BA1\u7684\u5934\u6587\u4EF6\u2014\u2014While E Coyote \u91C7\u7528\u7684\u5C31\u662F\u8FD9\u4E2A\u7CFB\u7EDF\uFF1A</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_ACME_STD_TYPES</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_ACME_STD_TYPES</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_ACME_X42<span class="token punctuation">)</span></span></span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>        Uint_32<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>      Uint_16<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>       Uint_8<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">int</span>                 Int_32<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">short</span>               Int_16<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">char</span>                Int_8<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_ACME_A42<span class="token punctuation">)</span></span></span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       Uint_32<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>        Uint_16<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>       Uint_8<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">long</span>                Int_32<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">int</span>                 Int_16<span class="token punctuation">;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">char</span>                Int_8<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression"><span class="token operator">&lt;</span>acmetypes<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> is not supported <span class="token keyword">for</span> this environment</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The acmetypes.h header file should not be used directly. If you do, your code gets tied to one of the ACME DSPs. You are using an ACME DSP, you say, so what is the harm? You can\u2019t compile your code unless you include this header. If you use the header and define <code>__ACME_X42</code> or <code>__ACME_A42</code>, your integers will be the wrong size if you try to test your code off-target. If that is not bad enough, one day you\u2019ll want to port your application to another processor, and you will have made that task much more difficult by not choosing portability and by not limiting what files know about ACME.</p><blockquote><p>\u8BE5 <code>acmetypes.h</code> \u5934\u6587\u4EF6\u901A\u5E38\u4E0D\u5E94\u8BE5\u76F4\u63A5\u4F7F\u7528\u3002\u56E0\u4E3A\u5982\u679C\u8FD9\u6837\u505A\u7684\u8BDD\uFF0C\u4EE3\u7801\u5C31\u548C\u67D0\u4E2A ACME DSP \u7ED1\u5B9A\u5728\u4E00\u8D77\u4E86\u3002\u8FD9\u65F6\u5019\u4F60\u53EF\u80FD\u4F1A\u95EE\uFF0C\u6211\u4EEC\u5728\u8FD9\u91CC\u5199\u4EE3\u7801\u4E0D\u5C31\u662F\u4E3A\u4E86\u4F7F\u7528 ACME DSP \u5417\uFF1F\u4E0D\u5F15\u7528\u8FD9\u4E2A\u5934\u6587\u4EF6\u5982\u4F55\u7F16\u8BD1\u4EE3\u7801\u5462\uFF1F\u4F46\u5982\u679C\u5F15\u7528\u4E86\u8FD9\u4E2A\u5934\u6587\u4EF6\uFF0C\u5C31\u7B49\u4E8E\u540C\u65F6\u5B9A\u4E49\u4E86 <code>__ACME_X42</code> \u548C <code>__ACME_A42</code>\uFF0C\u90A3\u4E48\u6211\u4EEC\u7684\u4EE3\u7801\u5728\u5E73\u53F0\u4E4B\u5916\u8FDB\u884C\u6D4B\u8BD5\u7684\u65F6\u5019\u6574\u6570\u7C7B\u578B\u7684\u5927\u5C0F\u5C31\u4F1A\u662F\u9519\u8BEF\u7684\u3002\u66F4\u7CDF\u7CD5\u7684\u662F\uFF0C\u6709\u4E00\u5929\u5F53\u6211\u4EEC\u60F3\u5C06\u4EE3\u7801\u8FC1\u79FB\u5230\u53E6\u5916\u4E00\u4E2A\u5904\u7406\u5668\u4E0A\u7684\u65F6\u5019\uFF0C\u5982\u679C\u6CA1\u6709\u5728\u8FD9\u91CC\u9650\u5236 ACME \u5934\u6587\u4EF6\u88AB\u5F15\u7528\u7684\u8303\u56F4\uFF0C\u5C31\u4F1A\u5927\u5927\u589E\u52A0\u8FD9\u9879\u8FC1\u79FB\u5DE5\u4F5C\u7684\u96BE\u5EA6\u3002</p></blockquote><p>Instead of using acmetypes.h, you should try to follow a more standardized path and use stdint.h. But what if the target compiler does not provide stdint.h? You can write this header file. The stdint.h you write for target builds uses the acmetypes.h for target compiles like this:</p><blockquote><p>\u56E0\u6B64\u5728\u8FD9\u91CC\uFF0C\u6211\u4EEC\u5E94\u8BE5\u7528\u6807\u51C6\u7684 <code>stdint.h</code> \u6765\u66FF\u4EE3 <code>acmetypes.h</code>\u3002\u5982\u679C\u76EE\u6807\u7F16\u8BD1\u5668\u6CA1\u6709\u63D0\u4F9B <code>stdint.h</code> \u7684\u8BDD\uFF0C\u6211\u4EEC\u53EF\u4EE5\u81EA\u5DF1\u5199\u4E00\u4E2A\u3002\u4F8B\u5982\uFF0C\u4E0B\u9762\u5C31\u662F\u4E00\u4E2A\u9488\u5BF9\u76EE\u6807\u7F16\u8BD1\u5668\u7684\uFF0C\u53EF\u4EE5\u7528 <code>acmetypes.h</code> \u6765\u6784\u5EFA\u76EE\u6807\u7684\u81EA\u5B9A\u4E49 <code>stdint.h</code>\uFF1A</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_STDINT_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_STDINT_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;acmetypes.h&gt;</span></span>

<span class="token keyword">typedef</span> Uint_32 <span class="token class-name">uint32_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Uint_16 <span class="token class-name">uint16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Uint_8  <span class="token class-name">uint8_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Int_32  <span class="token class-name">int32_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Int_16  <span class="token class-name">int16_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Int_8   <span class="token class-name">int8_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Having your embedded software and firmware use stdint.h helps keep your code clean and portable. Certainly, all of the software should be processor independent, but not all of the firmware can be. This next code snippet takes advantage of special extensions to C that gives your code access to the peripherals in the micro-controller. It\u2019s likely your product uses this micro-controller so that you can use its integrated peripherals. This function outputs a line that says &quot;hi&quot; to the serial output port. (This example is based on real code from the wild.)</p><blockquote><p>\u4F7F\u7528 <code>stdint.h</code> \u6765\u7F16\u5199\u5D4C\u5165\u5F0F\u7684\u8F6F\u4EF6\u548C\u56FA\u4EF6\uFF0C\u4F60\u7684\u4EE3\u7801\u4F1A\u662F\u6574\u6D01\u4E14\u53EF\u79FB\u690D\u7684\u3002\u5F53\u7136\uFF0C\u6211\u4EEC\u5E94\u8BE5\u8BA9\u6240\u6709\u7684\u8F6F\u4EF6\u90FD\u72EC\u7ACB\u4E8E\u5904\u7406\u5668\uFF0C\u4F46\u8FD9\u5E76\u4E0D\u662F\u6240\u6709\u56FA\u4EF6\u90FD\u53EF\u4EE5\u505A\u5230\u7684\u3002\u4E0B\u9762\u8FD9\u6BB5\u4EE3\u7801\u4F7F\u7528\u4E86\u7279\u6B8A\u7684 C \u6269\u5C55\u6765\u8BBF\u95EE\u5FAE\u5904\u7406\u5668\u7684\u914D\u4EF6\uFF0C\u8FD9\u6837\u505A\u7684\u76EE\u7684\u5F88\u53EF\u80FD\u5C31\u662F\u4E3A\u4E86\u4F7F\u7528\u8FD9\u4E2A\u914D\u4EF6\u3002\u8FD9\u4E2A\u51FD\u6570\u7684\u4F5C\u7528\u5C31\u662F\u8F93\u51FA\u4E00\u884C&quot;hi&quot;\u5230\u4E32\u53E3\u3002\uFF08\u8BE5\u4F8B\u5B50\u6765\u81EA\u4E8E\u4E00\u4E2A\u771F\u5B9E\u9879\u76EE\u3002\uFF09</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">say_hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  IE <span class="token operator">=</span> <span class="token number">0</span>b11000000<span class="token punctuation">;</span>
  SBUF0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>TI_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  TI_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  SBUF0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x69</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>TI_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  TI_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  SBUF0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>TI_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  TI_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  SBUF0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>TI_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  TI_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  IE <span class="token operator">=</span> <span class="token number">0</span>b11010000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are lots of problems with this small function. One thing that might jump out at you is the presence of 0b11000000. This binary notation is cool; can C do that? Unfortunately, no. A few other problems relate to this code directly using the custom C extensions:</p><blockquote><p>\u8FD9\u4E2A\u5C0F\u51FD\u6570\u4E2D\u5B58\u5728\u5927\u91CF\u7684\u95EE\u9898\u3002\u9996\u5148\uFF0C\u4F60\u6CE8\u610F\u5230\u7684\u53EF\u80FD\u5C31\u662F <code>0b11000000</code>\u3002\u4E8C\u8FDB\u5236\u8868\u793A\u6CD5\u7684\u786E\u5F88\u9177\uFF0C\u4F46 C \u8BED\u8A00\u652F\u6301\u5B83\u5417\uFF1F\u5E76\u4E0D\u652F\u6301\u3002\u53E6\u5916\u8FD8\u6709\u4E00\u4E9B\u95EE\u9898\u4E5F\u4E0E C \u8BED\u8A00\u7684\u6269\u5C55\u6709\u5173\u3002</p></blockquote><p>IE: Interrupt enable bits.</p><p>SBUF0: Serial output buffer.</p><p>TI_0: Serial transmit buffer empty interrupt. Reading a 1 indicates the buffer is empty.</p><blockquote><p>IE\uFF1A\u8BBE\u7F6E\u4E2D\u65AD\u6BD4\u7279\u4F4D\u3002</p><p>SBUF0\uFF1A\u4E32\u53E3\u8F93\u51FA\u7F13\u51B2\u533A\u3002</p><p>TI_0\uFF1A\u4E32\u53E3\u4F20\u8F93\u533A\u7A7A\u4E2D\u65AD\u3002\u8BFB\u53D6\u5230 1 \u8868\u660E\u7F13\u51B2\u533A\u4E3A\u7A7A\u3002</p></blockquote><p>The uppercase variables actually access micro-controller built-in peripherals. If you want to control interrupts and output characters, you must use these peripherals. Yes, this is convenient\u2014but it\u2019s not C.</p><blockquote><p>\u8FD9\u4E9B\u540D\u5B57\u5927\u5199\u7684\u53D8\u91CF\u5B9E\u9645\u4E0A\u90FD\u662F\u7528\u6765\u8BBF\u95EE\u5FAE\u5904\u7406\u5668\u7684\u5185\u7F6E\u90E8\u4EF6\u7684\u3002\u5982\u679C\u6211\u4EEC\u9700\u8981\u63A7\u5236\u4E2D\u65AD\u5E76\u4E14\u8F93\u51FA\u5B57\u7B26\uFF0C\u5C31\u5FC5\u987B\u4F7F\u7528\u8FD9\u4E9B\u90E8\u4EF6\uFF0C\u5B83\u4EEC\u4E5F\u786E\u5B9E\u5F88\u65B9\u4FBF\u2014\u2014\u4F46\u8FD9\u4E0D\u662F C \u4EE3\u7801\u3002</p></blockquote><p>A clean embedded architecture would use these device access registers directly in very few places and confine them totally to the firmware. Anything that knows about these registers becomes firmware and is consequently bound to the silicon. Tying code to the processor will hurt you when you want to get code working before you have stable hardware. It will also hurt you when you move your embedded application to a new processor.</p><blockquote><p>\u5728\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u4E2D\uFF0C\u6211\u4EEC\u4F1A\u5C06\u8FD9\u4E9B\u7528\u4E8E\u8BBE\u5907\u8BBF\u95EE\u7684\u5BC4\u5B58\u5668\u8BBF\u95EE\u96C6\u4E2D\u5728\u4E00\u8D77\uFF0C\u5E76\u5C06\u5176\u9650\u5236\u5728\u56FA\u4EF6\u5C42\u4E2D\u3002\u8FD9\u6837\u4E00\u6765\uFF0C\u4EFB\u4F55\u9700\u8981\u77E5\u9053\u8FD9\u4E9B\u5BC4\u5B58\u5668\u503C\u7684\u4EE3\u7801\u90FD\u5FC5\u987B\u6210\u4E3A\u56FA\u4EF6\u4EE3\u7801\uFF0C\u4E0E\u786C\u4EF6\u5B9E\u73B0\u7ED1\u5B9A\u3002\u4E00\u65E6\u8FD9\u4E9B\u4EE3\u7801\u4E0E\u5904\u7406\u5668\u5B9E\u73B0\u5F3A\u7ED1\u5B9A\uFF0C\u90A3\u4E48\u5728\u5904\u7406\u5668\u7A33\u5B9A\u5DE5\u4F5C\u4E4B\u524D\u5B83\u4EEC\u662F\u65E0\u6CD5\u5DE5\u4F5C\u7684\uFF0C\u5E76\u4E14\u5728\u9700\u8981\u5C06\u5176\u8FC1\u79FB\u5230\u4E00\u4E2A\u65B0\u5904\u7406\u5668\u4E0A\u65F6\u4E5F\u4F1A\u9047\u5230\u9EBB\u70E6\u3002</p></blockquote><p>If you use a micro-controller like this, your firmware could isolate these low-level functions with some form of a processor abstraction layer (PAL). Firmware above the PAL could be tested off-target, making it a little less firm.</p><blockquote><p>\u5982\u679C\u6211\u4EEC\u771F\u7684\u9700\u8981\u4F7F\u7528\u8FD9\u79CD\u5FAE\u5904\u7406\u5668\uFF0C\u56FA\u4EF6\u5C31\u5FC5\u987B\u5C06\u8FD9\u7C7B\u5E95\u5C42\u51FD\u6570\u9694\u79BB\u6210\u5904\u7406\u5668\u62BD\u8C61\u5C42\uFF08PAL\uFF09\uFF0C\u8FD9\u6837\u4E00\u6765\uFF0C\u4F7F\u7528 PAL \u7684\u56FA\u4EF6\u4EE3\u7801\u5C31\u53EF\u4EE5\u5728\u76EE\u6807\u5E73\u53F0\u4E4B\u5916\u88AB\u6D4B\u8BD5\u4E86\u3002</p></blockquote><h3 id="the-operating-system-is-a-detail-\u64CD\u4F5C\u7CFB\u7EDF\u662F\u5B9E\u73B0\u7EC6\u8282" tabindex="-1"><a class="header-anchor" href="#the-operating-system-is-a-detail-\u64CD\u4F5C\u7CFB\u7EDF\u662F\u5B9E\u73B0\u7EC6\u8282" aria-hidden="true">#</a> The Operating System Is a Detail \u64CD\u4F5C\u7CFB\u7EDF\u662F\u5B9E\u73B0\u7EC6\u8282</h3><p>A HAL is necessary, but is it sufficient? In bare-metal embedded systems, a HAL may be all you need to keep your code from getting too addicted to the operating environment. But what about embedded systems that use a real-time operating system (RTOS) or some embedded version of Linux or Windows?</p><blockquote><p>HAL \u7684\u5FC5\u8981\u6027\u662F\u4E0D\u8A00\u800C\u55BB\u7684\uFF0C\u4F46\u5149\u6709 HAL \u5C31\u591F\u4E86\u5417\uFF1F\u5728\u88F8\u673A\u7684\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u4E2D\uFF0CHAL \u7684\u786E\u53EF\u80FD\u53EF\u4EE5\u4FDD\u8BC1\u6211\u4EEC\u7684\u4EE3\u7801\u4E0D\u4F1A\u548C\u8FD0\u884C\u73AF\u5883\u7ED1\u5B9A\u5F97\u592A\u7D27\u5BC6\u3002\u4F46\u5982\u679C\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u4F7F\u7528\u4E86\u67D0\u79CD\u5B9E\u65F6\u64CD\u4F5C\u7CFB\u7EDF\uFF08RTOS\uFF09\uFF0C\u6216\u8005\u67D0\u79CD\u5D4C\u5165\u5F0F\u7684 Linux \u6216 Windows \u5462\uFF1F</p></blockquote><p>To give your embedded code a good chance at a long life, you have to treat the operating system as a detail and protect against OS dependencies.</p><blockquote><p>\u4E3A\u4E86\u5EF6\u957F\u4EE3\u7801\u7684\u751F\u547D\u5468\u671F\uFF0C\u6211\u4EEC\u5FC5\u987B\u5C06\u64CD\u4F5C\u7CFB\u7EDF\u4E5F\u5B9A\u4E49\u4E3A\u5B9E\u73B0\u7EC6\u8282\uFF0C\u8BA9\u4EE3\u7801\u907F\u514D\u4E0E\u64CD\u4F5C\u7CFB\u7EDF\u5C42\u4EA7\u751F\u4F9D\u8D56\u3002</p></blockquote><p>The software accesses the services of the operating environment through the OS. The OS is a layer separating the software from firmware (Figure 29.5). Using an OS directly can cause problems. For example, what if your RTOS supplier is bought by another company and the royalties go up, or the quality goes down? What if your needs change and your RTOS does not have the capabilities that you now require? You\u2019ll have to change lots of code. These won\u2019t just be simple syntactical changes due to the new OS\u2019s API, but will likely have to adapt semantically to the new OS\u2019s different capabilities and primitives.</p><blockquote><p>\u8F6F\u4EF6\u901A\u8FC7\u64CD\u4F5C\u7CFB\u7EDF\u6765\u8BBF\u95EE\u8FD0\u884C\u73AF\u5883\u670D\u52A1\u3002\u64CD\u4F5C\u7CFB\u7EDF\u662F\u5C06\u8F6F\u4EF6\u4E0E\u56FA\u4EF6\u9694\u79BB\u7684\u90A3\u4E00\u5C42\uFF08\u89C1\u56FE 29.5\uFF09\uFF0C\u76F4\u63A5\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF\u670D\u52A1\u53EF\u80FD\u4F1A\u5E26\u6765\u95EE\u9898\u3002\u4F8B\u5982\uFF0C\u5982\u679C\u66F4\u6362\u4E86 RTOS \u64CD\u4F5C\u7CFB\u7EDF\u5382\u5546\uFF0C\u6388\u6743\u8D39\u7528\u63D0\u9AD8\uFF0C\u6216\u8005\u8D28\u91CF\u4E0B\u964D\u600E\u4E48\u529E\uFF1F\u5982\u679C\u9700\u6C42\u53D1\u751F\u53D8\u5316\uFF0CRTOS \u65E0\u6CD5\u6EE1\u8DB3\u600E\u4E48\u529E\uFF1F\u5F88\u591A\u4EE3\u7801\u90FD\u9700\u8981\u53D8\u52A8\uFF0C\u4E0D\u4EC5\u8981\u66F4\u6539\u8BED\u6CD5\u9002\u5E94\u65B0\u64CD\u4F5C\u7CFB\u7EDF API\uFF0C\u5F88\u6709\u53EF\u80FD\u9700\u8981\u91CD\u65B0\u9002\u5E94\u65B0\u64CD\u4F5C\u7CFB\u7EDF\u7684\u8BED\u4E49\u4E0E\u539F\u8BED\u3002</p></blockquote>`,45),se=n("Adding in an operating system"),te=e("p",null,"A clean embedded architecture isolates software from the operating system, through an operating system abstraction layer (OSAL) (Figure 29.6). In some cases, implementing this layer might be as simple as changing the name of a function. In other cases, it might involve wrapping several functions together.",-1),oe=e("blockquote",null,[e("p",null,"\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u4F1A\u5F15\u5165\u64CD\u4F5C\u7CFB\u7EDF\u62BD\u8C61\u5C42\uFF08OSAL\uFF0C\u5982\u56FE 29.6 \u6240\u793A\uFF09\uFF0C\u5C06\u8F6F\u4EF6\u4E0E\u64CD\u4F5C\u7CFB\u7EDF\u5206\u5272\u5F00\u3002\u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u5B9E\u73B0\u8FD9\u4E2A\u62BD\u8C61\u5C42\u5C31\u50CF\u7ED9\u51FD\u6570\u6539\u4E2A\u540D\u5B57\u90A3\u4E48\u7B80\u5355\u3002\u800C\u5728\u53E6\u4E00\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u5219\u9700\u8981\u5C06\u51E0\u4E2A\u51FD\u6570\u5C01\u88C5\u5728\u4E00\u8D77\u3002")],-1),ie=n("The operating system abstraction layer"),pe=i('<p>If you have ever moved your software from one RTOS to another, you know it is painful. If your software depended on an OSAL instead of the OS directly, you would largely be writing a new OSAL that is compatible with the old OSAL. Which would you rather do: modify a bunch of complex existing code, or write new code to a defined interface and behavior? This is not a trick question. I choose the latter.</p><blockquote><p>\u5982\u679C\u4F60\u6709\u8FC1\u79FB\u8FC7 RTOS \u7CFB\u7EDF\u7684\u7ECF\u5386\uFF0C\u5C31\u4E00\u5B9A\u77E5\u9053\u90A3\u6709\u591A\u75DB\u82E6\u3002\u5982\u679C\u6211\u4EEC\u80FD\u8BA9\u81EA\u5DF1\u7684\u8F6F\u4EF6\u4F9D\u8D56\u4E8E OSAL\uFF0C\u800C\u4E0D\u662F\u76F4\u63A5\u4F9D\u8D56\u4E8E\u64CD\u4F5C\u7CFB\u7EDF\uFF0C\u6211\u4EEC\u5C31\u53EA\u9700\u8981\u5199\u4E00\u4E2A\u517C\u5BB9\u4EE5\u524D\u7684 OSAL \u5B9E\u73B0\u7684\u65B0\u7248\u672C\u5373\u53EF\u3002\u4F60\u89C9\u5F97\u54EA\u4E00\u79CD\u65B9\u5F0F\u66F4\u597D\uFF1F\u662F\u4FEE\u6539\u4E00\u5806\u590D\u6742\u7684\u73B0\u6709\u4EE3\u7801\uFF0C\u8FD8\u662F\u6309\u7167\u63A5\u53E3\u548C\u884C\u4E3A\u5B9A\u4E49\u6765\u5199\u4E00\u5957\u65B0\u4EE3\u7801\uFF1F\u8FD9\u91CC\u663E\u800C\u6613\u89C1\uFF0C\u540E\u8005\u66F4\u597D\u3002</p></blockquote><p>You might start worrying about code bloat about now. Really, though, the layer becomes the place where much of the duplication around using an OS is isolated. This duplication does not have to impose a big overhead. If you define an OSAL, you can also encourage your applications to have a common structure. You might provide message passing mechanisms, rather than having every thread handcraft its concurrency model.</p><blockquote><p>\u5F53\u7136\uFF0C\u6211\u4EEC\u53EF\u80FD\u4F1A\u62C5\u5FC3\u4EE3\u7801\u81A8\u80C0\u7684\u95EE\u9898\u3002\u4F46\u662F\uFF0C\u5176\u5B9E\u4E0A\u9762\u8FD9\u79CD\u5206\u5C42\u5DF2\u7ECF\u5C06\u56E0\u4E3A\u4F7F\u7528\u64CD\u4F5C\u7CFB\u7EDF\u6240\u5E26\u6765\u7684\u91CD\u590D\u6027\u4EE3\u7801\u9694\u79BB\u5F00\u4E86\uFF0C\u56E0\u6B64\u8FD9\u79CD\u91CD\u590D\u4E0D\u4E00\u5B9A\u4F1A\u5E26\u6765\u5F88\u5927\u7684\u989D\u5916\u8D1F\u62C5\u3002\u800C\u4E14\uFF0C\u5982\u679C\u6211\u4EEC\u5B9A\u4E49\u4E86 OSAL\uFF0C\u8FD8\u53EF\u4EE5\u8BA9\u81EA\u5DF1\u7684\u5E94\u7528\u5171\u4EAB\u4E00\u79CD\u516C\u7528\u7ED3\u6784\u3002\u6BD4\u5982\u91C7\u7528\u4E00\u5957\u6807\u51C6\u7684\u6D88\u606F\u4F20\u9012\u673A\u5236\uFF0C\u8FD9\u6837\u6BCF\u4E2A\u7EBF\u7A0B\u5C31\u4E0D\u7528\u81EA\u5DF1\u5B9A\u4E49\u4E00\u4E2A\u5E76\u884C\u6A21\u578B\u4E86\u3002</p></blockquote><p>The OSAL can help provide test points so that the valuable application code in the software layer can be tested off-target and off-OS. A clean embedded architecture\u2019s software is testable off the target operating system. A successful OSAL provides that seam or set of substitution points that facilitate off-target testing.</p><blockquote><p>\u53E6\u5916\uFF0COSAL \u8FD8\u53EF\u4EE5\u5E2E\u52A9\u9AD8\u4EF7\u503C\u7684\u5E94\u7528\u7A0B\u5E8F\u5B9E\u73B0\u5728\u76EE\u6807\u5E73\u53F0\u3001\u76EE\u6807\u64CD\u4F5C\u7CFB\u7EDF\u4E4B\u5916\u8FDB\u884C\u6D4B\u8BD5\u3002\u4E00\u4E2A\u7531\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u6240\u6784\u5EFA\u51FA\u6765\u7684\u8F6F\u4EF6\u662F\u53EF\u4EE5\u5728\u76EE\u6807\u64CD\u4F5C\u7CFB\u7EDF\u4E4B\u5916\u88AB\u6D4B\u8BD5\u7684\u3002\u8BBE\u8BA1\u826F\u597D\u7684 OSAL \u4F1A\u4E3A\u8FD9\u79CD\u76EE\u6807\u73AF\u5883\u5916\u7684\u6D4B\u8BD5\u63D0\u4F9B\u652F\u6491\u70B9\u3002</p></blockquote><h3 id="programming-to-interfaces-and-substitutability-\u9762\u5411\u63A5\u53E3\u7F16\u7A0B\u4E0E\u53EF\u66FF\u4EE3\u6027" tabindex="-1"><a class="header-anchor" href="#programming-to-interfaces-and-substitutability-\u9762\u5411\u63A5\u53E3\u7F16\u7A0B\u4E0E\u53EF\u66FF\u4EE3\u6027" aria-hidden="true">#</a> PROGRAMMING TO INTERFACES AND SUBSTITUTABILITY \u9762\u5411\u63A5\u53E3\u7F16\u7A0B\u4E0E\u53EF\u66FF\u4EE3\u6027</h3><p>In addition to adding a HAL and potentially an OSAL inside each of the major layers (software, OS, firmware, and hardware), you can\u2014and should\u2014apply the principles described throughout this book. These principles encourage separation of concerns, programming to interfaces, and substitutability.</p><blockquote><p>\u9664\u4E86\u5728\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u4E3B\u8981\u5206\u5C42\uFF08\u6307\u8F6F\u4EF6\u3001\u64CD\u4F5C\u7CFB\u7EDF\u3001\u56FA\u4EF6\u3001\u786C\u4EF6\u8FD9\u56DB\u5C42\uFF09\u4E4B\u4E2D\u589E\u52A0 HAL \u548C OSAL \u4E4B\u5916\uFF0C\u6211\u4EEC\u8FD8\u53EF\u4EE5\u2014\u2014\u4E5F\u5E94\u8BE5\u2014\u2014\u5E94\u7528\u672C\u4E66\u4E2D\u63D0\u5230\u7684\u5176\u4ED6\u8BBE\u8BA1\u539F\u5219\u3002\u8FD9\u4E9B\u8BBE\u8BA1\u539F\u5219\u53EF\u4EE5\u5E2E\u52A9\u6211\u4EEC\u6309\u529F\u80FD\u6A21\u5757\u3001\u63A5\u53E3\u7F16\u7A0B\u4EE5\u53CA\u53EF\u66FF\u4EE3\u6027\u6765\u5212\u5206\u7CFB\u7EDF\u3002</p></blockquote><p>The idea of a layered architecture is built on the idea of programming to interfaces. When one module interacts with another though an interface, you can substitute one service provider for another. Many readers will have written their own small version of printf for deployment in the target. As long as the interface to your printf is the same as the standard version of printf, you can override the service one for the other.</p><blockquote><p>\u5206\u5C42\u67B6\u6784\u7684\u7406\u5FF5\u662F\u57FA\u4E8E\u63A5\u53E3\u7F16\u7A0B\u7684\u7406\u5FF5\u6765\u8BBE\u8BA1\u7684\u3002\u5F53\u6A21\u5757\u4E4B\u95F4\u80FD\u4EE5\u63A5\u53E3\u5F62\u5F0F\u4EA4\u4E92\u65F6\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u5C06\u4E00\u4E2A\u670D\u52A1\u66FF\u6362\u6210\u53E6\u5916\u4E00\u4E2A\u670D\u52A1\u3002\u4F8B\u5982\uFF0C\u5F88\u591A\u8BFB\u8005\u5E94\u8BE5\u90FD\u5199\u8FC7\u80FD\u5728\u67D0\u4E2A\u76EE\u6807\u673A\u5668\u4E0A\u8FD0\u884C\u7684\u3001\u5C0F\u578B\u7684\u81EA\u5B9A\u4E49\u7684 printf \u51FD\u6570\u3002\u53EA\u8981\u6211\u4EEC\u7684 printf \u4E0E\u6807\u51C6\u7684 printf \u51FD\u6570\u63A5\u53E3\u4E00\u81F4\uFF0C\u5B83\u4EEC\u5C31\u53EF\u4EE5\u4E92\u76F8\u66FF\u6362\u3002</p></blockquote><p>One basic rule of thumb is to use header files as interface definitions. When you do so, however, you have to be careful about what goes in the header file. Limit header file contents to function declarations as well as the constants and struct names that are needed by the function.</p><blockquote><p>\u76EE\u524D\u7684\u666E\u9002\u89C4\u5219\u4E4B\u4E00\u5C31\u662F\u7528\u5934\u4E08\u4EF6\u6765\u5145\u5F53\u63A5\u53E3\u7684\u5B9A\u4E49\u3002\u7136\u800C\uFF0C\u5982\u679C\u771F\u7684\u8981\u8FD9\u6837\u505A\u7684\u8BDD\uFF0C\u5C31\u9700\u8981\u5C0F\u5FC3\u63A7\u5236\u5934\u6587\u4EF6\u4E2D\u7684\u5185\u5BB9\uFF0C\u5C3D\u91CF\u786E\u4FDD\u5934\u6587\u4EF6\u4E2D\u53EA\u5305\u62EC\u51FD\u6570\u58F0\u660E\uFF0C\u4EE5\u53CA\u51FD\u6570\u6240\u9700\u8981\u7684\u7ED3\u6784\u4F53\u540D\u5B57\u548C\u5E38\u91CF\u3002</p></blockquote><p>Don\u2019t clutter the interface header files with data structures, constants, and typedefs that are needed by only the implementation. It\u2019s not just a matter of clutter: That clutter will lead to unwanted dependencies. Limit the visibility of the implementation details. Expect the implementation details to change. The fewer places where code knows the details, the fewer places where code will have to be tracked down and modified.</p><blockquote><p>\u53E6\u5916\uFF0C\u4E0D\u8981\u5728\u5B9A\u4E49\u63A5\u53E3\u7684\u5934\u6587\u4EF6\u4E2D\u5305\u542B\u53EA\u6709\u5177\u4F53\u5B9E\u73B0\u4EE3\u7801\u624D\u9700\u8981\u7684\u6570\u636E\u7ED3\u6784\u3001\u5E38\u91CF\u4EE5\u53CA\u7C7B\u578B\u5B9A\u4E49\uFF08typedef\uFF09\u3002\u8FD9\u4E0D\u4EC5\u4EC5\u662F\u67B6\u6784\u662F\u5426\u6574\u6D01\u7684\u95EE\u9898\uFF0C\u800C\u662F\u8FD9\u6837\u505A\u53EF\u80FD\u4F1A\u5BFC\u81F4\u610F\u5916\u7684\u4F9D\u8D56\u5173\u7CFB\u3002\u603B\u4E4B\uFF0C\u6211\u4EEC\u5FC5\u987B\u63A7\u5236\u597D\u5B9E\u73B0\u7EC6\u8282\u7684\u53EF\u89C1\u6027\uFF0C\u56E0\u4E3A\u8FD9\u4E9B\u5B9E\u73B0\u7EC6\u8282\u662F\u80AF\u5B9A\u4F1A\u53D8\u5316\u7684\u3002\u5173\u6CE8\u5B9E\u73B0\u7EC6\u8282\u7684\u4EE3\u7801\u8D8A\u5C11\uFF0C\u5B83\u4EEC\u6240\u9700\u7684\u53D8\u66F4\u5C31\u8D8A\u5C11\u3002</p></blockquote><p>A clean embedded architecture is testable within the layers because modules interact through interfaces. Each interface provides that seam or substitution point that facilitates off-target testing.</p><blockquote><p>\u7531\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u6240\u6784\u5EFA\u7684\u7CFB\u7EDF\u5E94\u8BE5\u5728\u6BCF\u4E00\u4E2A\u5206\u5C42\u4E2D\u90FD\u662F\u53EF\u6D4B\u8BD5\u7684\uFF0C\u56E0\u4E3A\u5B83\u7684\u6A21\u5757\u4E4B\u95F4\u91C7\u7528\u63A5\u53E3\u901A\u4FE1\uFF0C\u6BCF\u4E00\u4E2A\u63A5\u53E3\u90FD\u4E3A\u5E73\u53F0\u4E4B\u5916\u7684\u6D4B\u8BD5\u63D0\u4F9B\u4E86\u66FF\u6362\u70B9\u3002</p></blockquote><h3 id="dry-conditional-compilation-directives-dry-\u6761\u4EF6\u6027\u7F16\u8BD1\u547D\u4EE4" tabindex="-1"><a class="header-anchor" href="#dry-conditional-compilation-directives-dry-\u6761\u4EF6\u6027\u7F16\u8BD1\u547D\u4EE4" aria-hidden="true">#</a> DRY CONDITIONAL COMPILATION DIRECTIVES DRY \u6761\u4EF6\u6027\u7F16\u8BD1\u547D\u4EE4</h3><p>One use of substitutability that is often overlooked relates to how embedded C and C++ programs handle different targets or operating systems. There is a tendency to use conditional compilation to turn on and off segments of code. I recall one especially problematic case where the statement #ifdef BOARD_V2 was mentioned several thousand times in a telecom application.</p><blockquote><p>\u53E6\u4E00\u4E2A\u7ECF\u5E38\u88AB\u5FFD\u89C6\u7684\u53EF\u66FF\u4EE3\u6362\u6027\u89C4\u5219\u7684\u5B9E\u9645\u6848\u4F8B\u662F\u5D4C\u5165\u5F0F C/C++ \u7A0B\u5E8F\u5BF9\u4E0D\u540C\u5E73\u53F0\u548C\u64CD\u4F5C\u7CFB\u7EDF\u7684\u5904\u7406\u65B9\u5F0F\u3002\u8FD9\u4E9B\u7A0B\u5E8F\u7ECF\u5E38\u4F1A\u7528\u6761\u4EF6\u6027\u7F16\u8BD1\u547D\u4EE4\u6765\u6839\u636E\u4E0D\u540C\u7684\u5E73\u53F0\u542F\u7528\u548C\u7981\u7528\u67D0\u4E00\u6BB5\u4EE3\u7801\u3002\u4F8B\u5982\uFF0C\u6211\u66FE\u7ECF\u9047\u5230\u8FC7 <code>#ifdef BOARD_V2</code> \u8FD9\u6761\u8BED\u53E5\u5728\u4E00\u4E2A\u7535\u4FE1\u5E94\u7528\u7A0B\u5E8F\u4E2D\u51FA\u73B0\u4E86\u51E0\u5343\u6B21\u7684\u60C5\u51B5\u3002</p></blockquote><p>This repetition of code violates the Don\u2019t Repeat Yourself (DRY) principle.5 If I see #ifdef BOARD_V2 once, it\u2019s not really a problem. Six thousand times is an extreme problem. Conditional compilation identifying the target-hardware\u2019s type is often repeated in embedded systems. But what else can we do?</p><blockquote><p>\u5F88\u663E\u7136\uFF0C\u8FD9\u79CD\u4EE3\u7801\u7684\u91CD\u590D\u8FDD\u80CC\u4E86\u201C\u4E0D\u8981\u91CD\u590D\u81EA\u5DF1\uFF08DRY\uFF09\u201D\u539F\u5219\u3002\u5982\u679C <code>#ifdef BOARD_V2</code> \u53EA\u51FA\u73B0\u4E00\u6B21\uFF0C\u8FD9\u5F53\u7136\u4E0D\u662F\u4EC0\u4E48\u95EE\u9898\uFF0C\u800C\u5982\u679C\u51FA\u73B0\u4E86 6000 \u6B21\uFF0C\u90A3\u5C31\u975E\u5E38\u4E25\u91CD\u4E86\u3002\u4F46\u8FD9\u7C7B\u6761\u4EF6\u6027\u7F16\u8BD1\u8BED\u53E5\u5728\u5D4C\u5165\u5F0F\u7F16\u7A0B\u4E2D\u975E\u5E38\u5E38\u89C1\uFF0C\u6709\u4EC0\u4E48\u597D\u7684\u89E3\u51B3\u65B9\u6848\u5417\uFF1F</p></blockquote><p>What if there is a hardware abstraction layer? The hardware type would become a detail hidden under the HAL. If the HAL provides a set of interfaces, instead of using conditional compilation, we could use the linker or some form of runtime binding to connect the software to the hardware.</p><blockquote><p>\u4F7F\u7528\u786C\u4EF6\u62BD\u8C61\u5C42\u5982\u4F55\uFF1F\u8FD9\u6837\u7684\u8BDD\uFF0C\u786C\u4EF6\u7C7B\u578B\u5C31\u53EA\u662F HAL \u4E2D\u7684\u4E00\u4E2A\u5B9E\u73B0\u7EC6\u8282\u4E86\u3002\u800C\u4E14\uFF0C\u5982\u679C\u7CFB\u7EDF\u4E2D\u4F7F\u7528\u7684\u662F HAL \u6240\u63D0\u4F9B\u7684\u4E00\u7CFB\u5217\u63A5\u53E3\uFF0C\u800C\u4E0D\u662F\u6761\u4EF6\u6027\u7F16\u8BD1\u8BED\u53E5\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u53EF\u4EE5\u7528\u94FE\u63A5\u5668\uFF0C\u6216\u8005\u67D0\u79CD\u8FD0\u884C\u65F6\u52A0\u8F7D\u5668\u6765\u5C06\u8F6F\u4EF6\u4E0E\u786C\u4EF6\u76F8\u7ED3\u5408\u4E86\u3002</p></blockquote><h2 id="conclusion-\u672C\u7AE0\u5C0F\u7ED3" tabindex="-1"><a class="header-anchor" href="#conclusion-\u672C\u7AE0\u5C0F\u7ED3" aria-hidden="true">#</a> CONCLUSION \u672C\u7AE0\u5C0F\u7ED3</h2><p>People who are developing embedded software have a lot to learn from experiences outside of embedded software. If you are an embedded developer who has picked up this book, you will find a wealth of software development wisdom in the words and ideas.</p><blockquote><p>\u5D4C\u5165\u5F0F\u7F16\u7A0B\u4EBA\u5458\u5E94\u8BE5\u591A\u5B66\u4E60\u4E00\u4E9B\u975E\u5D4C\u5165\u5F0F\u7CFB\u7EDF\u7684\u7F16\u7A0B\u7ECF\u9A8C\u3002\u5982\u679C\u4F60\u4ECE\u4E8B\u7684\u662F\u5D4C\u5165\u5F0F\u7F16\u7A0B\u5DE5\u4F5C\uFF0C\u76F8\u4FE1\u4F60\u4E00\u5B9A\u4F1A\u4ECE\u672C\u7AE0\u7684\u5EFA\u8BAE\u4E2D\u5F97\u5230\u5F88\u591A\u542F\u53D1\u3002</p></blockquote><p>Letting all code become firmware is not good for your product\u2019s long-term health. Being able to test only in the target hardware is not good for your product\u2019s long-term health. A clean embedded architecture is good for your product\u2019s long-term health.</p><blockquote><p>\u4E3A\u4E86\u8BA9\u6211\u4EEC\u7684\u4EA7\u54C1\u80FD\u957F\u671F\u5730\u4FDD\u6301\u5065\u5EB7\uFF0C\u8BF7\u522B\u8BA9\u4F60\u7684\u4EE3\u7801\u90FD\u53D8\u6210\u56FA\u4EF6\u3002\u5982\u679C\u4E00\u4E2A\u7CFB\u7EDF\u7684\u4EE3\u7801\u53EA\u80FD\u5728\u76EE\u6807\u786C\u4EF6\u4E0A\u6D4B\u8BD5\uFF0C\u90A3\u4E48\u5B83\u7684\u5F00\u53D1\u8FC7\u7A0B\u4F1A\u53D8\u5F97\u975E\u5E38\u8270\u96BE\u3002\u603B\u4E4B\uFF0C\u4E3A\u4EA7\u54C1\u7684\u957F\u671F\u5065\u5EB7\u7740\u60F3\u800C\u91C7\u7528\u4E00\u5957\u6574\u6D01\u7684\u5D4C\u5165\u5F0F\u67B6\u6784\u662F\u5F88\u6709\u5FC5\u8981\u7684\u3002</p></blockquote>',29);function ce(le,re){const s=p("ExternalLinkIcon"),t=p("Figures");return l(),r("div",null,[d,e("ul",null,[e("li",null,[h,e("a",k,[m,a(s)]),w]),e("li",null,[b,e("a",f,[v,a(s)]),y]),e("li",null,[g,e("a",_,[q,a(s)]),A]),e("li",null,[T,e("a",I,[S,a(s)]),L])]),E,e("blockquote",null,[e("ul",null,[e("li",null,[O,e("a",D,[C,a(s)])]),e("li",null,[x,e("a",R,[M,a(s)])]),e("li",null,[F,e("a",H,[P,a(s)])]),e("li",null,[B,e("a",U,[N,a(s)])])])]),Y,a(t,{figure:"29-1"},{default:o(()=>[j]),_:1}),W,G,a(t,{figure:"29-2"},{default:o(()=>[V]),_:1}),z,K,Z,X,Q,a(t,{figure:"29-3"},{default:o(()=>[J]),_:1}),$,ee,a(t,{figure:"29-4"},{default:o(()=>[ne]),_:1}),ae,a(t,{figure:"29-5"},{default:o(()=>[se]),_:1}),te,oe,a(t,{figure:"29-6"},{default:o(()=>[ie]),_:1}),pe])}const he=c(u,[["render",ce],["__file","ch29.html.vue"]]);export{he as default};
