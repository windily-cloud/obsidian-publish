import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c,a,w as i,e as r,b as e,d as t,r as l}from"./app.887b133c.js";const h={},d=r('<h1 id="chap34-the-missing-chapter-\u62FE\u9057" tabindex="-1"><a class="header-anchor" href="#chap34-the-missing-chapter-\u62FE\u9057" aria-hidden="true">#</a> Chap34. THE MISSING CHAPTER \u62FE\u9057</h1><p>By Simon Brown</p><p>All of the advice you\u2019ve read so far will certainly help you design better software, composed of classes and components with well-defined boundaries, clear responsibilities, and controlled dependencies. But it turns out that the devil is in the implementation details, and it\u2019s really easy to fall at the last hurdle if you don\u2019t give that some thought, too.</p><blockquote><p>\u6839\u636E\u672C\u4E66\u4E4B\u524D\u7ED9\u51FA\u7684\u6240\u6709\u5EFA\u8BAE\uFF0C\u76F8\u4FE1\u8BFB\u8005\u4E00\u5B9A\u80FD\u591F\u5EFA\u6784\u51FA\u5177\u6709\u826F\u597D\u8FB9\u754C\u8BBE\u8BA1\u7684\u7C7B\u548C\u7EC4\u4EF6\uFF0C\u4EE5\u5F62\u6210\u6E05\u6670\u7684\u8D23\u4EFB\u5212\u5206\u4EE5\u53CA\u53EF\u63A7\u7684\u4F9D\u8D56\u5173\u7CFB\uFF0C\u8BBE\u8BA1\u51FA\u66F4\u597D\u7684\u8F6F\u4EF6\u4E86\u3002\u4F46\u662F\u56F0\u96BE\u4E4B\u5904\u5F80\u5F80\u5728\u4E8E\u7EC6\u8282\u4E4B\u4E2D\uFF0C\u4E00\u65E6\u758F\u5FFD\uFF0C\u4E5F\u6709\u53EF\u80FD\u4F1A\u5BF9\u8F6F\u4EF6\u8D28\u91CF\u9020\u6210\u4E0D\u826F\u5F71\u54CD\u3002</p></blockquote><p>Let\u2019s imagine that we\u2019re building an online book store, and one of the use cases we\u2019ve been asked to implement is about customers being able to view the status of their orders. Although this is a Java example, the principles apply equally to other programming languages. Let\u2019s put the Clean Architecture to one side for a moment and look at a number of approaches to design and code organization.</p><blockquote><p>\u4E0B\u9762\u6211\u4EEC\u518D\u6765\u770B\u4E00\u4E2A\u4F8B\u5B50\uFF0C\u5047\u8BBE\u6B63\u5728\u6784\u5EFA\u4E00\u4E2A\u5728\u7EBF\u4E66\u5E97\uFF0C\u8FD9\u4E2A\u4F8B\u5B50\u7684\u4EFB\u52A1\u662F\u5B9E\u73B0\u4E00\u4E2A\u5BA2\u6237\u67FB\u770B\u8BA2\u5355\u72B6\u6001\u7684\u7528\u4F8B\uFF0C\u867D\u7136\u8FD9\u662F\u4E00\u4E2A Java \u7A0B\u5E8F\u7684\u793A\u4F8B\uFF0C\u4F46\u5176\u6240\u793A\u8303\u7684\u539F\u7406\u9002\u7528\u4E8E\u4EFB\u4F55\u8BED\u8A00\u3002\u73B0\u5728\uFF0C\u8BA9\u6211\u4EEC\u6682\u65F6\u5C06\u6574\u6D01\u67B6\u6784\u7684\u6982\u5FF5\u653E\u5728\u4E00\u8FB9\uFF0C\u5148\u6765\u770B\u4E00\u4E0B\u5982\u4F55\u5177\u4F53\u5B89\u6392\u4EE3\u7801\u8BBE\u8BA1\u548C\u4EE3\u7801\u7ED3\u6784\u3002</p></blockquote><h2 id="package-by-layer-\u6309\u5C42\u5C01\u88C5" tabindex="-1"><a class="header-anchor" href="#package-by-layer-\u6309\u5C42\u5C01\u88C5" aria-hidden="true">#</a> PACKAGE BY LAYER \u6309\u5C42\u5C01\u88C5</h2><p>The first, and perhaps simplest, design approach is the traditional horizontal layered architecture, where we separate our code based on what it does from a technical perspective. This is often called \u201Cpackage by layer.\u201D Figure 34.1 shows what this might look like as a UML class diagram.</p><blockquote><p>\u6211\u4EEC\u9996\u5148\u60F3\u5230\u7684\uFF0C\u4E5F\u53EF\u80FD\u662F\u6700\u7B80\u5355\u7684\u8BBE\u8BA1\u65B9\u5F0F\uFF0C\u5C31\u662F\u4F20\u7EDF\u7684\u6C34\u5E73\u5206\u5C42\u67B6\u6784\u3002\u5728\u8FD9\u4E2A\u67B6\u6784\u91CC\uFF0C\u6211\u4EEC\u5C06\u4EE3\u7801\u4ECE\u6280\u672F\u89D2\u5EA6\u8FDB\u884C\u5206\u7C7B\u3002\u8FD9\u901A\u5E38\u88AB\u79F0\u4E3A\u201C\u6309\u5C42\u5C01\u88C5\u201D\u3002\u56FE 34.1 \u7528 UML \u7C7B\u56FE\u5C55\u793A\u4E86\u8FD9\u79CD\u8BBE\u8BA1\u3002</p></blockquote><p>In this typical layered architecture, we have one layer for the web code, one layer for our \u201Cbusiness logic,\u201D and one layer for persistence. In other words, code is sliced horizontally into layers, which are used as a way to group similar types of things. In a \u201Cstrict layered architecture,\u201D layers should depend only on the next adjacent lower layer. In Java, layers are typically implemented as packages. As you can see in Figure 34.1, all of the dependencies between layers (packages) point downward. In this example, we have the following Java types:</p><blockquote><p>\u5728\u8FD9\u79CD\u5E38\u89C1\u7684\u5206\u5C42\u67B6\u6784\u4E2D\uFF0CWeb \u4EE3\u7801\u5206\u4E3A\u4E00\u5C42\uFF0C\u4E1A\u52A1\u903B\u8F91\u5206\u4E3A\u4E00\u5C42\uFF0C\u6301\u4E45\u5316\u662F\u53E6\u5916\u4E00\u5C42\u3002\u6362\u53E5\u8BDD\u8BF4\uFF0C\u6211\u4EEC\u5BF9\u4EE3\u7801\u8FDB\u884C\u4E86\u6C34\u5E73\u5206\u5C42\uFF0C\u76F8\u540C\u7C7B\u578B\u7684\u4EE3\u7801\u5728\u4E00\u5C42\u3002\u5728\u201C\u4E25\u683C\u7684\u5206\u5C42\u67B6\u6784\u201D\u4E2D\uFF0C\u6BCF\u4E00\u5C42\u53EA\u80FD\u5BF9\u76F8\u90BB\u7684\u4E0B\u5C42\u6709\u4F9D\u8D56\u5173\u7CFB\u3002\u5728 Java \u4E2D\uFF0C\u5206\u5C42\u7684\u6982\u5FF5\u901A\u5E38\u662F\u7528\u5305\u6765\u8868\u793A\u7684\u3002\u5982\u56FE 34.1 \u6240\u793A\uFF0C\u6240\u6709\u7684\u5206\u5C42\uFF08\u5305\uFF09\u4E4B\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\u90FD\u662F\u6307\u5411\u4E0B\u7684\u3002\u8FD9\u91CC\u5305\u62EC\u4E86\u4EE5\u4E0B Java \u7C7B\u3002</p></blockquote><ul><li>OrdersController: A web controller, something like a Spring MVC controller, that handles requests from the web.</li><li>OrdersService: An interface that defines the \u201Cbusiness logic\u201D related to orders.</li><li>OrdersServiceImpl: The implementation of the orders service.1</li><li>OrdersRepository: An interface that defines how we get access to persistent order information.</li><li>JdbcOrdersRepository: An implementation of the repository interface.</li></ul><hr><blockquote><ul><li>OrdersController\uFF1AWeb \u63A7\u5236\u5668\uFF0C\u7C7B\u4F3C Spring MVC \u63A7\u5236\u5668\uFF0C\u8D1F\u8D23\u5904\u7406 Web \u8BF7\u6C42\u3002</li><li>OrderService\uFF1A\u5B9A\u4E49\u8BA2\u5355\u76F8\u5173\u4E1A\u52A1\u903B\u8F91\u7684\u63A5\u53E3\u3002</li><li>OrderServicelmpl\uFF1AOrder \u670D\u52A1\u7684\u5177\u4F53\u5B9E\u73B0</li><li>OrdersRepository\uFF1A\u5B9A\u4E49\u5982\u4F55\u8BBF\u95EE\u8BA2\u5355\u6301\u4E45\u4FE1\u606F\u7684\u63A5\u53E3\u3002</li><li>JdbcOrderRepository\uFF1A\u6301\u4E45\u4FE1\u606F\u8BBF\u95EE\u63A5\u53E3\u7684\u5B9E\u73B0\u3002</li></ul></blockquote>',14),p=t("Package by layer"),u=r('<p>In \u201CPresentation Domain Data Layering,\u201D2 Martin Fowler says that adopting such a layered architecture is a good way to get started. He\u2019s not alone. Many of the books, tutorials, training courses, and sample code you\u2019ll find will also point you down the path of creating a layered architecture. It\u2019s a very quick way to get something up and running without a huge amount of complexity. The problem, as Martin points out, is that once your software grows in scale and complexity, you will quickly find that having three large buckets of code isn\u2019t sufficient, and you will need to think about modularizing further.</p><blockquote><p>\u5728 presentation Domain Data Layering \u8FD9\u7BC7\u6587\u7AE0\u4E2D\uFF0CMartin Fowler \u58F0\u79F0\u91C6\u7528\u8FD9\u79CD\u5206\u5C42\u67B6\u6784\u662F\u521D\u671F\u4E00\u4E2A\u4E0D\u9519\u9009\u62E9\u3002\u4ED6\u7684\u89C2\u70B9\u5E76\u4E0D\u7F3A\u4E4F\u62E5\u6234\u8005\u3002\u5F88\u591A\u4E66\u7C4D\u3001\u6559\u7A0B\u548C\u4EE3\u7801\u793A\u8303\u90FD\u5728\u6559\u80B2\u4F60\u91C7\u7528\u5206\u5C42\u67B6\u6784\u3002\u8FD9\u79CD\u65B9\u5F0F\u5728\u5728\u9879\u76EE\u521D\u671F\u4E4B\u6240\u4EE5\u4F1A\u5F88\u5408\u9002\uFF0C\u662F\u56E0\u4E3A\u5B83\u4E0D\u4F1A\u8FC7\u4E8E\u590D\u6742\u3002\u4F46\u5C31\u50CF Martin \u6307\u51FA\u7684\u90A3\u6837\uFF0C\u4E00\u65E6\u8F6F\u4EF6\u89C4\u6A21\u6269\u5C55\u4E86\uFF0C\u6211\u4EEC\u5F88\u5FEB\u5C31\u4F1A\u53D1\u73B0\u5C06\u4EE3\u7801\u5206\u4E3A\u4E09\u5927\u5757\u5E76\u4E0D\u591F\uFF0C\u9700\u8981\u8FDB\u4E00\u6B65\u8FDB\u884C\u6A21\u5757\u5316\u3002</p></blockquote><p>Another problem is that, as Uncle Bob has already said, a layered architecture doesn\u2019t scream anything about the business domain. Put the code for two layered architectures, from two very different business domains, side by side and they will likely look eerily similar: web, services, and repositories. There\u2019s also another huge problem with layered architectures, but we\u2019ll get to that later.</p><blockquote><p>\u5982 Bob \u6240\u8BF4\uFF0C\u8FD9\u91CC\u8FD8\u5B58\u5728\u53E6\u5916\u4E00\u4E2A\u95EE\u9898\u662F\uFF0C\u5206\u5C42\u67B6\u6784\u65E0\u6CD5\u5C55\u73B0\u5177\u4F53\u7684\u4E1A\u52A1\u9886\u57DF\u4FE1\u606F\u3002\u628A\u4E24\u4E2A\u4E0D\u540C\u4E1A\u52A1\u9886\u57DF\u7684\u3001\u4F46\u662F\u90FD\u91C7\u7528\u4E86\u5206\u5C42\u67B6\u6784\u7684\u4EE3\u7801\u8FDB\u884C\u5BF9\u6BD4\uFF0C\u4F60\u4F1A\u53D1\u73B0\u5B83\u4EEC\u7684\u76F8\u4F3C\u7A0B\u5EA6\u6781\u9AD8\uFF1A\u90FD\u6709 Web \u5C42\u3001\u670D\u52A1\u5C42\u548C\u6570\u636E\u4ED3\u5E93\u5C42\u3002\u8FD9\u662F\u5206\u5C42\u67B6\u6784\u7684\u53E6\u5916\u4E00\u4E2A\u95EE\u9898\uFF0C\u540E\u6587\u4F1A\u5177\u4F53\u8BB2\u8FF0\u3002</p></blockquote><h2 id="package-by-feature-\u6309\u529F\u80FD\u5C01\u88C5" tabindex="-1"><a class="header-anchor" href="#package-by-feature-\u6309\u529F\u80FD\u5C01\u88C5" aria-hidden="true">#</a> PACKAGE BY FEATURE \u6309\u529F\u80FD\u5C01\u88C5</h2><p>Another option for organizing your code is to adopt a \u201Cpackage by feature\u201D style. This is a vertical slicing, based on related features, domain concepts, or aggregate roots (to use domain-driven design terminology). In the typical implementations that I\u2019ve seen, all of the types are placed into a single Java package, which is named to reflect the concept that is being grouped.</p><blockquote><p>\u53E6\u5916\u4E00\u79CD\u7EC4\u7EC7\u4EE3\u7801\u7684\u5F62\u5F0F\u662F\u201C\u6309\u529F\u80FD\u5C01\u88C5\u201D\uFF0C\u5373\u5782\u76F4\u5207\u5206\uFF0C\u6839\u636E\u76F8\u5173\u7684\u529F\u80FD\u3001\u4E1A\u52A1\u6982\u5FF5\u6216\u8005\u805A\u5408\u6839\uFF08\u9886\u57DF\u9A71\u52A8\u8BBE\u8BA1\u539F\u5219\u4E2D\u7684\u672F\u8BED\uFF09\u6765\u5207\u5206\u3002\u5728\u5E38\u89C1\u7684\u5B9E\u73B0\u4E2D\uFF0C\u6240\u6709\u7684\u7C7B\u578B\u90FD\u4F1A\u653E\u5728\u4E00\u4E2A\u76F8\u540C\u7684\u5305\u4E2D\uFF0C\u4EE5\u4E1A\u52A1\u6982\u5FF5\u6765\u547D\u540D\u3002</p></blockquote><p>With this approach, as shown in Figure 34.2, we have the same interfaces and classes as before, but they are all placed into a single Java package rather than being split among three packages. This is a very simple refactoring from the \u201Cpackage by layer\u201D style, but the top-level organization of the code now screams something about the business domain. We can now see that this code base has something to do with orders rather than the web, services, and repositories. Another benefit is that it\u2019s potentially easier to find all of the code that you need to modify in the event that the \u201Cview orders\u201D use case changes. It\u2019s all sitting in a single Java package rather than being spread out.3</p><blockquote><p>\u56FE 34.2 \u5C55\u793A\u4E86\u8FD9\u79CD\u65B9\u5F0F\uFF0C\u7C7B\u548C\u63A5\u53E3\u4E0E\u4E4B\u524D\u7C7B\u4F3C\uFF0C\u4F46\u662F\u76F8\u6BD4\u4E4B\u524D\uFF0C\u8FD9\u6B21\u5B83\u4EEC\u90FD\u88AB\u653E\u5230\u4E86\u540C\u4E00\u4E2A Java \u5305\u4E2D\u3002\u76F8 \u6BD4 \u201C\u6309\u5C42\u5C01\u88C5\u201D\uFF0C\u8FD9\u53EA\u662F\u4E00\u4E2A\u5C0F\u53D8\u5316\uFF0C\u4F46\u662F\u73B0\u5728\u9876\u5C42\u4EE3\u7801\u7ED3\u6784\u81F3\u5C11\u4E0E\u4E1A\u52A1\u9886\u57DF\u6709\u70B9\u76F8\u5173\u4E86\u3002\u6211\u4EEC\u53EF\u4EE5\u770B\u5230\u8FD9\u6BB5\u4EE3\u7801\u662F\u4E0E\u8BA2\u5355\u6709\u5173\u7684\uFF0C\u800C\u4E0D\u662F\u53EA\u80FD\u770B\u5230 Web\u3001\u670D\u52A1\u53CA\u6570\u636E\u8BBF\u95EE\u3002\u53E6\u5916\u4E00\u4E2A\u597D\u5904\u662F\uFF0C\u5982\u679C\u9700\u8981\u4FEE\u6539 \u201C\u67E5\u770B\u8BA2\u5355\u201D\u8FD9\u4E2A\u4E1A\u52A1\u7528\u4F8B\uFF0C\u6BD4\u8F83\u5BB9\u6613\u627E\u5230\u76F8\u5173\u4EE3\u7801\uFF0C\u6BD5\u7ADF\u5B83\u4EEC\u90FD\u5728\u4E00\u4E2A\u5305\u4E2D\uFF0C\u800C\u4E0D\u662F\u5206\u6563\u5728\u5404\u5904\u3002</p></blockquote><p>I often see software development teams realize that they have problems with horizontal layering (\u201Cpackage by layer\u201D) and switch to vertical layering (\u201Cpackage by feature\u201D) instead. In my opinion, both are suboptimal. If you\u2019ve read this book so far, you might be thinking that we can do much better\u2014and you\u2019re right.</p><blockquote><p>\u8F6F\u4EF6\u7814\u53D1\u56E2\u961F\u5E38\u5E38\u4E00\u5F00\u59CB\u91C7\u7528\u6C34\u5E73\u5206\u5C42\u65B9\u5F0F\uFF08\u5373 \u201C\u6309\u5C42\u5C01\u88C5\u201D\uFF09\uFF0C\u9047\u5230\u56F0\u96BE\u540E\u518D\u5207\u6362\u5230\u5782\u76F4\u5206\u5C42\u65B9\u5F0F\uFF08\u5373 \u201C\u6309\u529F\u80FD\u5C01\u88C5\u201D\uFF09\u3002\u6211\u8BA4\u4E3A\uFF0C\u4E24\u79CD\u65B9\u5F0F\u90FD\u5F88\u4E0D\u597D\u3002\u770B\u5B8C\u672C\u4E66\uFF0C\u4F60\u5E94\u8BE5\u610F\u8BC6\u5230\u8FD8\u6709\u66F4\u597D\u7684\u5206\u7C7B\u65B9\u5F0F\u2014\u2014\u6CA1\u9519\u3002</p></blockquote>',11),m=t("Package by feature"),b=e("h2",{id:"ports-and-adapters-\u7AEF\u53E3\u548C\u9002\u914D\u5668",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ports-and-adapters-\u7AEF\u53E3\u548C\u9002\u914D\u5668","aria-hidden":"true"},"#"),t(" PORTS AND ADAPTERS \u7AEF\u53E3\u548C\u9002\u914D\u5668")],-1),y=e("p",null,"As Uncle Bob has said, approaches such as \u201Cports and adapters,\u201D the \u201Chexagonal architecture,\u201D \u201Cboundaries, controllers, entities,\u201D and so on aim to create architectures where business/domain-focused code is independent and separate from the technical implementation details such as frameworks and databases. To summarize, you often see such code bases being composed of an \u201Cinside\u201D (domain) and an \u201Coutside\u201D (infrastructure), as suggested in Figure 34.3.",-1),g=e("blockquote",null,[e("p",null,"\u5982 Bob \u5927\u53D4\u6240\u8BF4\uFF0C\u901A\u8FC7\u91C7\u7528\u201C\u7AEF\u53E3\u548C\u9002\u914D\u5668\u201D\u201C\u516D\u8FB9\u5F62\u67B6\u6784\u201D\u201C\u8FB9\u754C\u3001\u63A7\u5236\u5668\u3001\u5B9E\u4F53\u201D\u7B49\uFF0C\u6211\u4EEC\u53EF\u4EE5\u521B\u9020\u51FA\u4E00\u4E2A\u4E1A\u52A1\u9886\u57DF\u4EE3\u7801\u4E0E\u5177\u4F53\u5B9E\u73B0\u7EC6\u8282\uFF08\u6570\u636E\u5E93\u3001\u6846\u67B6\u7B49\uFF09\u9694\u79BB\u7684\u67B6\u6784\u3002\u603B\u7ED3\u4E0B\u6765\uFF0C\u5982\u56FE 34.3 \u6240\u793A\uFF0C\u6211\u4EEC\u53EF\u4EE5\u533A\u5206\u51FA\u4EE3\u7801\u4E2D\u7684\u5185\u90E8\u4EE3\u7801\uFF08\u9886\u57DF\uFF0CDomain\uFF09\u4E0E\u5916\u90E8\u4EE3\u7801\uFF08\u57FA\u7840\u8BBE\u65BD\uFF0CInfrastructure\uFF09\u3002")],-1),f=t("A code base with an inside and an outside"),w=e("p",null,"The \u201Cinside\u201D region contains all of the domain concepts, whereas the \u201Coutside\u201D region contains the interactions with the outside world (e.g., UIs, databases, third-party integrations). The major rule here is that the \u201Coutside\u201D depends on the \u201Cinside\u201D\u2014never the other way around. Figure 34.4 shows a version of how the \u201Cview orders\u201D use case might be implemented.",-1),k=e("blockquote",null,[e("p",null,"\u5185\u90E8\u533A\u57DF\u5305\u542B\u4E86\u6240\u6709\u7684\u9886\u57DF\u6982\u5FF5\uFF0C\u800C\u5916\u90E8\u533A\u57DF\u5219\u5305\u542B\u4E86\u4E0E\u5916\u754C\u4EA4\u4E92\u7684\u90E8\u5206\uFF08\u4F8B\u5982 UI\u3001\u6570\u636E\u5E93\u3001\u7B2C\u4E09\u65B9\u96C6\u6210\u7B49\uFF09\u3002\u8FD9\u91CC\u4E3B\u8981\u7684\u89C4\u5219\u662F\uFF0C\u53EA\u6709\u5916\u90E8\u4EE3\u7801\u80FD\u4F9D\u8D56\u5185\u90E8\u4EE3\u7801\uFF0C\u53CD\u4E4B\u5219\u4E0D\u80FD\u3002\u56FE 34.4 \u5C55\u793A\u4E86 \u201C\u67E5\u770B\u8BA2\u5355\u201D\u8FD9\u4E2A\u4E1A\u52A1\u7528\u4F8B\u662F\u5982\u4F55\u7528\u8FD9\u79CD\u65B9\u5F0F\u5B9E\u73B0\u7684\u3002")],-1),v=e("p",null,[t("The "),e("code",null,"com.mycompany.myapp.domain"),t(" package here is the \u201Cinside,\u201D and the other packages are the \u201Coutside.\u201D Notice how the dependencies flow toward the \u201Cinside.\u201D The keen-eyed reader will notice that the OrdersRepository from previous diagrams has been renamed to simply be Orders. This comes from the world of domain-driven design, where the advice is that the naming of everything on the \u201Cinside\u201D should be stated in terms of the \u201Cubiquitous domain language.\u201D To put that another way, we talk about \u201Corders\u201D when we\u2019re having a discussion about the domain, not the \u201Corders repository.\u201D")],-1),q=e("blockquote",null,[e("p",null,[t("\u8FD9\u91CC "),e("code",null,"com.mycompnay.myapp.domain"),t(" \u5305\u662F\u5185\u90E8\u4EE3\u7801\uFF0C\u53E6\u5916\u4E00\u4E2A\u5305\u662F\u5916\u90E8\u4EE3\u7801\u3002\u6CE8\u610F\u8FD9\u91CC\u7684\u4F9D\u8D56\u5173\u7CFB\u662F\u7531\u5916\u5411\u5185\u7684\u3002\u773C\u5C16\u7684\u8BFB\u8005\u53EF\u4EE5\u6CE8\u610F\u5230\u4E4B\u524D\u7684 OrderRepository \u7C7B\u73B0\u5728\u88AB\u6539\u540D\u4E3A Orders\u3002\u8FD9\u4E2A\u6982\u5FF5\u57FA\u4E8E\u9886\u57DF\u9A71\u52A8\u8BBE\u8BA1\u7406\u5FF5\uFF0C\u5176\u4E2D\u8981\u6C42\u5185\u90E8\u4EE3\u7801\u90FD\u5E94\u8BE5\u7528\u72EC\u7279\u7684\u9886\u57DF\u8BED\u8A00\u6765\u63CF\u8FF0\u3002\u6362\u53E5\u8BDD\u8BF4\uFF0C\u6211\u4EEC\u5728\u4E1A\u52A1\u9886\u57DF\u91CC\u9762\u8BA8\u8BBA\u7684\u5E94\u8BE5\u662F Orders\uFF0C\u800C\u4E0D\u662F\u201COrdersRepository\u201D\u3002")])],-1),I=t("View orders use case"),_=r('<p>It\u2019s also worth pointing out that this is a simplified version of what the UML class diagram might look like, because it\u2019s missing things like interactors and objects to marshal the data across the dependency boundaries.</p><blockquote><p>\u503C\u5F97\u6CE8\u610F\u7684\u662F\uFF0C\u8FD9\u91CC\u662F UML \u7C7B\u56FE\u7684\u4E00\u4E2A\u7B80\u5316\u7248\uFF0C\u8FD9\u91CC\u7F3A\u5C11\u4E86\u4EA4\u4E92\u5668\uFF0C\u4EE5\u53CA\u8DE8\u8FB9\u754C\u8C03\u7528\u65F6\u5BF9\u5E94\u7684\u6570\u636E\u7F16\u7801\u89E3\u7801\u5BF9\u8C61\u3002</p></blockquote><h2 id="package-by-component-\u6309\u7EC4\u4EF6\u5C01\u88C5" tabindex="-1"><a class="header-anchor" href="#package-by-component-\u6309\u7EC4\u4EF6\u5C01\u88C5" aria-hidden="true">#</a> PACKAGE BY COMPONENT \u6309\u7EC4\u4EF6\u5C01\u88C5</h2><p>Although I agree wholeheartedly with the discussions about SOLID, REP, CCP, and CRP and most of the advice in this book, I come to a slightly different conclusion about how to organize code. So I\u2019m going to present another option here, which I call \u201Cpackage by component.\u201D To give you some background, I\u2019ve spent most of my career building enterprise software, primarily in Java, across a number of different business domains. Those software systems have varied immensely, too. A large number have been web-based, but others have been client\u2013server4, distributed, message-based, or something else. Although the technologies differed, the common theme was that the architecture for most of these software systems was based on a traditional layered architecture.</p><blockquote><p>\u867D\u7136\u6211\u5BF9\u672C\u4E66\u4E2D\u7684 SOLID\u3001REP\u3001CCP\u3001CRP \u4EE5\u53CA\u5176\u4ED6\u5927\u90E8\u5206\u5EFA\u8BAE\u5B8C\u5168\u8BA4\u540C\uFF0C\u6211\u60F3\u63D0\u51FA\u5BF9\u4EE3\u7801\u7EC4\u7EC7\u65B9\u5F0F\u7684\u4E00\u4E2A\u4E0D\u540C\u770B\u6CD5\u2014\u2014\u201C\u6309\u7EC4\u4EF6\u5C01\u88C5\u201D\u3002\u4E00\u4E9B\u80CC\u666F\u4FE1\u606F\uFF1A\u5728\u6211\u7684\u804C\u4E1A\u751F\u6DAF\u4E2D\uFF0C\u6211\u57FA\u4E8E Java \u6784\u5EFA\u4E86\u5927\u91CF\u4E0D\u540C\u9886\u57DF\u7684\u4F01\u4E1A\u8F6F\u4EF6\uFF0C\u8FD9\u4E9B\u8F6F\u4EF6\u7CFB\u7EDF\u8981\u6C42\u5404\u5F02\u3002\u5927\u90E8\u5206\u7CFB\u7EDF\u90FD\u662F\u57FA\u4E8E Web \u7684\uFF0C\u4E5F\u6709\u4E00\u4E9B\u662F CS \u67B6\u6784\uFF0C\u6216\u8005\u662F\u5206\u5E03\u5F0F\u67B6\u6784\u7684\u3001\u57FA\u4E8E\u6D88\u606F\u7684\uFF0C\u6216\u8005\u5176\u4ED6\u7684\u3002\u867D\u7136\u5177\u4F53\u91C7\u7528\u7684\u6280\u672F\u4E0D\u540C\uFF0C\u4F46\u5927\u90E8\u5206\u7CFB\u7EDF\u90FD\u662F\u57FA\u4E8E\u4F20\u7EDF\u7684\u5206\u5C42\u67B6\u6784\u7684\u3002</p></blockquote><p>I\u2019ve already mentioned a couple of reasons why layered architectures should be considered bad, but that\u2019s not the whole story. The purpose of a layered architecture is to separate code that has the same sort of function. Web stuff is separated from business logic, which is in turn separated from data access. As we saw from the UML class diagram, from an implementation perspective, a layer typically equates to a Java package. From a code accessibility perspective, for the OrdersController to be able to have a dependency on the OrdersService interface, the OrdersService interface needs to be marked as public, because they are in different packages. Likewise, the OrdersRepository interface needs to be marked as public so that it can be seen outside of the repository package, by the OrdersServiceImpl class.</p><blockquote><p>\u6211\u5DF2\u7ECF\u7ED9\u51FA\u4E00\u4E9B\u5206\u5C42\u67B6\u6784\u4E0D\u597D\u7684\u7406\u7531\uFF0C\u4F46\u8FD9\u8FD8\u4E0D\u662F\u5168\u90E8\u3002\u5206\u5C42\u67B6\u6784\u8BBE\u8BA1\u7684\u76EE\u7684\u662F\u5C06\u529F\u80FD\u76F8\u4F3C\u7684\u4EE3\u7801\u8FDB\u884C\u5206\u7EC4\u3002\u5904\u7406 Web \u7684\u4EE3\u7801\u5E94\u8BE5\u4E0E\u5904\u7406\u4E1A\u52A1\u903B\u8F91\u7684\u4EE3\u7801\u5206\u5F00\uFF0C\u540C\u65F6\u4E5F\u4E0E\u5904\u7406\u6570\u636E\u8BBF\u95EE\u7684\u4EE3\u7801\u5206\u5F00\u3002\u6B63\u5982\u6211\u4EEC\u5728 UML \u7C7B\u56FE\u4E2D\u6240\u89C1\uFF0C\u4ECE\u5B9E\u73B0\u89D2\u5EA6\u8BB2\uFF0C\u5C42\u5C31\u662F\u4EE3\u8868\u4E86 Java \u5305\u3002\u4ECE\u4EE3\u7801\u53EF\u8BBF\u95EE\u6027\u89D2\u5EA6\u6765\u8BB2\uFF0C\u5982\u679C\u9700\u8981 OrdersController \u4F9D\u8D56 OrderService \u63A5\u53E3\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u63A5\u53E3\u5FC5\u987B\u8BBE\u7F6E\u4E3A public\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u5728\u4E0D\u540C\u7684\u5305\u4E2D\u3002\u540C\u6837\u7684\uFF0COrdersRepository \u63A5\u53E3\u4E5F\u9700\u8981\u8BBE\u7F6E\u4E3A public\uFF0C\u8FD9\u6837\u624D\u80FD\u88AB\u5305\u5916\u7684\u7C7B OrdersServicelmple \u4F7F\u7528\u3002</p></blockquote><p>In a strict layered architecture, the dependency arrows should always point downward, with layers depending only on the next adjacent lower layer. This comes back to creating a nice, clean, acyclic dependency graph, which is achieved by introducing some rules about how elements in a code base should depend on each other. The big problem here is that we can cheat by introducing some undesirable dependencies, yet still create a nice, acyclic dependency graph.</p><blockquote><p>\u5728\u4E25\u683C\u5206\u5C42\u7684\u67B6\u6784\u4E2D\uFF0C\u4F9D\u8D56\u6307\u5411\u7684\u7BAD\u5934\u5E94\u8BE5\u6C38\u8FDC\u5411\u4E0B\uFF0C\u6BCF\u4E00\u5C42\u53EA\u80FD\u4F9D\u8D56\u76F8\u90BB\u7684\u4E0B\u4E00\u5C42\u3002\u901A\u8FC7\u5F15\u5165\u4E00\u4E9B\u4EE3\u7801\u4E92\u76F8\u4F9D\u8D56\u7684\u89C4\u5219\uFF0C\u6211\u4EEC\u5C31\u5F62\u6210\u4E86\u4E00\u4E2A\u5E72\u51C0\u3001\u6F02\u4EAE\u7684\u5355\u5411\u4F9D\u8D56\u56FE\u3002\u8FD9\u91CC\u6709\u4E00\u4E2A\u5927\u95EE\u9898\u2014\u2014\u53EA\u8981\u901A\u8FC7\u5F15\u5165\u4E00\u4E9B\u4E0D\u5E94\u8BE5\u6709\u7684\u4F9D\u8D56\u6765\u4F5C\u5F0A\uFF0C\u4F9D\u7136\u53EF\u4EE5\u5F62\u6210\u6F02\u4EAE\u7684\u5355\u5411\u4F9D\u8D56\u56FE\u3002</p></blockquote><p>Suppose that you hire someone new who joins your team, and you give the newcomer another orders-related use case to implement. Since the person is new, he wants to make a big impression and get this use case implemented as quickly as possible. After sitting down with a cup of coffee for a few minutes, the newcomer discovers an existing OrdersController class, so he decides that\u2019s where the code for the new orders-related web page should go. But it needs some orders data from the database. The newcomer has an epiphany: \u201COh, there\u2019s an OrdersRepository interface already built, too. I can simply dependency-inject the implementation into my controller. Perfect!\u201D After a few more minutes of hacking, the web page is working. But the resulting UML diagram looks like Figure 34.5.</p><blockquote><p>\u5047\u8BBE\u65B0\u5458\u5DE5\u52A0\u5165\u4E86\u56E2\u961F\uFF0C\u4F60\u7ED9\u65B0\u4EBA\u5B89\u6392\u4E86\u4E00\u4E2A\u8BA2\u5355\u76F8\u5173\u7684\u4E1A\u52A1\u7528\u4F8B\u7684\u5B9E\u73B0\u4EFB\u52A1\u3002\u7531\u4E8E\u8FD9\u4E2A\u4EBA\u521A\u521A\u5165\u804C\uFF0C\u4ED6\u60F3\u597D\u597D\u8868\u73B0\uFF0C\u5C3D\u5FEB\u5B8C\u6210\u8FD9\u9879\u529F\u80FD\u3002\u7C97\u7565\u770B\u8FC7\u4EE3\u7801\u4E4B\u540E\uFF0C\u65B0\u4EBA\u53D1\u73B0\u4E86 OrdersController \u8FD9\u4E2A\u7C7B\uFF0C\u4E8E\u662F\u4ED6\u5C06\u65B0\u7684\u8BA2\u5355\u76F8\u5173\u7684 Web \u4EE3\u7801\u90FD\u585E\u4E86\u8FDB\u53BB\u3002\u4F46\u662F\u8FD9\u6BB5\u4EE3\u7801\u9700\u66F4\u4ECE\u6570\u636E\u5E93\u67E5\u627E\u4E00\u4E9B\u8BA2\u5355\u6570\u636E\u3002\u8FD9\u65F6\u5019\u8FD9\u4E2A\u65B0\u4EBA\u7075\u673A\u4E00\u52A8\uFF1A\u201C\u4EE3\u7801\u5DF1\u7ECF\u6709\u4E86\u4E00\u4E2A OrdersRepository \u63A5\u53E3\uFF0C\u53EA\u9700\u8981\u5C06\u5B83\u7528\u4F9D\u8D56\u6CE8\u5165\u6846\u67B6\u5F15\u5165\u63A7\u5236\u5668\u5C31\u884C\uFF0C\u6211\u771F\u673A\u667A\uFF01\u201D\u51E0\u5206\u949F\u4E4B\u540E\uFF0C\u529F\u80FD\u5DF2\u7ECF\u6B63\u5E38\u4E86\uFF0C\u4F46\u662F UML \u7ED3\u6784\u56FE\u53D8\u6210\u4E86\u56FE 34.5 \u8FD9\u6837\u3002</p></blockquote><p>The dependency arrows still point downward, but the OrdersController is now additionally bypassing the OrdersService for some use cases. This organization is often called a relaxed layered architecture, as layers are allowed to skip around their adjacent neighbor(s). In some situations, this is the intended outcome\u2014if you\u2019re trying to follow the CQRS5 pattern, for example. In many other cases, bypassing the business logic layer is undesirable, especially if that business logic is responsible for ensuring authorized access to individual records, for example.</p><blockquote><p>\u4F9D\u8D56\u5173\u7CFB\u7BAD\u5934\u4F9D\u7136\u5411\u4E0B\uFF0C\u4F46\u662F\u73B0\u5728 OrdersController \u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\u7ED5\u8FC7\u4E86 OrderService \u7C7B\u3002\u8FD9\u79CD\u7EC4\u7EC7\u5F62\u5F0F\u88AB\u79F0\u4E3A\u5BBD\u677E\u7684\u5206\u5C42\u91C7\u6784\uFF0C\u5141\u8BB8\u67D0\u4E9B\u5C42\u8DF3\u8FC7\u76F4\u63A5\u76F8\u90BB\u7684\u90BB\u5C45\u3002\u5728\u6709\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u8FD9\u662F\u610F\u6599\u4E4B\u4E2D\u7684\u2014\u2014\u4F8B\u5982\uFF0C\u5982\u679C\u6211\u4EEC\u5728\u9075\u5FAA CQRS \u8BBE\u8BA1\u6A21\u5F0F\uFF0C\u8FD9\u662F\u5408\u7406\u7684\u3002\u4F46\u662F\u66F4\u591A\u7684\u60C5\u51B5\u4E0B\uFF0C\u7ED5\u8FC7\u4E1A\u52A1\u903B\u8F91\u5C42\u662F\u4E0D\u5408\u7406\u7684\uFF0C\u5C24\u5176\u662F\u5728\u4E1A\u52A1\u903B\u8F91\u5C42\u8981\u63A7\u5236\u6743\u9650\u7684\u60C5\u51B5\u4E0B\u3002</p></blockquote><p>While the new use case works, it\u2019s perhaps not implemented in the way that we were expecting. I see this happen a lot with teams that I visit as a consultant, and it\u2019s usually revealed when teams start to visualize what their code base really looks like, often for the first time.</p><blockquote><p>\u867D\u7136\u65B0\u7684\u4E1A\u52A1\u7528\u4F8B\u53EF\u4EE5\u6B63\u5E38\u5DE5\u4F5C\uFF0C\u4F46\u662F\u5B83\u53EF\u80FD\u4E0D\u662F\u6309\u7167\u5408\u7406\u65B9\u5F0F\u5B9E\u73B0\u7684\u3002\u4F5C\u4E3A\u54A8\u8BE2\u5E08\uFF0C\u6211\u66FE\u7ECF\u89C1\u8FC7\u5F88\u591A\u56E2\u961F\u51FA\u73B0\u8FD9\u79CD\u60C5\u51B5\uFF0C\u53EA\u6709\u4ED6\u4EEC\u5F00\u59CB\u4ED4\u7EC6\u89C2\u5BDF\u81EA\u5DF1\u7684\u4EE3\u7801\u7ED3\u6784\u56FE\u65F6\u624D\u4F1A\u53D1\u73B0\u3002</p></blockquote>',15),O=t("Relaxed layered architecture"),T=r("<p>What we need here is a guideline\u2014an architectural principle\u2014that says something like, \u201CWeb controllers should never access repositories directly.\u201D The question, of course, is enforcement. Many teams I\u2019ve met simply say, \u201CWe enforce this principle through good discipline and code reviews, because we trust our developers.\u201D This confidence is great to hear, but we all know what happens when budgets and deadlines start looming ever closer.</p><blockquote><p>\u8FD9\u91CC\u6211\u4EEC\u6709\u7684\u5176\u5B9E\u53EA\u662F\u4E00\u4E2A\u89C4\u8303\u2014\u2014\u4E00\u4E2A\u67B6\u6784\u8BBE\u8BA1\u539F\u5219\u5185\u5BB9\u662F\u201CWeb \u63A7\u5236\u5668\u6C38\u8FDC\u4E0D\u5E94\u8BE5\u76F4\u63A5\u8BBF\u95EE\u6570\u636E\u5C42\u201D\u3002\u8FD9\u91CC\u7684\u6838\u5FC3\u95EE\u9898\u5F53\u7136\u662F\u5982\u4F55\u5F3A\u5236\u6267\u884C\u3002\u6211\u9047\u89C1\u7684\u5F88\u591A\u56E2\u961F\u4EC5\u4EC5\u901A\u8FC7\u91C7\u7528\u201C\u81EA\u5F8B\u201D\u6216\u8005\u201C\u4EE3\u7801\u8BC4\u5BA1\u201D\u65B9\u5F0F\u6765\u6267\u884C\uFF0C\u201C\u6211\u76F8\u4FE1\u6211\u7684\u7A0B\u5E8F\u5458\u201D\u3002\u6709\u8FD9\u79CD\u81EA\u4FE1\u5F53\u7136\u5F88\u597D\uFF0C\u4F46\u662F\u6211\u4EEC\u90FD\u77E5\u9053\u5F53\u9884\u7B97\u7F29\u51CF\u3001\u5DE5\u671F\u4E34\u8FD1\u7684\u65F6\u5019\u4F1A\u53D1\u751F\u4EC0\u4E48\u4E8B\u60C5\u3002</p></blockquote><p>A far smaller number of teams tell me that they use static analysis tools (e.g., NDepend, Structure101, Checkstyle) to check and automatically enforce architecture violations at build time. You may have seen such rules yourself; they usually manifest themselves as regular expressions or wildcard strings that state \u201Ctypes in package <code>**/web</code> should not access types in <code>**/data</code>\u201D; and they are executed after the compilation step.</p><blockquote><p>\u6709\u4E00\u5C0F\u90E8\u5206\u56E2\u961F\u544A\u8BC9\u6211\uFF0C\u4ED6\u4EEC\u4F1A\u91C7\u7528\u9759\u6001\u5206\u6790\u5DE5\u5177\uFF08\u4F8B\u5982 Ndepend\u3001Structure101\u3001Checkstyle\uFF09\u6765\u5728\u6784\u5EFA\u9636\u6BB5\u81EA\u52A8\u68C0\u67E5\u8FDD\u53CD\u67B6\u6784\u8BBE\u8BA1\u89C4\u5219\u7684\u4EE3\u7801\u3002\u4F30\u8BA1\u4F60\u89C1\u8FC7\u8FD9\u79CD\u4EE3\u7801\uFF0C\u4E00\u822C\u6765\u8BF4\u5C31\u662F\u4E00\u6BB5\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u4F8B\u5982\u201C\u5305 <code>**/web</code> \u4E0B\u9762\u7684\u7C7B\u578B\u4E0D\u5141\u8BB8\u8BBF\u95EE <code>**/data</code> \u4E0B\u9762\u7684\u7C7B\u578B\u201D\uFF0C\u8FD9\u4E9B\u68C0\u67E5\u5728\u7F16\u8BD1\u6B65\u9AA4\u4E4B\u540E\u6267\u884C\u3002</p></blockquote><p>This approach is a little crude, but it can do the trick, reporting violations of the architecture principles that you\u2019ve defined as a team and (you hope) failing the build. The problem with both approaches is that they are fallible, and the feedback loop is longer than it should be. If left unchecked, this practice can turn a code base into a \u201Cbig ball of mud.\u201D6 I\u2019d personally like to use the compiler to enforce my architecture if at all possible.</p><blockquote><p>\u8FD9\u79CD\u65B9\u5F0F\u867D\u7136\u7B80\u5355\u7C97\u66B4\uFF0C\u4F46\u662F\u786E\u5B9E\u80FD\u8D77\u6548\u679C\uFF0C\u53EF\u4EE5\u9501\u5B9A\u8FDD\u53CD\u4E86\u56E2\u961F\u5B9A\u4E49\u7684\u7CFB\u7EDF\u67B6\u6784\u8BBE\u8BA1\u539F\u5219\u7684\u60C5\u51B5\uFF0C\u5E76\u4E14\uFF08\u7406\u60F3\u60C5\u51B5\u4E0B\uFF09\u5BFC\u81F4\u6784\u5EFA\u5931\u8D25\u3002\u8FD9\u4E24\u79CD\u65B9\u6CD5\u7684\u5171\u540C\u95EE\u9898\u662F\u5BB9\u6613\u51FA\u9519\uFF0C\u540C\u65F6\u53CD\u9988\u5FAA\u73AF\u65F6\u95F4\u592A\u957F\u4E86\u3002\u5982\u679C\u4E0D\u7CBE\u5FC3\u7EF4\u62A4\uFF0C\u6574\u4E2A\u4EE3\u7801\u5E93\u53EF\u80FD\u5F88\u5FEB\u5C31\u53D8\u6210\u201C\u4E00\u56E2\u6CE5\u5DF4\u201D\u3002\u6211\u4E2A\u4EBA\u66F4\u503E\u5411\u9009\u62E9\u80FD\u591F\u8BA9\u7F16\u8BD1\u5668\u6267\u6CD5\u7684\u505A\u6CD5\u3002</p></blockquote><p>This brings us to the \u201Cpackage by component\u201D option. It\u2019s a hybrid approach to everything we\u2019ve seen so far, with the goal of bundling all of the responsibilities related to a single coarse-grained component into a single Java package. It\u2019s about taking a service-centric view of a software system, which is something we\u2019re seeing with micro-service architectures as well. In the same way that ports and adapters treat the web as just another delivery mechanism, \u201Cpackage by component\u201D keeps the user interface separate from these coarse-grained components. Figure 34.6 shows what the \u201Cview orders\u201D use case might look like.</p><blockquote><p>\u90A3\u4E48\uFF0C\u770B\u4E00\u4E0B\u201C\u6309\u7EC4\u4EF6\u5C01\u88C5\u201D\u7684\u505A\u6CD5\u3002\u8FD9\u79CD\u505A\u6CD5\u6DF7\u5408\u4E86\u6211\u4EEC\u4E4B\u524D\u8BB2\u7684\u6240\u6709\u7684\u65B9\u6CD5\uFF0C\u76EE\u6807\u662F\u5C06\u4E00\u4E2A\u7C97\u7C92\u5EA6\u7EC4\u4EF6\u76F8\u5173\u7684\u6240\u6709\u7C7B\u653E\u5165\u4E00\u4E2A Java \u5305\u4E2D\u3002\u8FD9\u5C31\u50CF\u662F\u4EE5\u4E00\u79CD\u9762\u5411\u670D\u52A1\u7684\u89C6\u89D2\u6765\u6784\u5EFA\u8F6F\u4EF6\u7CFB\u7EDF\uFF0C\u4E0E\u5FAE\u670D\u52A1\u67B6\u6784\u7C7B\u4F3C\u3002\u8FD9\u91CC\uFF0C\u5C31\u50CF\u7AEF\u53E3\u548C\u9002\u914D\u5668\u6A21\u5F0F\u5C06 Web \u89C6\u4E3A\u4E00\u79CD\u4EA4\u4ED8\u624B\u6BB5\u4E00\u6837\uFF0C\u201C\u6309\u7EC4\u4EF6\u5C01\u88C5\u201D\u5C06 U1 \u4E0E\u7C97\u7C92\u5EA6\u7EC4\u4EF6\u5206\u79BB\u3002\u56FE 34.6 \u5C55\u793A\u4E86\u201C\u67E5\u770B\u8BA2\u5355\u201D\u8FD9\u4E2A\u7528\u4F8B\u7684\u8BBE\u8BA1\u56FE\u3002</p></blockquote><p>In essence, this approach bundles up the \u201Cbusiness logic\u201D and persistence code into a single thing, which I\u2019m calling a \u201Ccomponent.\u201D Uncle Bob presented his definition of \u201Ccomponent\u201D earlier in the book, saying:</p><blockquote><p>\u603B\u7684\u6765\u8BF4\uFF0C\u8FD9\u79CD\u65B9\u5F0F\u5C06\u201C\u4E1A\u52A1\u903B\u8F91\u201D\u4E0E\u201C\u6301\u4E45\u5316\u4EE3\u7801\u201D\u5408\u5E76\u5728\u4E00\u8D77\uFF0C\u79F0\u4E3A\u201C\u7EC4\u4EF6\u201D\uFF0CBob \u5927\u53D4\u5728\u672C\u4E66\u4E2D\u5BF9\u201C\u7EC4\u4EF6\u201D\u7684\u5B9A\u4E49\u5982\u4E0B\uFF1A</p></blockquote><p>Components are the units of deployment. They are the smallest entities that can be deployed as part of a system. In Java, they are jar files.</p><blockquote><p>\u7EC4\u4EF6\u662F\u90E8\u7F72\u5355\u5143\u3002\u7EC4\u4EF6\u662F\u7CFB\u7EDF\u4E2D\u80FD\u591F\u90E8\u7F72\u7684\u6700\u5C0F\u5355\u4F4D\uFF0C\u5BF9\u5E94\u5728 Java \u91CC\u5C31\u662F jar \u6587\u4EF6\u3002</p></blockquote>",12),S=t("View orders use case"),A=r('<p>My definition of a component is slightly different: \u201CA grouping of related functionality behind a nice clean interface, which resides inside an execution environment like an application.\u201D This definition comes from my \u201CC4 software architecture model,\u201D7 which is a simple hierarchical way to think about the static structures of a software system in terms of containers, components, and classes (or code). It says that a software system is made up of one or more containers (e.g., web applications, mobile apps, stand-alone applications, databases, file systems), each of which contains one or more components, which in turn are implemented by one or more classes (or code). Whether each component resides in a separate jar file is an orthogonal concern.</p><blockquote><p>\u6211\u5BF9\u7EC4\u4EF6\u7684\u5B9A\u4E49\u7A0D\u6709\u4E0D\u540C\uFF1A\u201C\u5728\u4E00\u4E2A\u6267\u884C\u73AF\u5883\uFF08\u5E94\u5DDD\u7A0B\u5E8F\uFF09\u4E2D\u7684\u3001\u4E00\u4E2A\u5E72\u51C0\u3001\u826F\u597D\u7684\u63A5\u53E3\u80CC\u540E\u7684\u4E00\u7CFB\u5217\u76F8\u5173\u529F\u80FD\u7684\u96C6\u5408\u201D\u3002\u8FD9\u4E2A\u5B9A\u4E49\u6765\u81EA\u6211\u7684\u201CC4 \u8F6F\u4EF6\u67B6\u6784\u6A21\u578B&quot; \u8FD9\u4E2A\u6A21\u91CC\u4EE5\u4E00\u79CD\u5C42\u7EA7\u6A21\u578B\u8BA8\u8BBA\u8F6F\u4EF6\u7CFB\u7EDF\u7684\u9759\u6001\u7ED3\u6784\uFF0C\u5176\u4E2D\u7684\u6982\u5FF5\u5305\u62EC\u5BB9\u5668\u3001\u7EC6\u4EF6\u3001\u7C7B\u3002\u8FD9\u4E2A\u6A21\u578B\u8BA4\u4E3A\uFF0C\u7CFB\u7EDF\u7531\u4E00\u4E2A\u6216\u8005\u591A\u4E2A\u5BB9\u5668\u7EC4\u6210\uFF08\u4F8B \u5982 Web \u5E94\u7528\u3001\u79FB\u52A8 App\u3001\u72EC\u7ACB\u5E94\u7528\u3001\u6570\u636E\u5E93\u3001\u6587\u4EF6\u7CFB\u7EDF\uFF09\uFF0C\u6BCF\u4E2A\u5BB9\u5668\u5305\u542B\u4E00\u4E2A\u6216\u591A\u4E2A\u7EC4\u4EF6\uFF0C\u6BCF\u4E2A\u7EC4\u4EF6\u7531\u4E00\u4E2A\u6216\u591A\u4E2A\u7C7B\u7EC4\u6210\u3002\u6BCF\u4E2A\u7EC4\u4EF6\u5177\u4F53\u5B58\u5728\u4E8E\u54EA\u4E2A jar \u6587\u4EF6\u4E2D\u5219\u662F\u53E6\u5916\u4E00\u4E2A\u7EF4\u5EA6\u7684\u4E8B\u60C5\u3002</p></blockquote><p>A key benefit of the \u201Cpackage by component\u201D approach is that if you\u2019re writing code that needs to do something with orders, there\u2019s just one place to go\u2014the OrdersComponent. Inside the component, the separation of concerns is still maintained, so the business logic is separate from data persistence, but that\u2019s a component implementation detail that consumers don\u2019t need to know about. This is akin to what you might end up with if you adopted a micro-services or Service-Oriented Architecture\u2014a separate OrdersService that encapsulates everything related to handling orders. The key difference is the decoupling mode. You can think of well-defined components in a monolithic application as being a stepping stone to a micro-services architecture.</p><blockquote><p>\u8FD9\u79CD\u201C\u6309\u7EC4\u4EF6\u5C01\u88C5\u201D\u7684\u65B9\u5F0F\u7684\u4E00\u4E2A\u597D\u5904\u662F\uFF0C\u5982\u679C\u6211\u4EEC\u9700\u8981\u7F16\u5199\u548C\u8BA2\u5355\u6709\u5173\u7684\u4EE3\u7801\uFF0C\u53EA\u6709\u4E00\u4E2A\u4F4D\u7F6E\u9700\u8981\u4FEE\u6539 OrdersComponet\u3002\u5728\u8FD9\u4E2A\u7EC4\u4EF6\u4E2D\uFF0C\u4ECD\u7136\u5E94\u8BE5\u5173\u6CE8\u91CD\u70B9\u9694\u79BB\u539F\u5219\uFF0C\u4F46\u8FD9\u662F\u7EC4\u4EF6\u5185\u90E8|\u53EF\u9898\uFF0C\u4F7F\u7528\u8005\u4E0D\u9700\u8981\u5173\u5FC3\u3002\u8FD9\u5C31\u6709\u70B9\u50CF\u91C7\u7528\u5FAE\u670D\u52A1\u67B6\u6784\uFF0C\u6216\u8005\u662F\u9762\u5411\u670D\u52A1\u67B6\u6784\u7684\u7ED3\u679C\u2014\u2014\u72EC\u7ACB\u7684 Orderservice \u4F1A\u5C06\u6240\u6709\u8BA2\u5355\u76F8\u5173\u7684\u4E1C\u897F\u5C01\u88C5\u8D77\u6765\u3002\u8FD9\u91CC\u5173\u952E\u7684\u533A\u522B\u662F\u89E3\u8026\u7684\u65B9\u5F0F\u3002\u6211\u4EEC\u53EF\u4EE5\u8BA4\u4E3A\uFF0C\u5355\u4F53\u7A0B\u5E8F\u4E2D\u7684\u4E00\u4E2A\u826F\u597D\u5B9A\u4E49\u7684\u7EC4\u4EF6\uFF0C\u662F\u5FAE\u670D\u52A1\u5316\u67B6\u6784\u7684\u4E00\u4E2A\u524D\u63D0\u6761\u4EF6\u3002</p></blockquote><h2 id="the-devil-is-in-the-implementation-details-\u5177\u4F53\u5B9E\u73B0\u7EC6\u8282\u4E2D\u7684\u9677\u9631" tabindex="-1"><a class="header-anchor" href="#the-devil-is-in-the-implementation-details-\u5177\u4F53\u5B9E\u73B0\u7EC6\u8282\u4E2D\u7684\u9677\u9631" aria-hidden="true">#</a> THE DEVIL IS IN THE IMPLEMENTATION DETAILS \u5177\u4F53\u5B9E\u73B0\u7EC6\u8282\u4E2D\u7684\u9677\u9631</h2><p>On the face of it, the four approaches do all look like different ways to organize code and, therefore, could be considered different architectural styles. This perception starts to unravel very quickly if you get the implementation details wrong, though.</p><blockquote><p>\u8868\u9762\u4E0A\u770B\uFF0C\u56DB\u79CD\u4EE3\u7801\u7EC4\u7EC7\u65B9\u5F0F\u5404\u4E0D\u76F8\u540C\uFF0C\u53EF\u4EE5\u8BA4\u4E3A\u662F\u4E0D\u540C\u7684\u67B6\u6784\u8BBE\u8BA1\u98CE\u683C\u3002\u53EF\u662F\uFF0C\u5982\u679C\u5177\u4F53\u5B9E\u73B0\u4E2D\u4E0D\u4E25\u52A0\u6CE8\u610F\uFF0C\u5F88\u5FEB\u5C31\u4F1A\u51FA\u73B0\u504F\u5DEE\u3002</p></blockquote><p>Something I see on a regular basis is an overly liberal use of the public access modifier in languages such as Java. It\u2019s almost as if we, as developers, instinctively use the public keyword without thinking. It\u2019s in our muscle memory. If you don\u2019t believe me, take a look at the code samples for books, tutorials, and open source frameworks on GitHub. This tendency is apparent, regardless of which architectural style a code base is aiming to adopt\u2014horizontal layers, vertical layers, ports and adapters, or something else. Marking all of your types as public means you\u2019re not taking advantage of the facilities that your programming language provides with regard to encapsulation. In some cases, there\u2019s literally nothing preventing somebody from writing some code to instantiate a concrete implementation class directly, violating the intended architecture style.</p><blockquote><p>\u6211\u7ECF\u5E38\u9047\u5230\u7684\u4E00\u4E2A\u95EE\u9898\u662F\uFF0CJava \u4E2D public \u8BBF\u95EE\u63A7\u5236\u4FEE\u9970\u7B26\u7684\u6EE5\u7528\u3002\u6211\u4EEC\u4F5C\u4E3A\u7A0B\u5E8F\u5458\uFF0C\u597D\u50CF\u5929\u751F\u5C31\u559C\u6B22\u4F7F\u7528\u4E25 public \u5173\u952E\u8BCD\u3002\u8FD9\u5C31\u597D\u50CF\u662F\u808C\u8089\u8BB0\u5FC6\u4E00\u6837\u3002\u5982\u679C\u4E0D\u4FE1\uFF0C\u8BF7\u770B\u4E00\u4E0B\u5404\u79CD\u4E66\u7C4D\u7684\u4EE3\u7801\u793A\u8303\u3001\u5404\u79CD\u5165\u95E8\u6559\u7A0B\uFF0C\u4EE5\u53CA GitHub \u4E0A\u7684\u5F00\u6E90\u6846\u67B6\u3002\u8FD9\u4E2A\u8D8B\u52BF\u662F\u663E\u800C\u6613\u89C1\u7684\uFF0C\u4E0D\u7BA1\u91C7\u7528\u4E86\u54EA\u79CD\u7CFB\u7EDF\u67B6\u6784\u98CE\u683C\u3002\u5C06\u6240\u6709\u7684\u7C7B\u90FD\u8BBE\u7F6E\u4E3A public \u610F\u5473\u7740\u5C31\u65E0\u6CD5\u5229\u7528\u7F16\u7A0B\u8BED\u8A00\u63D0\u4F9B\u7684\u5C01\u88C5\u624B\u6BB5\u3002\u8FD9\u6837\u4E00\u6765\uFF0C\u6CA1\u6709\u4EFB\u4F55\u4E1C\u897F\u53EF\u4EE5\u963B\u788D\u67D0\u4EBA\u5199\u4E00\u6BB5\u76F4\u63A5\u521D\u59CB\u5316\u5177\u4F53\u5B9E\u73B0\u7C7B\u7684\u4EE3\u7801\uFF0C\u54EA\u6015\u5B83\u8FDD\u53CD\u4E86\u67B6\u6784\u8BBE\u8BA1\u7684\u8981\u6C42\u3002</p></blockquote><h2 id="organization-versus-encapsulation-\u7EC4\u7EC7\u5F62\u5F0F\u4E0E\u5C01\u88C5\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#organization-versus-encapsulation-\u7EC4\u7EC7\u5F62\u5F0F\u4E0E\u5C01\u88C5\u7684\u533A\u522B" aria-hidden="true">#</a> ORGANIZATION VERSUS ENCAPSULATION \u7EC4\u7EC7\u5F62\u5F0F\u4E0E\u5C01\u88C5\u7684\u533A\u522B</h2><p>Looking at this issue another way, if you make all types in your Java application public, the packages are simply an organization mechanism (a grouping, like folders), rather than being used for encapsulation. Since public types can be used from anywhere in a code base, you can effectively ignore the packages because they provide very little real value. The net result is that if you ignore the packages (because they don\u2019t provide any means of encapsulation and hiding), it doesn\u2019t really matter which architectural style you\u2019re aspiring to create. If we look back at the example UML diagrams, the Java packages become an irrelevant detail if all of the types are marked as public. In essence, all four architectural approaches presented earlier in this chapter are exactly the same when we overuse this designation (Figure 34.7).</p><blockquote><p>\u4ECE\u53E6\u5916\u4E00\u4E2A\u89D2\u5EA6\u6765\u770B\uFF0C\u5982\u679C\u6211\u4EEC\u5C06 Java \u7A0B\u5E8F\u4E2D\u7684\u6240\u6709\u7C7B\u578B\u90FD\u8BBE\u7F6E\u4E3A public\uFF0C\u90A3\u4E48\u5305\u5C31\u4EC5\u4EC5\u662F\u4E00\u79CD\u7EC4\u7EC7\u5F62\u5F0F\u4E86\uFF08\u7C7B\u4F3C\u6587\u4EF6\u5939\u4E00\u6837\u7684\u5206\u7EC4\u65B9\u5F0F\uFF09\uFF0C\u800C\u4E0D\u662F\u4E00\u79CD\u5C01\u88C5\u65B9\u5F0F\uFF0C\u7531\u4E8E public \u7C7B\u578B\u53EF\u4EE5\u5728\u4EE3\u7801\u5E93\u7684\u4EFB\u4F55\u4F4D\u7F6E\u8C03\u7528\uFF0C\u6211\u4EEC\u4E8B\u5B9E\u4E0A\u5C31\u53EF\u4EE5\u5FFD\u7565\u5305\u7684\u6982\u5FF5\uFF0C\u56E0\u4E3A\u5B83\u5E76\u4E0D\u63D0\u4F9B\u4EC0\u4E48\u4EF7\u503C\u3002\u6700\u7EC8\uFF0C\u5982\u679C\u5FFD\u89C6\u5305\u7684\u6982\u5FF5\uFF08\u56E0\u4E3A\u5E76\u4E0D\u8D77\u5230\u4EFB\u4F55\u5C01\u88C5\u548C\u9690\u85CF\u7684\u529F\u80FD\uFF09\uFF0C\u90A3\u4E48\u60F3\u8981\u91C7\u7528\u7684\u4EFB\u4F55\u67B6\u6784\u98CE\u683C\u5C31\u90FD\u4E0D\u91CD\u8981\u4E86\u3002\u6211\u4EEC\u56DE\u8FC7\u5934\u6765\u770B\u4E00\u4E0B\u4F8B\u5B50\u4E2D\u7684 UML \u56FE\uFF0C\u5982\u679C\u6240\u6709\u7684\u7C7B\u578B\u90FD\u662F public\uFF0C\u90A3\u4E48 Java \u5305\u5C31\u6210\u4E86\u4E00\u4E2A\u65E0\u5173\u7D27\u8981\u7684\u7EC6\u8282\u4FE1\u606F\u3002\u4E8E\u662F\uFF0C\u6240\u6709\u56DB\u79CD\u67B6\u6784\u65B9\u5F0F\u4E8B\u5B9E\u4E0A\u5E76\u6CA1\u6709\u4EFB\u4F55\u533A\u522B\uFF08\u53C2\u89C1\u56FE 34.7\uFF09\u3002</p></blockquote><p>Take a close look at the arrows between each of the types in Figure 34.7: They\u2019re all identical regardless of which architectural approach you\u2019re trying to adopt. Conceptually the approaches are very different, but syntactically they are identical. Furthermore, you could argue that when you make all of the types public, what you really have are just four ways to describe a traditional horizontally layered architecture. This is a neat trick, and of course nobody would ever make all of their Java types public. Except when they do. And I\u2019ve seen it.</p><blockquote><p>\u6211\u4EEC\u518D\u8BE6\u7EC6\u770B\u4E00\u4E0B\u56FE 34.7 \u4E2D\u5404\u4E2A\u7C7B\u4E4B\u95F4\u7684\u7BAD\u5934\uFF1A\u4E0D\u8BBA\u91C7\u7528\u54EA\u79CD\u67B6\u6784\u8BBE\u8BA1\u98CE\u683C\uFF0C\u5B83\u4EEC\u7684\u6307\u5411\u90FD\u662F\u4E00\u81F4\u7684\u3002\u867D\u7136\u6982\u5FF5\u4E0D\u540C\uFF0C\u4F46\u662F\u8BED\u6CD5\u4E0A\u90FD\u662F\u4E00\u81F4\u7684\u3002\u66F4\u8FDB\u4E00\u6B65\u8BF4\uFF0C\u5982\u679C\u6240\u6709\u7684\u7C7B\u90FD\u662F public \u7684\uFF0C\u90A3\u4E48\u5176\u5B9E\u6211\u4EEC\u5C31\u662F\u5728\u7528\u56DB\u79CD\u4E0D\u540C\u7684\u65B9\u5F0F\u63CF\u8FF0\u4E00\u4E2A\u4F20\u7EDF\u7684\u5206\u5C42\u67B6\u6784\u8BBE\u8BA1\u65B9\u5F0F\u3002\u4F60\u4F1A\u8BF4\u5F53\u7136\u6CA1\u6709\u4EBA\u4F1A\u5C06\u6240\u6709\u7684 Java \u7C7B\u90FD\u8BBE\u7F6E\u4E3A public\uFF0C\u4F46\u662F\u76F8\u4FE1\u6211\uFF0C\u6211\u89C1\u8FC7\u3002</p></blockquote><p>The access modifiers in Java are not perfect,8 but ignoring them is just asking for trouble. The way Java types are placed into packages can actually make a huge difference to how accessible (or inaccessible) those types can be when Java\u2019s access modifiers are applied appropriately. If I bring the packages back and mark (by graphically fading) those types where the access modifier can be made more restrictive, the picture becomes pretty interesting (Figure 34.8).</p><blockquote><p>\u867D\u7136 Java \u4E2D\u7684\u8BBF\u95EE\u4FEE\u9970\u7B26\u5E76\u4E0D\u5B8C\u7F8E\uFF0C\u4F46\u662F\u5FFD\u7565\u5B83\u4EEC\u7684\u5B58\u5B58\u5C31\u662F\u5728\u81EA\u627E\u9EBB\u70E6\u3002Java \u7C7B\u4E0E\u5305\u7684\u7EC4\u7EC7\u5F62\u5F0F\u5176\u5B9E\u53EF\u4EE5\u5F88\u5927\u7A0B\u5EA6\u51B3\u5B9A\u8FD9\u4E2A\u7C7B\u7684\u53EF\u8BBF\u95EE\u6027\uFF08\u6216\u8005\u4E0D\u53EF\u8BBF\u95EE\u6027\uFF09\u3002\u5982\u679C\u6211\u4EEC\u5C06\u5305\u7684\u6982\u5FF5\u5F15\u5165\u8FD9\u5E45\u56FE\uFF0C\u540C\u65F6\u6807\u8BB0\uFF08\u865A\u5316\u7684\u5F62\u5F0F\u5C55\u793A\uFF09\u5E94\u7528\u5230\u8BBF\u95EE\u63A7\u5236\u7B26\u7684\u5730\u65B9\uFF0C\u8FD9\u4E2A\u56FE\u5C31\u5F88\u6709\u610F\u601D\u4E86\uFF08\u53C2\u89C1\u56FE 34.8\uFF09\u3002</p></blockquote>',16),C=t("All four architectural approaches are the same"),J=e("p",null,"Moving from left to right, in the \u201Cpackage by layer\u201D approach, the OrdersService and OrdersRepository interfaces need to be public, because they have inbound dependencies from classes outside of their defining package. In contrast, the implementation classes (OrdersServiceImpl and JdbcOrdersRepository) can be made more restrictive (package protected). Nobody needs to know about them; they are an implementation detail.",-1),x=e("blockquote",null,[e("p",null,"\u4ECE\u5DE6\u5411\u53F3\uFF0C\u5728 \u201C\u6309\u5C42\u5C01\u88C5\u201D\u65B9\u5F0F\u4E2D\uFF0COrderService \u4E0E OrderRepository \u9700\u8981 public \u4FEE\u9970\u7B26\uFF0C\u56E0\u4E3A\u5305\u5916\u7684\u7C7B\u9700\u8981\u4F9D\u8D56\u5B83\u4EEC\u3002\u7136\u800C\uFF0C\u5177\u4F53\u5B9E\u73B0\u7C7B\uFF08OrderServicelmpl \u548C JdbcOrdersRepository\uFF09\u5219\u53EF\u4EE5\u8BBE\u7F6E\u66F4\u7EC6\u81F4\u7684\u8BBF\u95EE\u6743\u9650\uFF08\u5305\u8303\u56F4\u5185\u7684 protected\uFF09\u3002\u4E0D\u9700\u8981\u6709\u4EBA\u4F9D\u8D56\u5B83\u4EEC\uFF0C\u5B83\u4EEC\u662F\u5177\u4F53\u7684\u5B9E\u73B0\u7EC6\u8282\u3002")],-1),R=e("p",null,"In the \u201Cpackage by feature\u201D approach, the OrdersController provides the sole entry point into the package, so everything else can be made package protected. The big caveat here is that nothing else in the code base, outside of this package, can access information related to orders unless they go through the controller. This may or may not be desirable.",-1),M=e("blockquote",null,[e("p",null,"\u5728\u201C\u6309\u529F\u80FD\u5C01\u88C5\u201D\u6A21\u5F0F\u4E2D\uFF0COrdersController \u662F\u6574\u4E2A\u5305\u7684\u5165\u53E3\uFF0C\u6240\u4EE5\u5176\u4ED6\u7684\u7C7B\u90FD\u53EF\u4EE5\u8BBE\u7F6E\u4E3A\u5305\u8303\u56F4\u5185\u7684 protected\u3002\u8FD9\u91CC\u7684\u4E00\u4E2A\u95EE\u9898\u662F\uFF0C\u4EE3\u7801\u5E93\u4E2D\u7684\u5176\u4ED6\u4EE3\u7801\u90FD\u5FC5\u987B\u901A\u8FC7\u63A7\u5236\u5668\u624D\u80FD\u8BBF\u95EE\u8BA2\u5355\u4FE1\u606F\u2014\u2014\u8FD9\u53EF\u80FD\u662F\u597D\u5904\uFF0C\u4E5F\u53EF\u80FD\u662F\u574F\u5904\uFF0C\u89C6\u5B9E\u9645\u60C5\u51B5\u800C\u5B9A\u3002")],-1),E=e("p",null,"In the ports and adapters approach, the OrdersService and Orders interfaces have inbound dependencies from other packages, so they need to be made public. Again, the implementation classes can be made package protected and dependency injected at runtime.",-1),P=e("blockquote",null,[e("p",null,"\u5728\u7AEF\u53E3\u4E0E\u9002\u914D\u5668\u6A21\u5F0F\u4E2D\uFF0COrderService \u4E0E Orders \u63A5\u53E3\u90FD\u6709\u6765\u81EA\u5305\u5916\u7684\u4F9D\u8D56\u5173\u7CFB\uFF0C\u6240\u4EE5\u9700\u8981 public \u4FEE\u9970\u7B26\u3002\u540C\u6837\uFF0C\u5B9E\u73B0\u7C7B\u53EF\u4EE5\u8BBE\u7F6E\u4E3A\u5305\u8303\u56F4\u5185 protected\uFF0C\u4F9D\u8D56\u5728\u8FD0\u884C\u65F6\u6CE8\u5165\u3002")],-1),L=t("Grayed-out types are where the access modifier can be made more restrictive"),N=r('<p>Finally, in the \u201Cpackage by component\u201D approach, the OrdersComponent interface has an inbound dependency from the controller, but everything else can be made package protected. The fewer public types you have, the smaller the number of potential dependencies. There\u2019s now no way9 that code outside this package can use the OrdersRepository interface or implementation directly, so we can rely on the compiler to enforce this architectural principle. You can do the same thing in .NET with the internal keyword, although you would need to create a separate assembly for every component.</p><blockquote><p>\u6700\u540E\u3001\u5728\u201C\u7EC4\u4EF6\u201D\u5C01\u88C5\u6A21\u5F0F\u4E2D\uFF0COrdersComponet \u63A5\u53E3\u6709\u6765\u81EA Controller \u7684\u4F9D\u8D56\u5173\u7CFB\uFF0C\u4F46\u662F\u5176\u4ED6\u7C7B\u90FD\u53EF\u4EE5\u8BBE\u7F6E\u4E3A\u5305 protected\u3002Public \u7C7B\u578B\u8D8A\u5C11\uFF0C\u6F5C\u5728\u7684\u4F9D\u8D56\u5173\u7CFB\u5C31\u8D8A\u5C11\u3002\u73B0\u5728\u5305\u5916\u4EE3\u7801\u5C31\u4E0D\u80FD\u518D\u76F4\u63A5\u4F7F\u7528 OrdersRepository \u63A5\u53E3\u6216\u8005\u5177\u5BF9\u5E94\u7684\u5B9E\u73B0\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u5229\u7528\u7F16\u8BD1\u5668\u6765\u7EF4\u62A4\u67B6\u6784\u8BBE\u8BA1\u539F\u5219\u4E86\u3002\u5728 .Net \u8BED\u8A00\u4E2D\uFF0C\u6211\u4EEC\u53EF\u4EE5\u7528 internal \u5173\u952E\u8BCD\u8FBE\u5230\u4E00\u6837\u7684\u76EE\u7684\uFF0C\u7136\u800C\u6211\u4EEC\u9700\u8981\u7ED9\u6BCF\u4E2A\u7EC4\u4EF6\u521B\u5EFA\u4E00\u4E2A\u5355\u72EC\u7684 assembly\u3002</p></blockquote><p>Just to be absolutely clear, what I\u2019ve described here relates to a monolithic application, where all of the code resides in a single source code tree. If you are building such an application (and many people are), I would certainly encourage you to lean on the compiler to enforce your architectural principles, rather than relying on self-discipline and post-compilation tooling.</p><blockquote><p>\u518D\u6F84\u6E05\u4E00\u70B9\uFF0C\u8FD9\u91CC\u63CF\u8FF0\u7684\u5168\u90FD\u548C\u5355\u4F53\u7A0B\u5E8F\u6709\u5173\uFF0C\u6240\u6709\u4EE3\u7801\u90FD\u5B58\u653E\u5728\u540C\u4E00\u4E2A\u4EE3\u7801\u6811\u4E0B\u3002\u5982\u679C\u4F60\u5728\u6784\u5EFA\u8FD9\u79CD\u7A0B\u5E8F\uFF08\u5927\u90E8\u5206\u7A0B\u5E8F\u90FD\u662F\u5982\u6B64\uFF09\uFF0C\u90A3\u4E48\u6211\u5F3A\u70C8\u5EFA\u8BAE\u5229\u7528\u7F16\u8BD1\u5668\u6765\u7EF4\u62A4\u67B6\u6784\u8BBE\u8BA1\u539F\u7406\uFF0C\u800C\u4E0D\u8981\u4F9D\u8D56\u4E2A\u4EBA\u81EA\u5F8B\u548C\u7F16\u8BD1\u8FC7\u7A0B\u4E4B\u540E\u7684\u5DE5\u5177\u3002</p></blockquote><h2 id="other-decoupling-modes-\u5176\u4ED6\u7684\u89E3\u8026\u5408\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#other-decoupling-modes-\u5176\u4ED6\u7684\u89E3\u8026\u5408\u6A21\u5F0F" aria-hidden="true">#</a> OTHER DECOUPLING MODES \u5176\u4ED6\u7684\u89E3\u8026\u5408\u6A21\u5F0F</h2><p>In addition to the programming language you\u2019re using, there are often other ways that you can decouple your source code dependencies. With Java, you have module frameworks like OSGi and the new Java 9 module system. With module systems, when used properly, you can make a distinction between types that are public and types that are published. For example, you could create an Orders module where all of the types are marked as public, but publish only a small subset of those types for external consumption. It\u2019s been a long time coming, but I\u2019m enthusiastic that the Java 9 module system will give us another tool to build better software, and spark people\u2019s interest in design thinking once again.</p><blockquote><p>\u9664\u7F16\u7A0B\u8BED\u8A00\u81EA\u5E26\u7684\u5DE5\u5177\u4E4B\u5916\uFF0C\u901A\u5E38\u8FD8\u6709\u5176\u4ED6\u65B9\u5F0F\u53EF\u4EE5\u8FDB\u4E00\u6B65\u89E3\u8026\u6E90\u4EE3\u7801\u7EA7\u522B\u7684\u4F9D\u8D56\u5173\u7CFB\u3002\u5728 Java \u8BED\u8A00\u4E2D\uFF0C\u6709\u6A21\u5757\u5316\u6846\u67B6 OSGi\uFF0C\u4EE5\u53CA\u6700\u65B0\u7684 Java 9 \u6A21\u5757\u7CFB\u7EDF\u3002\u6B63\u786E\u5229\u7528\u6A21\u5757\u7CFB\u7EDF\uFF0C\u6211\u4EEC\u53EF\u4EE5\u8FDB\u4E00\u6B65\u533A\u5206 public \u7C7B\u578B\u548C\u5BF9\u5916\u53D1\u5E03\u7684\u7C7B\u578B\u3002\u4F8B\u5982\uFF0C\u6211\u4EEC\u53EF\u4EE5\u521B\u5EFA\u4E00\u4E2A Orders \u6A21\u5757\u3002\u5C06\u6240\u6709\u7684\u7C7B\u578B\u6807\u8BB0\u4E3A public\uFF0C\u4F46\u4EC5\u4EC5\u516C\u5E03\u4E00\u5C0F\u90E8\u5206\u7C7B\u4F9B\u5916\u90E8\u8C03\u7528\u3002\u867D\u7136\u8017\u65F6\u5F88\u4E45\uFF0C\u4F46\u662F\u6211\u5341\u5206\u671F\u5F85 Java 9 \u7684\u6A21\u5757\u7CFB\u7EDF\uFF0C\u5B83\u80FD\u63D0\u4F9B\u6784\u5EFA\u66F4\u597D\u8F6F\u4EF6\u7684\u53E6\u4E00\u5957\u5DE5\u5177\uFF0C\u5E0C\u671B\u80FD\u591F\u518D\u6B21\u70B9\u71C3\u4EBA\u4EEC\u601D\u8003\u8BBE\u8BA1\u7684\u70ED\u60C5\u3002</p></blockquote><p>Another option is to decouple your dependencies at the source code level, by splitting code across different source code trees. If we take the ports and adapters example, we could have three source code trees:</p><blockquote><p>\u53E6\u5916\u4E00\u4E2A\u9009\u62E9\u662F\u5C06\u4EE3\u7801\u5206\u6563\u5230\u4E0D\u540C\u7684\u4EE3\u7801\u6811\u4E2D\uFF0C\u4EE5\u4ECE\u6E90\u4EE3\u7801\u7EA7\u522B\u89E3\u8026\u4F9D\u8D56\u5173\u7CFB\u3002\u4EE5\u7AEF\u53E3\u548C\u9002\u914D\u5668\u65B9\u5F0F\u4E3A\u4F8B\uFF0C\u6211\u4EEC\u4F1A\u6709\u4E09\u4E2A\u4EE3\u7801\u6811\uFF1A</p></blockquote><ul><li>The source code for the business and domain (i.e., everything that is independent of technology and framework choices): OrdersService, OrdersServiceImpl, and Orders</li><li>The source code for the web: OrdersController</li><li>The source code for the data persistence: JdbcOrdersRepository</li></ul><hr><blockquote><ul><li>\u4E1A\u52A1\u4EE3\u7801\uFF08\u6240\u6709\u6280\u672F\u548C\u6846\u67B6\u65E0\u5173\u7684\u4EE3\u7801\uFF09\uFF1AOrdersService\u3001OrdersServiceImpl \u4EE5\u53CA Orders\u3002</li><li>Web \u6E90\u4EE3\u7801\uFF1AOrdersController\u3002</li><li>\u6301\u4E45\u5316\u6E90\u4EE3\u7801\uFF1AJdbcOrdersRepository\u3002</li></ul></blockquote><p>The latter two source code trees have a compile-time dependency on the business and domain code, which itself doesn\u2019t know anything about the web or the data persistence code. From an implementation perspective, you can do this by configuring separate modules or projects in your build tool (e.g., Maven, Gradle, MSBuild). Ideally you would repeat this pattern, having a separate source code tree for each and every component in your application. This is very much an idealistic solution, though, because there are real-world performance, complexity, and maintenance issues associated with breaking up your source code in this way.</p><blockquote><p>\u540E\u9762\u4E24\u4E2A\u6E90\u4EE3\u7801\u6811\u5BF9\u4E1A\u52A1\u4EE3\u7801\u6709\u7F16\u8BD1\u671F\u4F9D\u8D56\u5173\u7CFB\uFF0C\u800C\u4E1A\u52A1\u4EE3\u7801\u5219\u5BF9 Web \u548C\u6570\u636E\u6301\u4E45\u6BEB\u65E0\u6240\u77E5\u3002\u4ECE\u5B9E\u73B0\u89D2\u5EA6\u6765\u770B\uFF0C\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7\u5C06\u8FD9\u4E9B\u4EE3\u7801\u5728\u6784\u5EFA\u5DE5\u5177\u4E2D\u7EC4\u7EC7\u6210\u4E0D\u540C\u7684\u6A21\u5757\u6216\u8005\u9879\u76EE\uFF08\u4F8B\u5982 Maven&gt; Gradle&gt; MSBUILD \u7B49\uFF09\u6765\u8FBE\u5230\u76EE\u7684\u3002\u7406\u60F3\u60C5\u51B5\u4E0B\uFF0C\u6211\u4EEC\u53EF\u4EE5\u7528\u8FD9\u79CD\u6A21\u5F0F\u5C06\u6240\u6709\u7EC4\u4EF6\u90FD\u5212\u5206\u6210\u4E0D\u540C\u7684\u9879\u76EE\u3002\u7136\u800C\uFF0C\u8FD9\u6709\u70B9\u592A\u7406\u60F3\u5316\u4E86\uFF0C\u56E0\u4E3A\u62C6\u5206\u4EE3\u7801\u5E93\u7ECF\u5E38\u4F1A\u5E26\u6765\u6027\u80FD\u3001\u590D\u6742\u5EA6\u548C\u7EF4\u62A4\u6027\u65B9\u9762\u7684\u95EE\u9898\u3002</p></blockquote><p>A simpler approach that some people follow for their ports and adapters code is to have just two source code trees:</p><blockquote><p>\u6709\u4E9B\u4EBA\u91C7\u7528\u4E00\u4E2A\u7A0D\u5FAE\u7B80\u5355\u7684\u7EC4\u7EC7\u65B9\u5F0F\uFF0C\u4EC5\u4F7F\u7528\u4E24\u4E2A\u4EE3\u7801\u6811\uFF1A</p></blockquote><ul><li>Domain code (the \u201Cinside\u201D)</li><li>Infrastructure code (the \u201Coutside\u201D)</li></ul><hr><blockquote><ul><li>\u4E1A\u52A1\uFF08Domain\uFF09\u4EE3\u7801\uFF08\u5185\u90E8\uFF09</li><li>\u57FA\u7840\u8BBE\u65BD\uFF08Infrastructure\uFF09\u4EE3\u7801\uFF08\u5916\u90E8\uFF09</li></ul></blockquote><p>This maps on nicely to the diagram (Figure 34.9) that many people use to summarize the ports and adapters architecture, and there is a compile-time dependency from the infrastructure to the domain.</p><blockquote><p>\u8FD9\u4E0E\u56FE 34.9 \u5B8C\u7F8E\u5BF9\u5E94\uFF0C\u5F88\u591A\u4EBA\u90FD\u7528\u8FD9\u4E2A\u65B9\u5F0F\u6765\u7B80\u5316\u5BF9\u7AEF\u53E3\u548C\u9002\u914D\u5668\u67B6\u6784\u7684\u63CF\u8FF0\u3002\u57FA\u7840\u8BBE\u65BD\u90E8\u5206\u5BF9\u4E1A\u52A1\u4EE3\u7801\u6709\u4E00\u4E2A\u7F16\u8BD1\u671F\u7684\u4F9D\u8D56\u5173\u7CFB\u3002</p></blockquote>',21),W=t("Domain and infrastructure code"),z=e("p",null,"This approach to organizing source code will also work, but be aware of the potential trade-off. It\u2019s what I call the \u201CP\xE9riph\xE9rique anti-pattern of ports and adapters.\u201D The city of Paris, France, has a ring road called the Boulevard P\xE9riph\xE9rique, which allows you to circumnavigate Paris without entering the complexities of the city. Having all of your infrastructure code in a single source code tree means that it\u2019s potentially possible for infrastructure code in one area of your application (e.g., a web controller) to directly call code in another area of your application (e.g., a database repository), without navigating through the domain. This is especially true if you\u2019ve forgotten to apply appropriate access modifiers to that code.",-1),F=e("blockquote",null,[e("p",null,"\u8FD9\u79CD\u4EE3\u7801\u7EC4\u7EC7\u65B9\u5F0F\u662F\u53EF\u884C\u7684\uFF0C\u4F46\u662F\u9700\u8981\u989D\u5916\u6CE8\u610F\u968F\u4E4B\u800C\u6765\u7684\u95EE\u9898\u3002\u6211\u79F0\u8FD9\u4E2A\u95EE\u9898\u4E3A\u201C\u7AEF\u53E3\u4E0E\u9002\u914D\u5668\u6A21\u5F0F\u4E2D\u7684 Peripherique \u53CD\u6A21\u5F0F\u201D\u3002\u6CD5\u56FD\u5DF4\u9ECE\u6709\u4E00\u6761\u73AF\u5F62\u516C\u8DEF\uFF0C\u540D\u5B57\u662F Peripherique \u5927\u9053\u3002\u8FD9\u6761\u5927\u9053\u5141\u8BB8\u8F66\u8F86\u73AF\u7ED5\u5DF4\u9ECE\u800C\u4E0D\u9700\u8981\u8FDB\u5165\u793E\u533A\u3002\u540C\u6837\u7684\uFF0C\u5C06\u6240\u6709\u7684\u57FA\u7840\u8BBE\u65BD\u4EE3\u7801\u653E\u5728\u540C\u4E00\u4E2A\u6E90\u4EE3\u7801\u6811\u4E2D\uFF0C\u5C31\u6709\u53EF\u80FD\u4F7F\u5F97\u5E94\u7528\u4E2D\u7684\u4E00\u4E2A\u533A\u57DF\u7684\u57FA\u7840\u8BBE\u65BD\u4EE3\u7801\uFF08Web \u63A7\u5236\u5668\uFF09\u76F4\u63A5\u8C03\u7528\u53E6\u5916\u4E00\u4E2A\u533A\u57DF\u7684\u4EE3\u7801\uFF08\u6570\u636E\u5E93\u8BBF\u95EE\uFF09\uFF0C\u800C\u4E0D\u7ECF\u8FC7\u9886\u57DF\u4EE3\u7801\u3002\u5982\u679C\u6CA1\u6709\u8BBE\u7F6E\u6B63\u786E\u7684\u8BBF\u95EE\u4FEE\u9970\u7B26\uFF0C\u5C31\u66F4\u662F\u5982\u6B64\u4E86\u3002")],-1),U=e("h2",{id:"conclusion-the-missing-advice-\u672C\u7AE0\u5C0F\u7ED3-\u672C\u4E66\u62FE\u9057",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#conclusion-the-missing-advice-\u672C\u7AE0\u5C0F\u7ED3-\u672C\u4E66\u62FE\u9057","aria-hidden":"true"},"#"),t(" CONCLUSION: THE MISSING ADVICE \u672C\u7AE0\u5C0F\u7ED3\uFF1A\u672C\u4E66\u62FE\u9057")],-1),B=e("p",null,"The whole point of this chapter is to highlight that your best design intentions can be destroyed in a flash if you don\u2019t consider the intricacies of the implementation strategy. Think about how to map your desired design on to code structures, how to organize that code, and which decoupling modes to apply during runtime and compile-time. Leave options open where applicable, but be pragmatic, and take into consideration the size of your team, their skill level, and the complexity of the solution in conjunction with your time and budgetary constraints. Also think about using your compiler to help you enforce your chosen architectural style, and watch out for coupling in other areas, such as data models. The devil is in the implementation details.",-1),j=e("blockquote",null,[e("p",null,"\u8FD9\u4E00\u7AE0\u7684\u4E2D\u5FC3\u601D\u60F3\u5C31\u662F\uFF0C\u5982\u679C\u4E0D\u8003\u8651\u5177\u4F53\u5B9E\u73B0\u7EC6\u8282\uFF0C\u518D\u597D\u7684\u8BBE\u8BA1\u4E5F\u65E0\u6CD5\u957F\u4E45\u3002\u5FC5\u987B\u8981\u5C06\u8BBE\u8BA1\u6620\u5C04\u5230\u5BF9\u5E94\u7684\u4EE3\u7801\u7ED3\u6784\u4E0A\uFF0C\u8003\u8651\u5982\u4F55\u7EC4\u7EC7\u4EE3\u7801\u6811\uFF0C\u4EE5\u53CA\u5728\u7F16\u8BD1\u671F\u548C\u8FD0\u884C\u671F\u91C7\u7528\u54EA\u79CD\u89E3\u8026\u5408\u7684\u6A21\u5F0F\u3002\u4FDD\u6301\u5F00\u653E\uFF0C\u4F46\u662F\u4E00\u5B9A\u8981\u52A1\u5B9E\uFF0C\u540C\u65F6\u8981\u8003\u8651\u5230\u56E2\u961F\u7684\u5927\u5C0F\u3001\u6280\u672F\u6C34\u5E73\uFF0C\u4EE5\u53CA\u5BF9\u5E94\u7684\u65F6\u95F4\u548C\u9884\u7B97\u9650\u5236\u3002\u6700\u597D\u80FD\u5229\u7528\u7F16\u8BD1\u5668\u6765\u7EF4\u62A4\u6240\u9009\u7684\u7CFB\u7EDF\u67B6\u6784\u8BBE\u8BA1\u98CE\u683C\uFF0C\u5C0F\u5FC3\u9632\u8303\u6765\u81EA\u5176\u4ED6\u5730\u65B9\u7684\u8026\u5408\u6A21\u5F0F\uFF0C\u4F8B\u5982\u6570\u636E\u7ED3\u6784\u3002\u6240\u6709\u7684\u5B9E\u73B0\u7EC6\u8282\u90FD\u662F\u5173\u952E\u7684\uFF01")],-1);function D(G,V){const o=l("Figures");return n(),c("div",null,[d,a(o,{figure:"34-1"},{default:i(()=>[p]),_:1}),u,a(o,{figure:"34-2"},{default:i(()=>[m]),_:1}),b,y,g,a(o,{figure:"34-3"},{default:i(()=>[f]),_:1}),w,k,v,q,a(o,{figure:"34-4"},{default:i(()=>[I]),_:1}),_,a(o,{figure:"34-5"},{default:i(()=>[O]),_:1}),T,a(o,{figure:"34-6"},{default:i(()=>[S]),_:1}),A,a(o,{figure:"34-7"},{default:i(()=>[C]),_:1}),J,x,R,M,E,P,a(o,{figure:"34-8"},{default:i(()=>[L]),_:1}),N,a(o,{figure:"34-9"},{default:i(()=>[W]),_:1}),z,F,U,B,j])}const K=s(h,[["render",D],["__file","ch34.html.vue"]]);export{K as default};
