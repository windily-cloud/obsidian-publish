import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as h,a as o,w as n,e as a,b as e,r as c,d as r}from"./app.887b133c.js";const l={},p=a('<h1 id="chap8-ocp-the-open-closed-principle-ocp-\u5F00\u95ED\u539F\u5219" tabindex="-1"><a class="header-anchor" href="#chap8-ocp-the-open-closed-principle-ocp-\u5F00\u95ED\u539F\u5219" aria-hidden="true">#</a> Chap8. OCP: THE OPEN-CLOSED PRINCIPLE OCP\uFF1A\u5F00\u95ED\u539F\u5219</h1><p>The Open-Closed Principle (OCP) was coined in 1988 by Bertrand Meyer.1 It says:</p><blockquote><p>\u5F00\u95ED\u539F\u5219\uFF08OCP\uFF09\u662F Bertrand Meyer \u5728 1988 \u5E74\u63D0\u51FA\u7684\uFF0C\u8BE5\u8BBE\u8BA1\u539F\u5219\u8BA4\u4E3A\uFF1A</p></blockquote><p>A software artifact should be open for extension but closed for modification.</p><blockquote><p>\u8BBE\u8BA1\u826F\u597D\u7684\u8BA1\u7B97\u673A\u8F6F\u4EF6\u5E94\u8BE5\u6613\u4E8E\u6269\u5C55\uFF0C\u540C\u65F6\u6297\u62D2\u4FEE\u6539\u3002</p></blockquote><p>In other words, the behavior of a software artifact ought to be extendible, without having to modify that artifact.</p><blockquote><p>\u6362\u53E5\u8BDD\u8BF4\uFF0C\u4E00\u4E2A\u8BBE\u8BA1\u826F\u597D\u7684\u8BA1\u7B97\u673A\u7CFB\u7EDF\u5E94\u8BE5\u5728\u4E0D\u9700\u8981\u4FEE\u6539\u7684\u524D\u63D0\u4E0B\u5C31\u53EF\u4EE5\u8F7B\u6613\u88AB\u6269\u5C55\u3002</p></blockquote><p>This, of course, is the most fundamental reason that we study software architecture. Clearly, if simple extensions to the requirements force massive changes to the software, then the architects of that software system have engaged in a spectacular failure.</p><blockquote><p>\u5176\u5B9E\u8FD9\u4E5F\u662F\u6211\u4EEC\u7814\u7A76\u8F6F\u4EF6\u67B6\u6784\u7684\u6839\u672C\u76EE\u7684\u3002\u5982\u679C\u5BF9\u539F\u59CB\u9700\u6C42\u7684\u5C0F\u5C0F\u5EF6\u4F38\u5C31\u9700\u8981\u5BF9\u539F\u6709\u7684\u8F6F\u4EF6\u7CFB\u7EDF\u8FDB\u884C\u5927\u5E45\u4FEE\u6539\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u7CFB\u7EDF\u7684\u67B6\u6784\u8BBE\u8BA1\u663E\u7136\u662F\u5931\u8D25\u7684\u3002</p></blockquote><p>Most students of software design recognize the OCP as a principle that guides them in the design of classes and modules. But the principle takes on even greater significance when we consider the level of architectural components.</p><blockquote><p>\u5C3D\u7BA1\u5927\u90E8\u5206\u8F6F\u4EF6\u8BBE\u8BA1\u5E08\u90FD\u5DF2\u7ECF\u8BA4\u53EF\u4E86 OCP \u662F\u8BBE\u8BA1\u7C7B\u4E0E\u6A21\u5757\u65F6\u7684\u91CD\u8981\u539F\u5219\uFF0C\u4F46\u662F\u5728\u8F6F\u4EF6\u67B6\u6784\u5C42\u9762\uFF0C\u8FD9\u9879\u539F\u5219\u7684\u610F\u4E49\u5219\u66F4\u4E3A\u91CD\u5927\u3002</p></blockquote><p>A thought experiment will make this clear.</p><blockquote><p>\u4E0B\u9762\uFF0C\u8BA9\u6211\u4EEC\u7528\u4E00\u4E2A\u601D\u60F3\u5B9E\u9A8C\u6765\u505A\u4E00\u4E9B\u8BF4\u660E\u3002</p></blockquote><h2 id="a-thought-experiment-\u601D\u60F3\u5B9E\u9A8C" tabindex="-1"><a class="header-anchor" href="#a-thought-experiment-\u601D\u60F3\u5B9E\u9A8C" aria-hidden="true">#</a> A THOUGHT EXPERIMENT \u601D\u60F3\u5B9E\u9A8C</h2><p>Imagine, for a moment, that we have a system that displays a financial summary on a web page. The data on the page is scrollable, and negative numbers are rendered in red.</p><blockquote><p>\u5047\u8BBE\u6211\u4EEC\u73B0\u5728\u8981\u8BBE\u8BA1\u4E00\u4E2A\u5728 Web \u9875\u9762\u4E0A\u5C55\u793A\u8D22\u52A1\u6570\u636E\u7684\u7CFB\u7EDF\uFF0C\u9875\u9762\u4E0A\u7684\u6570\u636E\u8981\u53EF\u4EE5\u6EDA\u52A8\u663E\u793A\uFF0C\u5176\u4E2D\u8D1F\u503C\u5E94\u663E\u793A\u4E3A\u7EA2\u8272\u3002</p></blockquote><p>Now imagine that the stakeholders ask that this same information be turned into a report to be printed on a black-and-white printer. The report should be properly paginated, with appropriate page headers, page footers, and column labels. Negative numbers should be surrounded by parentheses.</p><blockquote><p>\u63A5\u4E0B\u6765\uFF0C\u8BE5\u7CFB\u7EDF\u7684\u6240\u6709\u8005\u53C8\u8981\u6C42\u540C\u6837\u7684\u6570\u636E\u9700\u8981\u5F62\u6210\u4E00\u4E2A\u62A5\u8868\uFF0C\u8BE5\u62A5\u8868\u8981\u80FD\u7528\u9ED1\u767D\u6253\u5370\u673A\u6253\u5370\uFF0C\u5E76\u4E14\u5176\u62A5\u8868\u683C\u5F0F\u8981\u5F97\u5230\u5408\u7406\u5206\u9875\uFF0C\u6BCF\u9875\u90FD\u8981\u5305\u542B\u9875\u5934\u3001\u9875\u5C3E\u53CA\u680F\u76EE\u540D\u3002\u540C\u65F6\uFF0C\u8D1F\u503C\u5E94\u8BE5\u4EE5\u62EC\u53F7\u8868\u793A\u3002</p></blockquote><p>Clearly, some new code must be written. But how much old code will have to change?</p><blockquote><p>\u663E\u7136\uFF0C\u6211\u4EEC\u9700\u8981\u589E\u52A0\u4E00\u4E9B\u4EE3\u7801\u6765\u5B8C\u6210\u8FD9\u4E2A\u8981\u6C42\u3002\u4F46\u5728\u8FD9\u91CC\u6211\u4EEC\u66F4\u5173\u6CE8\u7684\u95EE\u9898\u662F\uFF0C\u6EE1\u8DB3\u65B0\u7684\u8981\u6C42\u9700\u8981\u66F4\u6539\u591A\u5C11\u65E7\u4EE3\u7801\u3002</p></blockquote><p>A good software architecture would reduce the amount of changed code to the barest minimum. Ideally, zero.</p><blockquote><p>\u4E00\u4E2A\u597D\u7684\u8F6F\u4EF6\u67B6\u6784\u8BBE\u8BA1\u5E08\u4F1A\u52AA\u529B\u5C06\u65E7\u4EE3\u7801\u7684\u4FEE\u6539\u9700\u6C42\u91CF\u964D\u81F3\u6700\u5C0F\uFF0C\u751A\u81F3\u4E3A 0\u3002</p></blockquote><p>How? By properly separating the things that change for different reasons (the Single Responsibility Principle), and then organizing the dependencies between those things properly (the Dependency Inversion Principle).</p><blockquote><p>\u4F46\u8BE5\u5982\u4F55\u5B9E\u73B0\u8FD9\u4E00\u70B9\u5462\uFF1F\u6211\u4EEC\u53EF\u4EE5\u5148\u5C06\u6EE1\u8DB3\u4E0D\u540C\u9700\u6C42\u7684\u4EE3\u7801\u5206\u7EC4\uFF08\u5373 SRP\uFF09\uFF0C\u7136\u540E\u518D\u6765\u8C03\u6574\u8FD9\u4E9B\u5206\u7EC4\u4E4B\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\uFF08\u5373 DIP\uFF09\u3002</p></blockquote><p>By applying the SRP, we might come up with the data-flow view shown in Figure 8.1. Some analysis procedure inspects the financial data and produces reportable data, which is then formatted appropriately by the two reporter processes.</p><blockquote><p>\u5229\u7528 SRP\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6309\u56FE 8.1 \u4E2D\u6240\u5C55\u793A\u7684\u65B9\u5F0F\u6765\u5904\u7406\u6570\u636E\u6D41\u3002\u5373\u5148\u7528\u4E00\u6BB5\u5206\u6790\u7A0B\u5E8F\u5904\u7406\u539F\u59CB\u7684\u8D22\u52A1\u6570\u636E\uFF0C\u4EE5\u5F62\u6210\u62A5\u8868\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u6700\u540E\u518D\u7528\u4E24\u4E2A\u4E0D\u540C\u7684\u62A5\u8868\u751F\u6210\u5668\u6765\u4EA7\u751F\u62A5\u8868\u3002</p></blockquote>',26),d=r("Applying the SRP"),u=e("p",null,"The essential insight here is that generating the report involves two separate responsibilities: the calculation of the reported data, and the presentation of that data into a web- and printer-friendly form.",-1),b=e("blockquote",null,[e("p",null,"\u8FD9\u91CC\u7684\u6838\u5FC3\u5C31\u662F\u5C06\u5E94\u7528\u751F\u6210\u62A5\u8868\u7684\u8FC7\u7A0B\u62C6\u6210\u4E24\u4E2A\u4E0D\u540C\u7684\u64CD\u4F5C\u3002\u5373\u5148\u8BA1\u7B97\u51FA\u62A5\u8868\u6570\u636E\uFF0C\u518D\u751F\u6210\u5177\u4F53\u7684\u5C55\u793A\u62A5\u8868\uFF08\u5206\u522B\u4EE5\u7F51\u9875\u53CA\u7EB8\u8D28\u7684\u5F62\u5F0F\u5C55\u793A\uFF09\u3002")],-1),m=e("p",null,"Having made this separation, we need to organize the source code dependencies to ensure that changes to one of those responsibilities do not cause changes in the other. Also, the new organization should ensure that the behavior can be extended without undo modification.",-1),g=e("blockquote",null,[e("p",null,"\u63A5\u4E0B\u6765\uFF0C\u6211\u4EEC\u5C31\u8BE5\u4FEE\u6539\u5176\u6E90\u4EE3\u7801\u4E4B\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\u4E86\u3002\u8FD9\u6837\u505A\u7684\u76EE\u7684\u662F\u4FDD\u8BC1\u5176\u4E2D\u4E00\u4E2A\u64CD\u4F5C\u88AB\u4FEE\u6539\u4E4B\u540E\u4E0D\u4F1A\u5F71\u54CD\u5230\u53E6\u5916\u4E00\u4E2A\u64CD\u4F5C\u3002\u540C\u65F6\uFF0C\u6211\u4EEC\u6240\u6784\u5EFA\u7684\u65B0\u7684\u7EC4\u7EC7\u5F62\u5F0F\u5E94\u8BE5\u4FDD\u8BC1\u8BE5\u7A0B\u5E8F\u540E\u7EED\u5728\u884C\u4E3A\u4E0A\u7684\u6269\u5C55\u90FD\u65E0\u987B\u4FEE\u6539\u73B0\u6709\u4EE3\u7801\u3002")],-1),f=e("p",null,"We accomplish this by partitioning the processes into classes, and separating those classes into components, as shown by the double lines in the diagram in Figure 8.2. In this figure, the component at the upper left is the Controller. At the upper right, we have the Interactor. At the lower right, there is the Database. Finally, at the lower left, there are four components that represent the Presenters and the Views.",-1),w=e("blockquote",null,[e("p",null,"\u5728\u5177\u4F53\u5B9E\u73B0\u4E0A\uFF0C\u6211\u4EEC\u4F1A\u5C06\u6574\u4E2A\u7A0B\u5E8F\u8FDB\u7A0B\u5212\u5206\u6210\u4E00\u7CFB\u5217\u7684\u7C7B\uFF0C\u7136\u540E\u518D\u5C06\u8FD9\u4E9B\u7C7B\u5206\u5272\u6210\u4E0D\u540C\u7684\u7EC4\u4EF6\u3002\u4E0B\u9762\uFF0C\u6211\u4EEC\u7528\u56FE 8.2 \u4E2D\u7684\u90A3\u4E9B\u53CC\u7EBF\u6846\u6765\u5177\u4F53\u63CF\u8FF0\u4E00\u4E0B\u6574\u4E2A\u5B9E\u73B0\u3002\u5728\u8FD9\u4E2A\u56FE\u4E2D\uFF0C\u5DE6\u4E0A\u89D2\u7684\u7EC4\u4EF6\u662F Controller\uFF0C\u53F3\u4E0A\u89D2\u662F Interactor\uFF0C\u53F3\u4E0B\u89D2\u662F Database\uFF0C\u5DE6\u4E0B\u89D2\u5219\u6709\u56DB\u4E2A\u7EC4\u4EF6\u5206\u522B\u7528\u4E8E\u4EE3\u8868\u4E0D\u540C\u7684 Presenter \u548C View\u3002")],-1),k=r("Partitioning the processes into classes and separating the classes into components"),y=a("<p>Classes marked with <code>&lt;I&gt;</code> are interfaces; those marked with <code>&lt;DS&gt;</code> are data structures. Open arrowheads are using relationships. Closed arrowheads are implements or inheritance relationships.</p><blockquote><p>\u5728\u56FE 8.2 \u4E2D\uFF0C\u7528 <code>&lt;I&gt;</code> \u6807\u8BB0\u7684\u7C7B\u4EE3\u8868\u63A5\u53E3\uFF0C\u7528 <code>&lt;DS&gt;</code> \u6807\u8BB0\u7684\u5219\u4EE3\u8868\u6570\u636E\u7ED3\u6784\uFF1B\u5F00\u653E\u7BAD\u5934\u6307\u4EE3\u7684\u662F\u4F7F\u7528\u5173\u7CFB\uFF0C\u95ED\u5408\u7BAD\u5934\u5219\u6307\u4EE3\u4E86\u5B9E\u73B0\u4E0E\u7EE7\u627F\u5173\u7CFB\u3002</p></blockquote><p>The first thing to notice is that all the dependencies are source code dependencies. An arrow pointing from class A to class B means that the source code of class A mentions the name of class B, but class B mentions nothing about class A. Thus, in Figure 8.2, FinancialDataMapper knows about FinancialDataGateway through an implements relationship, but FinancialDataGateway knows nothing at all about FinancialDataMapper.</p><blockquote><p>\u9996\u5148\uFF0C\u6211\u4EEC\u5728\u56FE 8.2 \u4E2D\u770B\u5230\u7684\u6240\u6709\u4F9D\u8D56\u5173\u7CFB\u90FD\u662F\u5176\u6E90\u4EE3\u7801\u4E2D\u5B58\u5728\u7684\u4F9D\u8D56\u5173\u7CFB\u3002\u8FD9\u91CC\uFF0C\u4ECE\u7C7B A \u6307\u5411\u7C7B B \u7684\u7BAD\u5934\u610F\u5473\u7740 A \u7684\u6E90\u4EE3\u7801\u4E2D\u6D89\u53CA\u4E86 B\uFF0C\u4F46 \u662F B \u7684\u6E90\u4EE3\u7801\u4E2D\u5E76\u4E0D\u6D89\u53CA A\u3002\u56E0\u6B64\u5728\u56FE 8.2 \u4E2D\uFF0CFinancialDataMapper \u5728\u5B9E\u73B0\u63A5\u53E3\u65F6\u9700\u8981\u77E5\u9053 FinancialDataGateway \u7684\u5B9E\u73B0\uFF0C\u800C FinancialDataGateway \u5219\u5B8C\u5168\u77E5\u9053 FinancialDataMapper \u7684\u5B9E\u73B0\u3002</p></blockquote><p>The next thing to notice is that each double line is crossed in one direction only. This means that all component relationships are unidirectional, as shown in the component graph in Figure 8.3. These arrows point toward the components that we want to protect from change.</p><blockquote><p>\u5176\u6B21\uFF0C\u8FD9\u91CC\u5F88\u91CD\u8981\u7684\u4E00\u70B9\u662F\u8FD9\u4E9B\u53CC\u7EBF\u6846\u7684\u8FB9\u754C\u90FD\u662F\u5355\u5411\u8DE8\u8D8A\u7684\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0C\u4E0A\u56FE\u4E2D\u6240\u6709\u7EC4\u4EF6\u4E4B\u95F4\u7684\u5173\u7CFB\u90FD\u662F\u5355\u5411\u4F9D\u8D56\u7684\uFF0C\u5982\u56FE 8.3 \u6240\u793A\uFF0C\u56FE\u4E2D\u7684\u7BAD\u5934\u90FD\u6307\u5411\u90A3\u4E9B\u6211\u4EEC\u4E0D\u60F3\u7ECF\u5E38\u66F4\u6539\u7684\u7EC4\u4EF6\u3002</p></blockquote>",6),q=r("The component relationships are unidirectional"),I=a('<p>Let me say that again: If component A should be protected from changes in component B, then component B should depend on component A.</p><blockquote><p>\u8BA9\u6211\u4EEC\u518D\u6765\u590D\u8FF0\u4E00\u4E0B\u8FD9\u91CC\u7684\u8BBE\u8BA1\u539F\u5219\uFF1A\u5982\u679C A \u7EC4\u4EF6\u4E0D\u60F3\u88AB B \u7EC4\u4EF6\u4E0A\u53D1\u751F\u7684\u4FEE\u6539\u6240\u5F71\u54CD\uFF0C\u90A3\u4E48\u5C31\u5E94\u8BE5\u8BA9 B \u7EC4\u4EF6\u4F9D\u8D56\u4E8E A \u7EC4\u4EF6\u3002</p></blockquote><p>We want to protect the Controller from changes in the Presenters. We want to protect the Presenters from changes in the Views. We want to protect the Interactor from changes in\u2014well, anything.</p><blockquote><p>\u6240\u4EE5\u73B0\u5728\u7684\u60C5\u51B5\u662F\uFF0C\u6211\u4EEC\u4E0D\u60F3\u8BA9\u53D1\u751F\u5728 Presenter \u4E0A\u7684\u4FEE\u6539\u5F71\u54CD\u5230 Controller\uFF0C\u4E5F\u4E0D\u60F3\u8BA9\u53D1\u751F\u5728 View \u4E0A\u7684\u4FEE\u6539\u5F71\u54CD\u5230 Presenter\u3002\u800C\u6700\u5173\u952E\u7684\u662F\uFF0C\u6211\u4EEC\u4E0D\u60F3\u8BA9\u4EFB\u4F55\u4FEE\u6539\u5F71\u54CD\u5230 Interactor\u3002</p></blockquote><p>The Interactor is in the position that best conforms to the OCP. Changes to the Database, or the Controller, or the Presenters, or the Views, will have no impact on the Interactor.</p><blockquote><p>\u5176\u4E2D\uFF0CInteractor \u7EC4\u4EF6\u662F\u6574\u4E2A\u7CFB\u7EDF\u4E2D\u6700\u7B26\u5408 OCP \u7684\u3002\u53D1\u751F\u5728 Database\u3001Controller\u3001Presenter \u751A\u81F3 View \u4E0A\u7684\u4FEE\u6539\u90FD\u4E0D\u4F1A\u5F71\u54CD\u5230 Interactor\u3002</p></blockquote><p>Why should the Interactor hold such a privileged position? Because it contains the business rules. The Interactor contains the highest-level policies of the application. All the other components are dealing with peripheral concerns. The Interactor deals with the central concern.</p><blockquote><p>\u4E3A\u4EC0\u4E48 Interactor \u4F1A\u88AB\u653E\u5728\u8FD9\u4E48\u91CD\u8981\u7684\u4F4D\u7F6E\u4E0A\u5462\uFF1F\u56E0\u4E3A\u5B83\u662F\u8BE5\u7A0B\u5E8F\u7684\u4E1A\u52A1\u903B\u8F91\u6240\u5728\u4E4B\u5904\uFF0CInteractor \u4E2D\u5305\u542B\u4E86\u5176\u6700\u9AD8\u5C42\u6B21\u7684\u5E94\u7528\u7B56\u7565\u3002\u5176\u4ED6\u7EC4\u4EF6\u90FD\u53EA\u662F\u8D1F\u8D23\u5904\u7406\u5468\u8FB9\u7684\u8F85\u52A9\u903B\u8F91\uFF0C\u53EA\u6709 Interactor \u624D\u662F\u6838\u5FC3\u7EC4\u4EF6\u3002</p></blockquote><p>Even though the Controller is peripheral to the Interactor, it is nevertheless central to the Presenters and Views. And while the Presenters might be peripheral to the Controller, they are central to the Views.</p><blockquote><p>\u867D\u7136 Controller \u7EC4\u4EF6\u53EA\u662F Interactor \u7684\u9644\u5C5E\u54C1\uFF0C\u4F46\u5B83\u5374\u662F Presenter \u548C View \u6240\u670D\u52A1\u7684\u6838\u5FC3\u3002\u540C\u6837\u7684\uFF0C\u867D\u7136 Presenter \u7EC4\u4EF6\u662F Controller \u7684\u9644\u5C5E\u54C1\uFF0C\u4F46\u5B83\u5374\u662F View \u6240\u670D\u52A1\u7684\u6838\u5FC3\u3002</p></blockquote><p>Notice how this creates a hierarchy of protection based on the notion of \u201Clevel.\u201D Interactors are the highest-level concept, so they are the most protected. Views are among the lowest-level concepts, so they are the least protected. Presenters are higher level than Views, but lower level than the Controller or the Interactor.</p><blockquote><p>\u53E6\u5916\u9700\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u8FD9\u91CC\u5229\u7528\u201C\u5C42\u7EA7\u201D\u8FD9\u4E2A\u6982\u5FF5\u521B\u9020\u4E86\u4E00\u7CFB\u5217\u4E0D\u540C\u7684\u4FDD\u62A4\u5C42\u7EA7\u3002\u8B6C\u5982\uFF0CInteractor \u662F\u6700\u9AD8\u5C42\u7684\u62BD\u8C61\uFF0C\u6240\u4EE5\u5B83\u88AB\u4FDD\u62A4\u5F97\u6700\u4E25\u5BC6\uFF0C\u800C Presenter \u6BD4 View \u65F6\u5C42\u7EA7\u9AD8\uFF0C\u4F46\u6BD4 Controller \u548C Interactor \u7684\u5C42\u7EA7\u4F4E\u3002</p></blockquote><p>This is how the OCP works at the architectural level. Architects separate functionality based on how, why, and when it changes, and then organize that separated functionality into a hierarchy of components. Higher-level components in that hierarchy are protected from the changes made to lower-level components.</p><blockquote><p>\u4EE5\u4E0A\u5C31\u662F\u6211\u4EEC\u5728\u8F6F\u4EF6\u67B6\u6784\u5C42\u6B21\u4E0A\u5BF9 OCP \u8FD9\u4E00\u8BBE\u8BA1\u539F\u5219\u7684\u5E94\u7528\u3002\u8F6F\u4EF6\u67B6\u6784\u5E08\u53EF\u4EE5\u6839\u636E\u76F8\u5173\u51FD\u6570\u88AB\u4FEE\u6539\u7684\u539F\u56E0\u3001\u4FEE\u6539\u7684\u65B9\u5F0F\u53CA\u4FEE\u6539\u7684\u65F6\u95F4\u6765\u5BF9\u5176\u8FDB\u884C\u5206\u7EC4\u9694\u79BB\uFF0C\u5E76\u5C06\u8FD9\u4E9B\u4E92\u76F8\u9694\u79BB\u7684\u51FD\u6570\u5206\u7EC4\u6574\u7406\u6210\u7EC4\u4EF6\u7ED3\u6784\uFF0C\u4F7F\u5F97\u9AD8\u9636\u7EC4\u4EF6\u4E0D\u4F1A\u56E0\u4F4E\u9636\u7EC4\u4EF6\u88AB\u4FEE\u6539\u800C\u53D7\u5230\u5F71\u54CD\u3002</p></blockquote><h2 id="directional-control-\u4F9D\u8D56\u65B9\u5411\u7684\u63A7\u5236" tabindex="-1"><a class="header-anchor" href="#directional-control-\u4F9D\u8D56\u65B9\u5411\u7684\u63A7\u5236" aria-hidden="true">#</a> DIRECTIONAL CONTROL \u4F9D\u8D56\u65B9\u5411\u7684\u63A7\u5236</h2><p>If you recoiled in horror from the class design shown earlier, look again. Much of the complexity in that diagram was intended to make sure that the dependencies between the components pointed in the correct direction.</p><blockquote><p>\u5982\u679C\u521A\u521A\u7684\u7C7B\u8BBE\u8BA1\u628A\u4F60\u5413\u7740\u4E86\uFF0C\u522B\u5BB3\u6015\uFF01\u4F60\u521A\u521A\u5728\u56FE\u8868\u4E2D\u6240\u770B\u5230\u7684\u590D\u6742\u5EA6\u662F\u6211\u4EEC\u60F3\u8981\u5BF9\u7EC4\u4EF6\u4E4B\u95F4\u7684\u4F9D\u8D56\u65B9\u5411\u8FDB\u884C\u63A7\u5236\u800C\u4EA7\u751F\u7684\u3002</p></blockquote><p>For example, the FinancialDataGateway interface between the FinancialReportGenerator and the FinancialDataMapper exists to invert the dependency that would otherwise have pointed from the Interactor component to the Database component. The same is true of the FinancialReportPresenter interface, and the two View interfaces.</p><blockquote><p>\u4F8B\u5982\uFF0CFinanciaIReportGenerator \u548C FinancialDataMapper \u4E4B\u95F4\u7684 Financial Da taGateway \u63A5\u53E3\u662F\u4E3A\u4E86\u53CD\u8F6C Interactor \u4E0E Database \u4E4B\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\u800C\u4EA7\u751F\u7684\u3002\u540C\u6837\u7684\uFF0CFinancialReportPresenter \u63A5\u53E3\u4E0E\u4E24\u4E2A View \u63A5\u53E3\u4E4B\u95F4\u4E5F\u7C7B\u4F3C\u4E8E\u8FD9\u79CD\u60C5\u51B5\u3002</p></blockquote><h2 id="information-hiding-\u4FE1\u606F\u9690\u85CF" tabindex="-1"><a class="header-anchor" href="#information-hiding-\u4FE1\u606F\u9690\u85CF" aria-hidden="true">#</a> INFORMATION HIDING \u4FE1\u606F\u9690\u85CF</h2><p>The FinancialReportRequester interface serves a different purpose. It is there to protect the FinancialReportController from knowing too much about the internals of the Interactor. If that interface were not there, then the Controller would have transitive dependencies on the FinancialEntities.</p><blockquote><p>\u5F53\u7136\uFF0CFinancialReportRequester \u63A5\u53E3\u7684\u4F5C\u7528\u5219\u5B8C\u5168\u4E0D\u540C\uFF0C\u5B83\u7684\u4F5C\u7528\u662F\u4FDD\u62A4 FinancialReportController \u4E0D\u8FC7\u5EA6\u4F9D\u8D56\u4E8E Interactor \u7684\u5185\u90E8\u7EC6\u8282\u3002\u5982\u679C\u6CA1\u6709\u8FD9\u4E2A\u63A5\u53E3\uFF0C\u5219 Controller \u5C06\u4F1A\u4F20\u9012\u6027\u5730\u4F9D\u8D56\u4E8E FinancialEntities\u3002</p></blockquote><p>Transitive dependencies are a violation of the general principle that software entities should not depend on things they don\u2019t directly use. We\u2019ll encounter that principle again when we talk about the Interface Segregation Principle and the Common Reuse Principle.</p><blockquote><p>\u8FD9\u79CD\u4F20\u9012\u6027\u4F9D\u8D56\u8FDD\u53CD\u4E86\u201C\u8F6F\u4EF6\u7CFB\u7EDF\u4E0D\u5E94\u8BE5\u4F9D\u8D56\u5176\u4E0D\u76F4\u63A5\u4F7F\u7528\u7684\u7EC4\u4EF6\u201D\u8FD9\u4E00\u57FA\u672C\u539F\u5219\u3002\u4E4B\u540E\uFF0C\u6211\u4EEC\u4F1A\u5728\u8BA8\u8BBA\u63A5\u53E3\u9694\u79BB\u539F\u5219\u548C\u5171\u540C\u590D\u7528\u539F\u5219\u7684\u65F6\u5019\u518D\u6B21\u63D0\u5230\u8FD9\u4E00\u70B9\u3002</p></blockquote><p>So, even though our first priority is to protect the Interactor from changes to the Controller, we also want to protect the Controller from changes to the Interactor by hiding the internals of the Interactor.</p><blockquote><p>\u6240\u4EE5\uFF0C\u867D\u7136\u6211\u4EEC\u7684\u9996\u8981\u76EE\u7684\u662F\u4E3A\u4E86\u8BA9 Interactor \u5C4F\u853D\u6389\u53D1\u751F\u5728 Controller \u4E0A\u7684\u4FEE\u6539\uFF0C\u4F46\u4E5F\u9700\u8981\u901A\u8FC7\u9690\u85CF Interactor \u5185\u90E8\u7EC6\u8282\u7684\u65B9\u6CD5\u6765\u8BA9\u5176\u5C4F\u853D\u6389\u6765\u81EA Controller \u7684\u4F9D\u8D56\u3002</p></blockquote><h2 id="conclusion-\u672C\u7AE0\u5C0F\u7ED3" tabindex="-1"><a class="header-anchor" href="#conclusion-\u672C\u7AE0\u5C0F\u7ED3" aria-hidden="true">#</a> CONCLUSION \u672C\u7AE0\u5C0F\u7ED3</h2><p>The OCP is one of the driving forces behind the architecture of systems. The goal is to make the system easy to extend without incurring a high impact of change. This goal is accomplished by partitioning the system into components, and arranging those components into a dependency hierarchy that protects higher-level components from changes in lower-level components.</p><blockquote><p>OCP \u662F\u6211\u4EEC\u8FDB\u884C\u7CFB\u7EDF\u67B6\u6784\u8BBE\u8BA1\u7684\u4E3B\u5BFC\u539F\u5219\uFF0C\u5176\u4E3B\u8981\u76EE\u6807\u662F\u8BA9\u7CFB\u7EDF\u6613\u4E8E\u6269\u5C55\uFF0C\u540C\u65F6\u9650\u5236\u5176\u6BCF\u6B21\u88AB\u4FEE\u6539\u6240\u5F71\u54CD\u7684\u8303\u56F4\u3002\u5B9E\u73B0\u65B9\u5F0F\u662F\u901A\u8FC7\u5C06\u7CFB\u7EDF\u5212\u5206\u4E3A\u4E00\u7CFB\u5217\u7EC4\u4EF6\uFF0C\u5E76\u4E14\u5C06\u8FD9\u4E9B\u7EC4\u4EF6\u95F4\u7684\u4F9D\u8D56\u5173\u7CFB\u6309\u5C42\u6B21\u7ED3\u6784\u8FDB\u884C\u7EC4\u7EC7\uFF0C\u4F7F\u5F97\u9AD8\u9636\u7EC4\u4EF6\u4E0D\u4F1A\u56E0\u4F4E\u9636\u7EC4\u4EF6\u88AB\u4FEE\u6539\u800C\u53D7\u5230\u5F71\u54CD\u3002</p></blockquote>',29);function C(v,P){const t=c("Figures");return s(),h("div",null,[p,o(t,{figure:"8-1"},{default:n(()=>[d]),_:1}),u,b,m,g,f,w,o(t,{figure:"8-2"},{default:n(()=>[k]),_:1}),y,o(t,{figure:"8-3"},{default:n(()=>[q]),_:1}),I])}const T=i(l,[["render",C],["__file","ch8.html.vue"]]);export{T as default};
