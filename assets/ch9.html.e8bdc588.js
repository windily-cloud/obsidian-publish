import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as p,a as s,w as n,b as e,e as i,d as t,r as o}from"./app.887b133c.js";const u={},h=i('<h1 id="chap9-lsp-the-liskov-substitution-principle-lsp-\u91CC\u6C0F\u66FF\u6362\u539F\u5219" tabindex="-1"><a class="header-anchor" href="#chap9-lsp-the-liskov-substitution-principle-lsp-\u91CC\u6C0F\u66FF\u6362\u539F\u5219" aria-hidden="true">#</a> Chap9. LSP: THE LISKOV SUBSTITUTION PRINCIPLE LSP\uFF1A\u91CC\u6C0F\u66FF\u6362\u539F\u5219</h1><p>In 1988, Barbara Liskov wrote the following as a way of defining subtypes.</p><blockquote><p>1988 \u5E74\uFF0CBarbara Liskov \u5728\u63CF\u8FF0\u5982\u4F55\u5B9A\u4E49\u5B50\u7C7B\u578B\u65F6\u5199\u4E0B\u4E86\u8FD9\u6837\u4E00\u6BB5\u8BDD\uFF1A</p></blockquote><p>What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.1</p><blockquote><p>\u8FD9\u91CC\u9700\u8981\u7684\u662F\u4E00\u79CD\u53EF\u66FF\u6362\u6027\uFF1A\u5982\u679C\u5BF9\u4E8E\u6BCF\u4E2A\u7C7B\u578B\u662F S \u7684\u5BF9\u8C61 o1 \u90FD\u5B58\u5728\u4E00\u4E2A\u7C7B\u578B\u4E3A T \u7684\u5BF9\u8C61 o2\uFF0C\u80FD\u4F7F\u64CD\u4F5C T \u7C7B\u578B\u7684\u7A0B\u5E8F P \u5728\u7528 o2 \u66FF\u6362 o1 \u65F6\u884C\u4E3A\u4FDD\u6301\u4E0D\u53D8\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u5C06 S \u79F0\u4E3A T \u7684\u5B50\u7C7B\u578B\u3002</p></blockquote><p>To understand this idea, which is known as the Liskov Substitution Principle (LSP), let\u2019s look at some examples.</p><blockquote><p>\u4E3A\u4E86\u8BA9\u8BFB\u8005\u7406\u89E3\u8FD9\u6BB5\u8BDD\u4E2D\u6240\u4F53\u73B0\u7684\u8BBE\u8BA1\u7406\u5FF5\uFF0C\u4E5F\u5C31\u662F\u91CC\u6C0F\u66FF\u6362\u539F\u5219\uFF08LSP\uFF09\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6765\u770B\u51E0\u4E2A\u4F8B\u5B50\u3002</p></blockquote><h2 id="guiding-the-use-of-inheritance-\u7EE7\u627F\u7684\u4F7F\u7528\u6307\u5BFC" tabindex="-1"><a class="header-anchor" href="#guiding-the-use-of-inheritance-\u7EE7\u627F\u7684\u4F7F\u7528\u6307\u5BFC" aria-hidden="true">#</a> GUIDING THE USE OF INHERITANCE \u7EE7\u627F\u7684\u4F7F\u7528\u6307\u5BFC</h2><p>Imagine that we have a class named License, as shown in Figure 9.1. This class has a method named calcFee(), which is called by the Billing application. There are two \u201Csubtypes\u201D of License: PersonalLicense and BusinessLicense. They use different algorithms to calculate the license fee.</p><blockquote><p>\u5047\u8BBE\u6211\u4EEC\u6709\u4E00\u4E2A License \u7C7B\uFF0C\u5176\u7ED3\u6784\u5982\u56FE 9.1 \u6240\u793A\u3002\u8BE5\u7C7B\u4E2D\u6709\u4E00\u4E2A\u540D\u4E3A calcFee() \u7684\u65B9\u6CD5\uFF0C\u8BE5\u65B9\u6CD5\u5C06\u7531 Billing \u5E94\u7528\u7A0B\u5E8F\u6765\u8C03\u7528\u3002\u800C License \u7C7B\u6709\u4E24\u4E2A\u201C\u5B50\u7C7B\u578B\u201D\uFF1APersonalLicense \u4E0E BusinessLicense\uFF0C\u8FD9\u4E24\u4E2A\u7C7B\u4F1A\u7528\u4E0D\u540C\u7684\u7B97\u6CD5\u6765\u8BA1\u7B97\u6388\u6743\u8D39\u7528\u3002</p></blockquote>',10),d=t("License, and its derivatives, conform to LSP"),m=e("p",null,"This design conforms to the LSP because the behavior of the Billing application does not depend, in any way, on which of the two subtypes it uses. Both of the subtypes are substitutable for the License type.",-1),b=e("blockquote",null,[e("p",null,"\u4E0A\u8FF0\u8BBE\u8BA1\u662F\u7B26\u5408 LSP \u539F\u5219\u7684\uFF0C\u56E0\u4E3A Billing \u5E94\u7528\u7A0B\u5E8F\u7684\u884C\u4E3A\u5E76\u4E0D\u4F9D\u8D56\u4E8E\u5176\u4F7F\u7528\u7684\u4EFB\u4F55\u4E00\u4E2A\u884D\u751F\u7C7B\u3002\u4E5F\u5C31\u662F\u8BF4\uFF0C\u8FD9\u4E24\u4E2A\u884D\u751F\u7C7B\u7684\u5BF9\u8C61\u90FD\u662F\u53EF\u4EE5\u7528\u6765\u66FF\u6362 License \u7C7B\u5BF9\u8C61\u7684\u3002")],-1),f=e("h2",{id:"the-square-rectangle-problem-\u6B63\u65B9\u5F62-\u957F\u65B9\u5F62\u95EE\u9898",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#the-square-rectangle-problem-\u6B63\u65B9\u5F62-\u957F\u65B9\u5F62\u95EE\u9898","aria-hidden":"true"},"#"),t(" THE SQUARE/RECTANGLE PROBLEM \u6B63\u65B9\u5F62/\u957F\u65B9\u5F62\u95EE\u9898")],-1),k=e("p",null,"The canonical example of a violation of the LSP is the famed (or infamous, depending on your perspective) square/rectangle problem (Figure 9.2).",-1),v=e("blockquote",null,[e("p",null,"\u6B63\u65B9\u5F62/\u957F\u65B9\u5F62\u95EE\u9898\u662F\u4E2A\u8457\u540D\uFF08\u6216\u8005\u8BF4\u81ED\u540D\u8FDC\u626C\uFF09\u7684\u8FDD\u53CD LSP \u7684\u8BBE\u8BA1\u6848\u4F8B\uFF08\u8FD9\u4E2A\u95EE\u9898\u7684\u7ED3\u6784\u5982\u56FE 9.2 \u6240\u793A\uFF09\u3002")],-1),g=t("The infamous square/rectangle problem"),y=i(`<p>In this example, Square is not a proper subtype of Rectangle because the height and width of the Rectangle are independently mutable; in contrast, the height and width of the Square must change together. Since the User believes it is communicating with a Rectangle, it could easily get confused. The following code shows why:</p><blockquote><p>\u5728\u8FD9\u4E2A\u6848\u4F8B\u4E2D\uFF0CSquare \u7C7B\u5E76\u4E0D\u662F Rectangle \u7C7B\u7684\u5B50\u7C7B\u578B\uFF0C\u56E0\u4E3A Rectangle \u7C7B\u7684\u9AD8\u548C\u5BBD\u53EF\u4EE5\u5206\u522B\u4FEE\u6539\uFF0C\u800C Square \u7C7B\u7684\u9AD8\u548C\u5BBD\u5219\u5FC5\u987B\u4E00\u540C\u4FEE\u6539\u3002\u7531\u4E8E User \u7C7B \u59CB\u7EC8\u8BA4\u4E3A\u81EA\u5DF1\u5728\u64CD\u4F5C Rectangle \u7C7B\uFF0C\u56E0\u6B64\u4F1A\u5E26\u6765\u4E00\u4E9B\u6DF7\u6DC6\u3002\u4F8B\u5982\u5728\u4E0B\u9762\u7684\u4EE3\u7801\u4E2D\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Rectangle</span> r <span class="token operator">=</span> \u2026
r<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">setH</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the \u2026 code produced a Square, then the assertion would fail.</p><blockquote><p>\u5F88\u663E\u7136\uFF0C\u5982\u679C\u4E0A\u8FF0\u4EE3\u7801\u5728\u2026\u5904\u8FD4\u56DE\u7684\u662F Square \u7C7B\uFF0C\u5219\u6700\u540E\u7684\u8FD9\u4E2A assert \u662F\u4E0D\u4F1A\u6210\u7ACB\u7684\u3002</p></blockquote><p>The only way to defend against this kind of LSP violation is to add mechanisms to the User (such as an if statement) that detects whether the Rectangle is, in fact, a Square. Since the behavior of the User depends on the types it uses, those types are not substitutable.</p><blockquote><p>\u5982\u679C\u60F3\u8981\u9632\u8303\u8FD9\u79CD\u8FDD\u53CD LSP \u7684\u884C\u4E3A\uFF0C\u552F\u4E00\u7684\u529E\u6CD5\u5C31\u662F\u5728 user \u7C7B\u4E2D\u589E\u52A0\u7528\u4E8E\u533A\u5206 Rectangle \u548C Square \u7684\u68C0\u6D4B\u903B\u8F91\uFF08\u4F8B\u5982\u589E\u52A0 if \u8BED\u53E5\uFF09\u3002\u4F46\u8FD9\u6837\u4E00\u6765\uFF0Cuser \u4E3A\u7684\u884C\u4E3A\u53C8\u5C06\u4F9D\u8D56\u4E8E\u5B83\u6240\u4F7F\u7528\u7684\u7C7B\uFF0C\u8FD9\u4E24\u4E2A\u7C7B\u5C31\u4E0D\u80FD\u4E92\u76F8\u66FF\u6362\u4E86\u3002</p></blockquote><h2 id="lsp-and-architecture-lsp-\u4E0E\u8F6F\u4EF6\u67B6\u6784" tabindex="-1"><a class="header-anchor" href="#lsp-and-architecture-lsp-\u4E0E\u8F6F\u4EF6\u67B6\u6784" aria-hidden="true">#</a> LSP AND ARCHITECTURE LSP \u4E0E\u8F6F\u4EF6\u67B6\u6784</h2><p>In the early years of the object-oriented revolution, we thought of the LSP as a way to guide the use of inheritance, as shown in the previous sections. However, over the years the LSP has morphed into a broader principle of software design that pertains to interfaces and implementations.</p><blockquote><p>\u5728\u9762\u5411\u5BF9\u8C61\u8FD9\u573A\u7F16\u7A0B\u9769\u547D\u5174\u8D77\u7684\u65E9\u671F\uFF0C\u6211\u4EEC\u7684\u666E\u904D\u8BA4\u77E5\u6B63\u5982\u4E0A\u6587\u6240\u8BF4\uFF0C\u8BA4\u4E3A LSP \u53EA\u4E0D\u8FC7\u662F\u6307\u5BFC\u5982\u4F55\u4F7F\u7528\u7EE7\u627F\u5173\u7CFB\u7684\u4E00\u79CD\u65B9\u6CD5\uFF0C\u7136\u800C\u968F\u7740\u65F6\u95F4\u7684\u63A8\u79FB\uFF0CLSP \u9010\u6E10\u6F14\u53D8\u6210\u4E86\u4E00\u79CD\u66F4\u5E7F\u6CDB\u7684\u3001\u6307\u5BFC\u63A5\u53E3\u4E0E\u5176\u5B9E\u73B0\u65B9\u5F0F\u7684\u8BBE\u8BA1\u539F\u5219\u3002</p></blockquote><p>The interfaces in question can be of many forms. We might have a Java-style interface, implemented by several classes. Or we might have several Ruby classes that share the same method signatures. Or we might have a set of services that all respond to the same REST interface.</p><blockquote><p>\u8FD9\u91CC\u63D0\u5230\u7684\u63A5\u53E3\u53EF\u4EE5\u6709\u591A\u79CD\u5F62\u5F0F\u2014\u2014\u53EF\u4EE5\u662F Java \u98CE\u683C\u7684\u63A5\u53E3\uFF0C\u5177\u6709\u591A\u4E2A\u5B9E\u73B0\u7C7B\uFF1B\u4E5F\u53EF\u4EE5\u50CF Ruby \u4E00\u6837\uFF0C\u51E0\u4E2A\u7C7B\u5171\u7528\u4E00\u6837\u7684\u65B9\u6CD5\u7B7E\u540D\uFF0C\u751A\u81F3\u53EF\u4EE5\u662F\u51E0\u4E2A\u670D\u52A1\u54CD\u5E94\u540C\u4E00\u4E2A REST \u63A5\u53E3\u3002</p></blockquote><p>In all of these situations, and more, the LSP is applicable because there are users who depend on well-defined interfaces, and on the substitutability of the implementations of those interfaces.</p><blockquote><p>LSP \u9002\u7528\u4E8E\u4E0A\u8FF0\u6240\u6709\u7684\u5E94\u7528\u573A\u666F\uFF0C\u56E0\u4E3A\u8FD9\u4E9B\u573A\u666F\u4E2D\u7684\u7528\u6237\u90FD\u4F9D\u8D56\u4E8E\u4E00\u79CD\u63A5\u53E3\uFF0C\u5E76\u4E14\u90FD\u671F\u5F85\u5B9E\u73B0\u8BE5\u63A5\u53E3\u7684\u7C7B\u4E4B\u95F4\u80FD\u5177\u6709\u53EF\u66FF\u6362\u6027\u3002</p></blockquote><p>The best way to understand the LSP from an architectural viewpoint is to look at what happens to the architecture of a system when the principle is violated.</p><blockquote><p>\u60F3\u8981\u4ECE\u8F6F\u4EF6\u67B6\u6784\u7684\u89D2\u5EA6\u6765\u7406\u89E3 LSP \u7684\u610F\u4E49\uFF0C\u6700\u597D\u7684\u529E\u6CD5\u8FD8\u662F\u6765\u770B\u51E0\u4E2A\u53CD\u9762\u6848\u4F8B\u3002</p></blockquote><h2 id="example-lsp-violation-\u8FDD\u53CD-lsp-\u7684\u6848\u4F8B" tabindex="-1"><a class="header-anchor" href="#example-lsp-violation-\u8FDD\u53CD-lsp-\u7684\u6848\u4F8B" aria-hidden="true">#</a> EXAMPLE LSP VIOLATION \u8FDD\u53CD LSP \u7684\u6848\u4F8B</h2><p>Assume that we are building an aggregator for many taxi dispatch services. Customers use our website to find the most appropriate taxi to use, regardless of taxi company. Once the customer makes a decision, our system dispatches the chosen taxi by using a restful service.</p><blockquote><p>\u5047\u8BBE\u6211\u4EEC\u73B0\u5728\u6B63\u5728\u6784\u5EFA\u4E00\u4E2A\u63D0\u4F9B\u51FA\u79DF\u8F66\u8C03\u5EA6\u670D\u52A1\u7684\u7CFB\u7EDF\u3002\u5728\u8BE5\u7CFB\u7EDF\u4E2D\uFF0C\u7528\u6237\u53EF\u4EE5\u901A\u8FC7\u8BBF\u95EE\u6211\u4EEC\u7684\u7F51\u7AD9\uFF0C\u4ECE\u591A\u4E2A\u51FA\u79DF\u8F66\u516C\u53F8\u5185\u5BFB\u627E\u6700\u9002\u5408\u81EA\u5DF1\u7684\u51FA\u79DF\u8F66\u3002\u5F53\u7528\u6237\u9009\u5B9A\u8F66\u5B50\u65F6\uFF0C\u8BE5\u7CFB\u7EDF\u4F1A\u901A\u8FC7\u8C03\u7528 restful \u670D\u52A1\u63A5\u53E3\u6765\u8C03\u5EA6\u8FD9\u8F86\u8F66\u3002</p></blockquote><p>Now assume that the URI for the restful dispatch service is part of the information contained in the driver database. Once our system has chosen a driver appropriate for the customer, it gets that URI from the driver record and then uses it to dispatch the driver.</p><blockquote><p>\u63A5\u4E0B\u6765\uFF0C\u6211\u4EEC\u518D\u5047\u8BBE\u8BE5 restful \u8C03\u5EA6\u670D\u52A1\u63A5\u53E3\u7684 URI \u88AB\u5B58\u50A8\u5728\u53F8\u673A\u6570\u636E\u5E93\u4E2D\u3002\u4E00\u65E6\u8BE5\u7CFB\u7EDF\u9009\u4E2D\u4E86\u6700\u5408\u9002\u7684\u51FA\u79DF\u8F66\u53F8\u673A\uFF0C\u5B83\u5C31\u4F1A\u4ECE\u53F8\u673A\u6570\u636E\u5E93\u7684\u8BB0\u5F55\u4E2D\u8BFB\u53D6\u76F8\u5E94\u7684 URI \u4FE1\u606F\uFF0C\u5E76\u901A\u8FC7\u8C03\u7528\u8FD9\u4E2A URI \u6765\u8C03\u5EA6\u6C7D\u8F66\u3002</p></blockquote><p>Suppose Driver Bob has a dispatch URI that looks like this:</p><blockquote><p>\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5982\u679C\u53F8\u673A Bob \u7684\u8BB0\u5F55\u4E2D\u5305\u542B\u5982\u4E0B\u8C03\u5EA6 URI\uFF1A</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>purplecab.com/driver/Bob
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Our system will append the dispatch information onto this URI and send it with a PUT, as follows:</p><blockquote><p>\u90A3\u4E48\uFF0C\u6211\u4EEC\u7684\u7CFB\u7EDF\u5C31\u4F1A\u5C06\u8C03\u5EA6\u4FE1\u606F\u9644\u52A0\u5728\u8FD9\u4E2A URI \u4E0A\uFF0C\u5E76\u53D1\u9001\u8FD9\u6837\u4E00\u4E2A PUT \u8BF7\u6C42\uFF1A</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>purplecab.com/driver/Bob
       /pickupAddress/24 Maple St.
       /pickupTime/153
       /destination/ORD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Clearly, this means that all the dispatch services, for all the different companies, must conform to the same REST interface. They must treat the pickupAddress, pickupTime, and destination fields identically.</p><blockquote><p>\u5F88\u663E\u7136\uFF0C\u8FD9\u610F\u5473\u7740\u6240\u5B58\u53C2\u4E0E\u8BE5\u8C03\u5EA6\u670D\u52A1\u7684\u516C\u53F8\u90FD\u5FC5\u987B\u9075\u5B88\u540C\u6837\u7684 REST \u63A5\u53E3\uFF0C\u5B83\u4EEC\u5FC5\u987B\u7528\u540C\u6837\u7684\u65B9\u5F0F\u5904\u7406 pickupAddress\u3001pickupTime \u548C destination \u5B57\u6BB5\u3002</p></blockquote><p>Now suppose the Acme taxi company hired some programmers who didn\u2019t read the spec very carefully. They abbreviated the destination field to just dest. Acme is the largest taxi company in our area, and Acme\u2019s CEO\u2019s ex-wife is our CEO\u2019s new wife, and \u2026 Well, you get the picture. What would happen to the architecture of our system?</p><blockquote><p>\u63A5\u4E0B\u6765\uFF0C\u6211\u4EEC\u518D\u5047\u8BBE Acme \u51FA\u79DF\u8F66\u516C\u53F8\u73B0\u5728\u62DB\u8058\u7684\u7A0B\u5E8F\u5458\u7531\u4E8E\u6CA1\u6709\u4ED4\u7EC6\u9605\u8BFB\u4E0A\u8FF0\u63A5\u53E3\u5B9A\u4E49\uFF0C\u7ED3\u679C\u5C06 destination \u5B57\u6BB5\u7F29\u5199\u6210\u4E86 dest\u3002\u800C Acme \u53C8\u662F\u672C\u5730\u6700\u5927\u7684\u51FA\u79DF\u8F66\u516C\u53F8\uFF0C\u53E6\u5916\uFF0CAcme CEO \u7684\u524D\u59BB\u4E0D\u5DE7\u8FD8\u662F\u6211\u4EEC CEO \u7684\u65B0\u6B22\u2026\u2026\u4F60\u61C2\u7684\uFF01\u8FD9\u8FD9\u4F1A\u5BF9\u7CFB\u7EDF\u7684\u67B6\u6784\u9020\u6210\u4EC0\u4E48\u5F71\u54CD\u5462\uFF1F</p></blockquote><p>Obviously, we would need to add a special case. The dispatch request for any Acme driver would have to be constructed using a different set of rules from all the other drivers.</p><blockquote><p>\u663E\u7136\uFF0C\u6211\u4EEC\u9700\u8981\u4E3A\u7CFB\u7EDF\u589E\u52A0\u4E00\u7C7B\u7279\u6B8A\u7528\u4F8B\uFF0C\u4EE5\u5E94\u5BF9 Acme \u53F8\u673A\u7684\u8C03\u5EA6\u8BF7\u6C42\u3002\u8FD9\u5FC5\u987B\u8981\u7528\u53E6\u5916\u4E00\u5957\u89C4\u5219\u6765\u6784\u5EFA\u3002</p></blockquote><p>The simplest way to accomplish this goal would be to add an if statement to the module that constructed the dispatch command:</p><blockquote><p>\u6700\u7B80\u5355\u7684\u505A\u6CD5\u5F53\u7136\u662F\u589E\u52A0\u4E00\u6761 if \u8BED\u53E5\uFF1A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>driver<span class="token punctuation">.</span><span class="token function">getDispatchUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;acme.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\u2026
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>But, of course, no architect worth his or her salt would allow such a construction to exist in the system. Putting the word \u201Cacme\u201D into the code itself creates an opportunity for all kinds of horrible and mysterious errors, not to mention security breaches.</p><blockquote><p>\u7136\u800C\u5F88\u660E\u663E\uFF0C\u4EFB\u4F55\u4E00\u4E2A\u79F0\u804C\u7684\u8F6F\u4EF6\u67B6\u6784\u5E08\u90FD\u4E0D\u4F1A\u5141\u8BB8\u8FD9\u6837\u4E00\u6761\u8BED\u53E5\u51FA\u73B0\u5728\u81EA\u5DF1\u7684\u7CFB\u7EDF\u4E2D\u3002\u56E0\u4E3A\u76F4\u63A5\u5C06\u201Cacme\u201D\u8FD9\u6837\u7684\u5B57\u4E32\u5199\u5165\u4EE3\u7801\u4F1A\u7559\u4E0B\u5404\u79CD\u5404\u6837\u795E\u5947\u53C8\u53EF\u6015\u7684\u9519\u8BEF\u9690\u60A3\uFF0C\u751A\u81F3\u4F1A\u5BFC\u81F4\u5B89\u5168\u95EE\u9898\u3002</p></blockquote><p>For example, what if Acme became even more successful and bought the Purple Taxi company. What if the merged company maintained the separate brands and the separate websites, but unified all of the original companies\u2019 systems? Would we have to add another if statement for \u201Cpurple\u201D?</p><blockquote><p>\u4F8B\u5982\uFF0CAcme \u4E5F\u8BB8\u4F1A\u53D8\u5F97\u66F4\u52A0\u6210\u529F\uFF0C\u6700\u7EC8\u6536\u8D2D\u4E86 Purple \u51FA\u79DF\u8F66\u516C\u53F8\u3002\u7136\u540E\uFF0C\u5B83\u4EEC\u5728\u4FDD\u7559\u4E86\u5404\u81EA\u540D\u5B57\u7684\u540C\u65F6\u5374\u7EDF\u4E00\u4E86\u5F7C\u6B64\u7684\u8BA1\u7B97\u673A\u7CFB\u7EDF\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u7CFB\u7EDF\u4E2D\u96BE\u9053\u8FD8\u8981\u518D\u589E\u52A0\u4E00\u6761\u201Cpurple\u201D\u7684\u7279\u4F8B\u5417\uFF1F</p></blockquote><p>Our architect would have to insulate the system from bugs like this by creating some kind of dispatch command creation module that was driven by a configuration database keyed by the dispatch URI. The configuration data might look something like this:</p><blockquote><p>\u8F6F\u4EF6\u67B6\u6784\u5E08\u5E94\u8BE5\u521B\u5EFA\u4E00\u4E2A\u8C03\u5EA6\u8BF7\u6C42\u521B\u5EFA\u7EC4\u4EF6\uFF0C\u5E76\u8BA9\u8BE5\u7EC4\u4EF6\u4F7F\u7528\u4E00\u4E2A\u914D\u7F6E\u6570\u636E\u5E93\u6765\u4FDD\u5B58 URI \u7EC4\u88C5\u683C\u5F0F\uFF0C\u8FD9\u6837\u7684\u65B9\u5F0F\u53EF\u4EE5\u4FDD\u62A4\u7CFB\u7EDF\u4E0D\u53D7\u5916\u754C\u56E0\u7D20\u53D8\u5316\u7684\u5F71\u54CD\u3002\u4F8B\u5982\u5176\u914D\u7F6E\u4FE1\u606F\u53EF\u4EE5\u5982\u4E0B\uFF1A</p></blockquote>`,42),w=e("thead",null,[e("tr",null,[e("th",null,"URI"),e("th",null,"Dispatch Format")])],-1),q={href:"http://Acme.com",target:"_blank",rel:"noopener noreferrer"},_=t("Acme.com"),S=e("td",null,"/pickupAddress/%s/pickupTime/%s/dest/%s",-1),L=e("tr",null,[e("td",null,[e("code",null,"*.*")]),e("td",null,"/pickupAddress/%s/pickupTime/%s/destination/%s")],-1),T=e("p",null,"And so our architect has had to add a significant and complex mechanism to deal with the fact that the interfaces of the restful services are not all substitutable.",-1),x=e("blockquote",null,[e("p",null,"\u4F46\u8FD9\u6837\u4E00\u6765\uFF0C\u8F6F\u4EF6\u67B6\u6784\u5E08\u5C31\u9700\u8981\u901A\u8FC7\u589E\u52A0\u4E00\u4E2A\u590D\u6742\u7684\u7EC4\u4EF6\u6765\u5E94\u5BF9\u5E76\u4E0D\u5B8C\u5168\u80FD\u5B9E\u73B0\u4E92\u76F8\u66FF\u6362\u7684 restful \u670D\u52A1\u63A5\u53E3\u3002")],-1),P=e("h2",{id:"conclusion-\u672C\u7AE0\u5C0F\u7ED3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#conclusion-\u672C\u7AE0\u5C0F\u7ED3","aria-hidden":"true"},"#"),t(" CONCLUSION \u672C\u7AE0\u5C0F\u7ED3")],-1),R=e("p",null,"The LSP can, and should, be extended to the level of architecture. A simple violation of substitutability, can cause a system\u2019s architecture to be polluted with a significant amount of extra mechanisms.",-1),I=e("blockquote",null,[e("p",null,"LSP \u53EF\u4EE5\u4E14\u5E94\u8BE5\u88AB\u5E94\u7528\u4E8E\u8F6F\u4EF6\u67B6\u6784\u5C42\u9762\uFF0C\u56E0\u4E3A\u4E00\u65E6\u8FDD\u80CC\u4E86\u53EF\u66FF\u6362\u4E5F\u8BE5\u7CFB\u7EDF\u67B6\u6784\u5C31\u4E0D\u5F97\u4E0D\u4E3A\u6B64\u589E\u6DFB\u5927\u91CF\u590D\u6742\u7684\u5E94\u5BF9\u673A\u5236\u3002")],-1);function A(E,U){const a=o("Figures"),c=o("ExternalLinkIcon");return r(),p("div",null,[h,s(a,{figure:"9-1"},{default:n(()=>[d]),_:1}),m,b,f,k,v,s(a,{figure:"9-2"},{default:n(()=>[g]),_:1}),y,e("table",null,[w,e("tbody",null,[e("tr",null,[e("td",null,[e("a",q,[_,s(c)])]),S]),L])]),T,x,P,R,I])}const C=l(u,[["render",A],["__file","ch9.html.vue"]]);export{C as default};
