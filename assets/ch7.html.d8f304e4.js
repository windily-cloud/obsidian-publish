import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as r,a as s,w as a,e as l,b as e,d as t,r as h}from"./app.887b133c.js";const c={},p=l('<h1 id="chap7-srp-the-single-responsibility-principle-srp-\u5355\u4E00\u804C\u8D23\u539F\u5219" tabindex="-1"><a class="header-anchor" href="#chap7-srp-the-single-responsibility-principle-srp-\u5355\u4E00\u804C\u8D23\u539F\u5219" aria-hidden="true">#</a> Chap7. SRP: THE SINGLE RESPONSIBILITY PRINCIPLE SRP\uFF1A\u5355\u4E00\u804C\u8D23\u539F\u5219</h1><p>Of all the SOLID principles, the Single Responsibility Principle (SRP) might be the least well understood. That\u2019s likely because it has a particularly inappropriate name. It is too easy for programmers to hear the name and then assume that it means that every module should do just one thing.</p><blockquote><p>SRP \u662F SOLID \u4E94\u5927\u8BBE\u8BA1\u539F\u5219\u4E2D\u6700\u5BB9\u6613\u88AB\u8BEF\u89E3\u7684\u4E00\u4E2A\u3002\u4E5F\u8BB8\u662F\u540D\u5B57\u7684\u539F\u56E0\uFF0C\u5F88\u591A\u7A0B\u5E8F\u5458\u6839\u636E SRP \u8FD9\u4E2A\u540D\u5B57\u60F3\u5F53\u7136\u5730\u8BA4\u4E3A\u8FD9\u4E2A\u539F\u5219\u5C31\u662F\u6307\uFF1A\u6BCF\u4E2A\u6A21\u5757\u90FD\u5E94\u8BE5\u53EA\u505A\u4E00\u4EF6\u4E8B\u3002</p></blockquote><p>Make no mistake, there is a principle like that. A function should do one, and only one, thing. We use that principle when we are refactoring large functions into smaller functions; we use it at the lowest levels. But it is not one of the SOLID principles\u2014it is not the SRP.</p><blockquote><p>\u6CA1\u9519\uFF0C\u540E\u8005\u7684\u786E\u4E5F\u662F\u4E00\u4E2A\u8BBE\u8BA2\u539F\u5219\uFF0C\u5373\u786E\u4FDD\u4E00\u4E2A\u51FD\u6570\u53EA\u5B8C\u6210\u4E00\u4E2A\u529F\u80FD\u3002\u6211\u4EEC\u5728\u5C06\u5927\u578B\u51FD\u6570\u4E9C\u6784\u6210\u5C0F\u51FD\u6570\u65F6\u7ECF\u5E38\u4F1A\u7528\u5230\u8FD9\u4E2A\u539F\u5219\uFF0C\u4F46\u8FD9\u53EA\u662F\u4E00\u4E2A\u9762\u5411\u5E95\u5C42\u5B9E\u73B0\u7EC6\u8282\u7684\u8BBE\u8BA1\u539F\u5219\uFF0C\u5E76\u4E0D\u662F SRP \u7684\u5168\u90E8\u3002</p></blockquote><p>Historically, the SRP has been described this way:</p><blockquote><p>\u5728\u5386\u53F2\u4E0A\uFF0C\u6211\u4EEC\u66FE\u7ECF\u8FD9\u6837\u63CF\u8FF0 SRP \u8FD9\u4E00\u8BBE\u8BA1\u539F\u5219\uFF1A</p></blockquote><p>A module should have one, and only one, reason to change.</p><blockquote><p>\u4EFB\u4F55\u4E00\u4E2A\u8F6F\u4EF6\u6A21\u5757\u90FD\u5E94\u8BE5\u6709\u4E14\u4EC5\u6709\u4E00\u4E2A\u88AB\u4FEE\u6539\u7684\u539F\u56E0\u3002</p></blockquote><p>Software systems are changed to satisfy users and stakeholders; those users and stakeholders are the \u201Creason to change\u201D that the principle is talking about. Indeed, we can rephrase the principle to say this:</p><blockquote><p>\u5728\u73B0\u5B9E\u73AF\u5883\u4E2D\uFF0C\u8F6F\u4EF6\u7CFB\u7EDF\u4E3A\u4E86\u6EE1\u8DB3\u7528\u6237\u548C\u6240\u6709\u8005\u7684\u8981\u6C42\uFF0C\u5FC5\u7136\u8981\u7ECF\u5E38\u505A\u51FA\u8FD9\u6837\u90A3\u6837\u7684\u4FEE\u6539\u3002\u800C\u8BE5\u7CFB\u7EDF\u7684\u7528\u6237\u6216\u8005\u6240\u6709\u8005\u5C31\u662F\u8BE5\u8BBE\u8BA1\u539F\u5219\u4E2D\u6240\u6307\u7684\u201C\u88AB\u4FEE\u6539\u7684\u539F\u56E0\u201D\u3002\u6240\u4EE5\uFF0C\u6211\u4EEC\u4E5F\u53EF\u4EE5\u8FD9\u6837\u63CF\u8FF0 SRP\uFF1A</p></blockquote><p>A module should be responsible to one, and only one, user or stakeholder.</p><blockquote><p>\u4EFB\u4F55\u4E00\u4E2A\u8F6F\u4EF6\u6A21\u5757\u90FD\u5E94\u8BE5\u53EA\u5BF9\u4E00\u4E2A\u7528\u6237\uFF08User\uFF09\u6216\u7CFB\u7EDF\u5229\u76CA\u76F8\u5173\u8005\uFF08Stakeholder\uFF09\u8D1F\u8D23\u3002</p></blockquote><p>Unfortunately, the words \u201Cuser\u201D and \u201Cstakeholder\u201D aren\u2019t really the right words to use here. There will likely be more than one user or stakeholder who wants the system changed in the same way. Instead, we\u2019re really referring to a group\u2014one or more people who require that change. We\u2019ll refer to that group as an actor.</p><blockquote><p>\u4E0D\u8FC7\uFF0C\u8FD9\u91CC\u7684\u201C\u7528\u6237\u201D\u548C \u201C\u7CFB\u7EDF\u5229\u76CA\u76F8\u5173\u8005\u201D\u5728\u7528\u8BCD\u4E0A\u4E5F\u5E76\u4E0D\u5B8C\u5168\u51C6\u786E\uFF0C\u5B83\u4EEC\u5F88\u6709\u53EF\u80FD\u6307\u7684\u662F\u4E00\u4E2A\u6216\u591A\u4E2A\u7528\u6237\u548C\u5229\u76CA\u76F8\u5173\u8005\uFF0C\u53EA\u8981\u8FD9\u4E9B\u4EBA\u5E0C\u671B\u5BF9\u7CFB\u7EDF\u8FDB\u884C\u7684\u53D8\u66F4\u662F\u76F8\u4F3C\u7684\uFF0C\u5C31\u53EF\u4EE5\u5F52\u4E3A\u4E00\u7C7B\u2014\u2014\u4E00\u4E2A\u6216\u591A\u4E2A\u6709\u5171\u540C\u9700\u6C42\u7684\u4EBA\u3002\u5728\u8FD9\u91CC\uFF0C\u6211\u4EEC\u5C06\u5176\u79F0\u4E3A\u884C\u4E3A\u8005\uFF08actor\uFF09\u3002</p></blockquote><p>Thus the final version of the SRP is:</p><blockquote><p>\u6240\u4EE5\uFF0C\u5BF9\u4E8E SRP \u7684\u6700\u7EC8\u63CF\u8FF0\u5C31\u53D8\u6210\u4E86\uFF1A</p></blockquote><p>A module should be responsible to one, and only one, actor.</p><blockquote><p>\u4EFB\u4F55\u4E00\u4E2A\u8F6F\u4EF6\u6A21\u5757\u90FD\u5E94\u8BE5\u53EA\u5BF9\u67D0\u4E00\u7C7B\u884C\u4E3A\u8005\u8D1F\u8D23\u3002</p></blockquote><p>Now, what do we mean by the word \u201Cmodule\u201D? The simplest definition is just a source file. Most of the time that definition works fine. Some languages and development environments, though, don\u2019t use source files to contain their code. In those cases a module is just a cohesive set of functions and data structures.</p><blockquote><p>\u90A3\u4E48\uFF0C\u4E0A\u6587\u4E2D\u63D0\u5230\u7684\u201C\u8F6F\u4EF6\u6A21\u5757\u201D\u7A76\u7ADF\u53C8\u662F\u5728\u6307\u4EC0\u4E48\u5462\uFF1F\u5927\u90E8\u5206\u60C5\u51B5\u4E0B\uFF0C\u5176\u6700\u7B80\u5355\u7684\u5B9A\u4E49\u5C31\u662F\u6307\u4E00\u4E2A\u6E90\u4EE3\u7801\u6587\u4EF6\u3002\u7136\u800C\uFF0C\u6709\u4E9B\u7F16\u7A0B\u8BED\u8A00\u548C\u7F16\u7A0B\u73AF\u5883\u5E76\u4E0D\u662F\u7528\u6E90\u4EE3\u7801\u6587\u4EF6\u6765\u5B58\u50A8\u7A0B\u5E8F\u7684\u3002\u5728\u8FD9\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u201C\u8F6F\u4EF6\u6A21\u5757\u201D\u6307\u7684\u5C31\u662F\u4E00\u7EC4\u7D27\u5BC6\u76F8\u5173\u7684\u51FD\u6570\u548C\u6570\u636E\u7ED3\u6784\u3002</p></blockquote><p>That word \u201Ccohesive\u201D implies the SRP. Cohesion is the force that binds together the code responsible to a single actor.</p><blockquote><p>\u5728\u8FD9\u91CC\uFF0C\u201C\u76F8\u5173\u201D\u8FD9\u4E2A\u8BCD\u5B9E\u9645\u4E0A\u5C31\u9690\u542B\u4E86 SRP \u8FD9\u4E00\u539F\u5219\u3002\u4EE3\u7801\u4E0E\u6570\u636E\u5C31\u662F\u9760\u7740\u4E0E\u67D0\u4E00\u7C7B\u884C\u4E3A\u8005\u7684\u76F8\u5173\u6027\u88AB\u7EC4\u5408\u5728\u4E00\u8D77\u7684\u3002</p></blockquote><p>Perhaps the best way to understand this principle is by looking at the symptoms of violating it.</p><blockquote><p>\u6216\u8BB8\uFF0C\u7406\u89E3\u8FD9\u4E2A\u8BBE\u8BA1\u539F\u5219\u6700\u597D\u7684\u529E\u6CD5\u5C31\u662F\u8BA1\u5927\u5BB6\u6765\u770B\u4E00\u4E9B\u53CD\u9762\u6848\u4F8B\u3002</p></blockquote><h2 id="symptom-1-accidental-duplication-\u53CD\u9762\u6848\u4F8B-1-\u91CD\u590D\u7684\u5047\u8C61" tabindex="-1"><a class="header-anchor" href="#symptom-1-accidental-duplication-\u53CD\u9762\u6848\u4F8B-1-\u91CD\u590D\u7684\u5047\u8C61" aria-hidden="true">#</a> SYMPTOM 1: ACCIDENTAL DUPLICATION \u53CD\u9762\u6848\u4F8B 1\uFF1A\u91CD\u590D\u7684\u5047\u8C61</h2><p>My favorite example is the Employee class from a payroll application. It has three methods: calculatePay(), reportHours(), and save() (Figure 7.1).</p><blockquote><p>\u8FD9\u662F\u6211\u6700\u559C\u6B22\u4E3E\u7684\u4E00\u4E2A\u4F8B\u5B50\uFF1A\u67D0\u4E2A\u5DE5\u8D44\u7BA1\u7406\u7A0B\u5E8F\u4E2D\u7684 Employee \u7C7B\u6709\u4E09\u4E2A\u51FD\u6570 calculatePay()\u3001reportHours() \u548C save()\uFF08\u89C1\u56FE 7.1\uFF09\u3002</p></blockquote>',28),u=t("The Employee class"),d=l("<p>This class violates the SRP because those three methods are responsible to three very different actors.</p><blockquote><p>\u5982\u4F60\u6240\u89C1\uFF0C\u8FD9\u4E2A\u7C7B\u7684\u4E09\u4E2A\u51FD\u6570\u5206\u522B\u5BF9\u5E94\u7684\u662F\u4E09\u7C7B\u975E\u5E38\u4E0D\u540C\u7684\u884C\u4E3A\u8005\uFF0C\u8FDD\u53CD\u4E86 SRP \u8BBE\u8BA1\u539F\u5219\u3002</p></blockquote><ul><li>The calculatePay() method is specified by the accounting department, which reports to the CFO.</li><li>The reportHours() method is specified and used by the human resources department, which reports to the COO.</li><li>The save() method is specified by the database administrators (DBAs), who report to the CTO.</li></ul><hr><blockquote><ul><li>calculatePay() \u51FD\u6570\u662F\u7531\u8D22\u52A1\u90E8\u95E8\u5236\u5B9A\u7684\uFF0C\u4ED6\u4EEC\u8D1F\u8D23\u5411 CFO \u6C47\u62A5\u3002</li><li>reportHours() \u51FD\u6570\u662F\u7531\u4EBA\u529B\u8D44\u6E90\u90E8\u95E8\u5236\u5B9A\u5E76\u4F7F\u7528\u7684\uFF0C\u4ED6\u4EEC\u8D1F\u8D23\u5411 COO \u6C47\u62A5\u3002</li><li>save() \u51FD\u6570\u662F\u7531 DBA \u5236\u5B9A\u7684\uFF0C\u4ED6\u4EEC\u8D1F\u8D23\u5411 CTO \u6C47\u62A5\u3002</li></ul></blockquote><p>By putting the source code for these three methods into a single Employee class, the developers have coupled each of these actors to the others. This coupling can cause the actions of the CFO\u2019s team to affect something that the COO\u2019s team depends on.</p><blockquote><p>\u8FD9\u4E09\u4E2A\u51FD\u6570\u88AB\u653E\u5728\u540C\u4E00\u4E2A\u6E90\u4EE3\u7801\u6587\u4EF6\uFF0C\u5373\u540C\u4E00\u4E2A Employee \u7C7B\u4E2D\uFF0C\u7A0B\u5E8F\u5458\u8FD9\u6837 \u505A\u5B9E\u9645\u4E0A\u5C31\u7B49\u4E8E\u4F7F\u4E09\u7C7B\u884C\u4E3A\u8005\u7684\u884C\u4E3A\u8026\u5408\u5728\u4E86\u4E00\u8D77\uFF0C\u8FD9\u6709\u53EF\u80FD\u4F1A\u5BFC\u81F4 CFO \u56E2\u961F\u7684\u547D\u4EE4\u5F71\u54CD\u5230 C 00 \u56E2\u961F\u6240\u4F9D\u8D56\u7684\u529F\u80FD\u3002</p></blockquote><p>For example, suppose that the calculatePay() function and the reportHours() function share a common algorithm for calculating non-overtime hours. Suppose also that the developers, who are careful not to duplicate code, put that algorithm into a function named regularHours() (Figure 7.2).</p><blockquote><p>\u4F8B\u5982\uFF0CcalculatePay() \u51FD\u6570\u548C reportHours() \u51FD\u6570\u4F7F\u7528\u540C\u6837\u7684\u903B\u8F91\u6765\u8BA1\u7B97\u6B63\u5E38\u5DE5\u4F5C\u65F6\u6570\u3002\u7A0B\u5E8F\u5458\u4E3A\u4E86\u907F\u514D\u91CD\u590D\u7F16\u7801\uFF0C\u901A\u5E38\u4F1A\u5C06\u8BE5\u7B97\u6CD5\u5355\u72EC\u5B9E\u73B0\u4E3A\u4E00\u4E2A\u540D\u4E3A regularHours() \u7684\u51FD\u6570\uFF08\u89C1\u56FE 7.2\uFF09\u3002</p></blockquote>",9),m=t("Shared algorithm"),b=l('<p>Now suppose that the CFO\u2019s team decides that the way non-overtime hours are calculated needs to be tweaked. In contrast, the COO\u2019s team in HR does not want that particular tweak because they use non-overtime hours for a different purpose.</p><blockquote><p>\u63A5\u4E0B\u6765\uFF0C\u5047\u8BBE CFO \u56E2\u961F\u9700\u8981\u4FEE\u6539\u6B63\u5E38\u5DE5\u4F5C\u65F6\u6570\u7684\u8BA1\u7B97\u65B9\u6CD5\uFF0C\u800C COO \u5E26\u9886\u7684 HR \u56E2\u961F\u4E0D\u9700\u8981\u8FD9\u4E2A\u4FEE\u6539\uFF0C\u56E0\u4E3A\u4ED6\u4EEC\u5BF9\u6570\u636E\u7684\u7528\u6CD5\u662F\u4E0D\u540C\u7684\u3002</p></blockquote><p>A developer is tasked to make the change, and sees the convenient regularHours() function called by the calculatePay() method. Unfortunately, that developer does not notice that the function is also called by the reportHours() function.</p><blockquote><p>\u8FD9\u65F6\u5019\uFF0C\u8D1F\u8D23\u8FD9\u9879\u4FEE\u6539\u7684\u7A0B\u5E8F\u5458\u4F1A\u6CE8\u610F\u5230 calculatePay() \u51FD\u6570\u8C03\u7528\u4E86 regularHours() \u51FD\u6570\uFF0C\u4F46\u53EF\u80FD\u4E0D\u4F1A\u6CE8\u610F\u5230\u8BE5\u51FD\u6570\u4F1A\u540C\u65F6\u88AB reportHours() \u8C03\u7528\u3002</p></blockquote><p>The developer makes the required change and carefully tests it. The CFO\u2019s team validates that the new function works as desired, and the system is deployed.</p><blockquote><p>\u4E8E\u662F\uFF0C\u8BE5\u7A0B\u5E8F\u5458\u5C31\u8FD9\u6837\u6309\u7167\u8981\u6C42\u8FDB\u884C\u4E86\u4FEE\u6539\uFF0C\u540C\u65F6 CFO \u56E2\u961F\u7684\u6210\u5458\u9A8C\u8BC1\u4E86\u65B0\u7B97\u6CD5\u5DE5\u4F5C\u6B63\u5E38\u3002\u8FD9\u9879\u4FEE\u6539\u6700\u7EC8\u88AB\u6210\u529F\u90E8\u7F72\u4E0A\u7EBF\u4E86\u3002</p></blockquote><p>Of course, the COO\u2019s team doesn\u2019t know that this is happening. The HR personnel continue to use the reports generated by the reportHours() function\u2014but now they contain incorrect numbers. Eventually the problem is discovered, and the COO is livid because the bad data has cost his budget millions of dollars.</p><blockquote><p>\u4F46\u662F\uFF0CCOO \u56E2\u961F\u663E\u7136\u5B8C\u5168\u4E0D\u77E5\u9053\u8FD9\u4E9B\u4E8B\u60C5\u7684\u53D1\u751F\uFF0CHR \u4ECD\u7136\u5728\u4F7F\u7528 reportHours() \u4EA7\u751F\u7684\u62A5\u8868\uFF0C\u968F\u540E\u5C31\u4F1A\u53D1\u73B0\u4ED6\u4EEC\u7684\u6570\u636E\u51FA\u9519\u4E86\uFF01\u6700\u7EC8\u8FD9\u4E2A\u95EE\u9898\u8BA9 COO \u5341\u5206\u6124\u6012\uFF0C\u56E0\u4E3A\u8FD9\u4E9B\u9519\u8BEF\u7684\u6570\u636E\u7ED9\u516C\u53F8\u9020\u6210\u4E86\u51E0\u767E\u4E07\u7F8E\u5143\u7684\u635F\u5931\u3002</p></blockquote><p>We\u2019ve all seen things like this happen. These problems occur because we put code that different actors depend on into close proximity. The SRP says to separate the code that different actors depend on.</p><blockquote><p>\u4E0E\u6B64\u7C7B\u4F3C\u7684\u4E8B\u60C5\u6211\u4EEC\u80AF\u5B9A\u591A\u591A\u5C11\u5C11\u90FD\u7ECF\u5386\u8FC7\u3002\u8FD9\u7C7B\u95EE\u9898\u53D1\u751F\u7684\u6839\u6E90\u5C31\u662F\u56E0\u4E3A\u6211\u4EEC\u5C06\u4E0D\u540C\u884C\u4E3A\u8005\u6240\u4F9D\u8D56\u7684\u4EE3\u7801\u5F3A\u51D1\u5230\u4E86\u4E00\u8D77\u3002\u5BF9\u6B64\uFF0CSRP \u5F3A\u8C03\u8FD9\u7C7B\u4EE3\u7801\u4E00\u5B9A\u8981\u88AB\u5206\u5F00\u3002</p></blockquote><h2 id="symptom-2-merges-\u53CD\u9762\u6848\u4F8B-2-\u4EE3\u7801\u5408\u4E95" tabindex="-1"><a class="header-anchor" href="#symptom-2-merges-\u53CD\u9762\u6848\u4F8B-2-\u4EE3\u7801\u5408\u4E95" aria-hidden="true">#</a> SYMPTOM 2: MERGES \u53CD\u9762\u6848\u4F8B 2\uFF1A\u4EE3\u7801\u5408\u4E95</h2><p>It\u2019s not hard to imagine that merges will be common in source files that contain many different methods. This situation is especially likely if those methods are responsible to different actors.</p><blockquote><p>\u4E00\u4E2A\u62E5\u6709\u5F88\u591A\u51FD\u6570\u7684\u6E90\u4EE3\u7801\u6587\u4EF6\u5FC5\u7136\u4F1A\u7ECF\u5386\u5F88\u591A\u6B21\u4EE3\u7801\u5408\u5E76\uFF0C\u8BE5\u6587\u4EF6\u4E2D\u7684\u8FD9\u4E9B\u51FD\u6570\u5206\u522B\u670D\u52A1\u4E0D\u540C\u884C\u4E3A\u8005\u7684\u60C5\u51B5\u5C31\u66F4\u5E38\u89C1\u4E86\u3002</p></blockquote><p>For example, suppose that the CTO\u2019s team of DBAs decides that there should be a simple schema change to the Employee table of the database. Suppose also that the COO\u2019s team of HR clerks decides that they need a change in the format of the hours report.</p><blockquote><p>\u4F8B\u5982\uFF0CCTO \u56E2\u961F\u7684 DBA \u51B3\u5B9A\u8981\u5BF9 Employee \u6570\u636E\u5E93\u8868\u7ED3\u6784\u8FDB\u884C\u7B80\u5355\u4FEE\u6539\u3002\u4E0E\u6B64\u540C\u65F6\uFF0CCOO \u56E2\u961F\u7684 HR \u9700\u8981\u4FEE\u6539\u5DE5\u4F5C\u65F6\u6570\u62A5\u8868\u7684\u683C\u5F0F\u3002</p></blockquote><p>Two different developers, possibly from two different teams, check out the Employee class and begin to make changes. Unfortunately their changes collide. The result is a merge.</p><blockquote><p>\u8FD9\u6837\u4E00\u6765\uFF0C\u5C31\u5F88\u53EF\u80FD\u51FA\u73B0\u4E24\u4E2A\u6765\u81EA\u4E0D\u540C\u56E2\u961F\u7684\u7A0B\u5E8F\u5458\u5206\u522B\u5BF9 Employee \u7C7B\u8FDB\u884C \u4FEE\u6539\u7684\u60C5\u51B5\u3002\u4E0D\u51FA\u610F\u5916\u7684\u8BDD\uFF0C\u4ED6\u4EEC\u5404\u81EA\u7684\u4FEE\u6539\u4E00\u5B9A\u4F1A\u4E92\u76F8\u51B2\u7A81\uFF0C\u8FD9\u5C31\u5FC5\u987B\u8981\u8FDB\u884C\u4EE3\u7801\u5408\u5E76\u3002</p></blockquote><p>I probably don\u2019t need to tell you that merges are risky affairs. Our tools are pretty good nowadays, but no tool can deal with every merge case. In the end, there is always risk.</p><p>In our example, the merge puts both the CTO and the COO at risk. It\u2019s not inconceivable that the CFO could be affected as well.</p><blockquote><p>\u5728\u8FD9\u4E2A\u4F8B\u5B50\u4E2D\uFF0C\u8FD9\u6B21\u4EE3\u7801\u5408\u5E76\u4E0D\u4EC5\u6709\u53EF\u80FD\u8BA9 CTO \u548C COO \u8981\u6C42\u7684\u529F\u80FD\u51FA\u9519\uFF0C\u751A\u81F3\u8FDE CFO \u539F\u672C\u6B63\u5E38\u7684\u529F\u80FD\u4E5F\u53EF\u80FD\u6536\u5230\u5F71\u54CD\u3002</p></blockquote><p>There are many other symptoms that we could investigate, but they all involve multiple people changing the same source file for different reasons.</p><blockquote><p>\u4E8B\u5B9E\u4E0A\uFF0C\u8FD9\u6837\u7684\u6848\u4F8B\u8FD8\u6709\u5F88\u591A\uFF0C\u6211\u4EEC\u5C31\u4E0D\u4E00\u4E00\u5217\u4E3E\u4E86\u3002\u5B83\u4EEC\u7684\u4E00\u4E2A\u5171\u540C\u70B9\u662F\uFF0C\u591A\u4EBA\u4E3A\u4E86\u4E0D\u540C\u7684\u76EE\u7684\u4FEE\u6539\u4E86\u540C\u4E00\u4EFD\u6E90\u4EE3\u7801\uFF0C\u8FD9\u5F88\u5BB9\u6613\u9020\u6210\u95EE\u9898\u7684\u4EA7\u751F\u3002</p></blockquote><p>Once again, the way to avoid this problem is to separate code that supports different actors.</p><blockquote><p>\u800C\u907F\u514D\u8FD9\u79CD\u95EE\u9898\u4EA7\u751F\u7684\u65B9\u6CD5\u5C31\u662F\u5C06\u670D\u52A1\u4E0D\u540C\u884C\u4E3A\u8005\u7684\u4EE3\u7801\u8FDB\u884C\u5207\u5206\u3002</p></blockquote><h2 id="solutions-\u89E3\u51B3\u65B9\u6848" tabindex="-1"><a class="header-anchor" href="#solutions-\u89E3\u51B3\u65B9\u6848" aria-hidden="true">#</a> SOLUTIONS \u89E3\u51B3\u65B9\u6848</h2><p>There are many different solutions to this problem. Each moves the functions into different classes.</p><blockquote><p>\u6211\u4EEC\u6709\u5F88\u591A\u4E0D\u540C\u7684\u65B9\u6CD5\u53EF\u4EE5\u7528\u6765\u89E3\u51B3\u4E0A\u9762\u7684\u95EE\u9898\uFF0C\u6BCF\u4E00\u79CD\u65B9\u6CD5\u90FD\u9700\u8981\u5C06\u76F8\u5173\u7684\u51FD\u6570\u5212\u5206\u6210\u4E0D\u540C\u7684\u7C7B\u3002</p></blockquote><p>Perhaps the most obvious way to solve the problem is to separate the data from the functions. The three classes share access to EmployeeData, which is a simple data structure with no methods (Figure 7.3). Each class holds only the source code necessary for its particular function. The three classes are not allowed to know about each other. Thus any accidental duplication is avoided.</p><blockquote><p>\u5176\u4E2D\uFF0C\u6700\u7B80\u5355\u76F4\u63A5\u7684\u529E\u6CD5\u662F\u5C06\u6570\u636E\u4E0E\u51FD\u6570\u5206\u79BB\uFF0C\u8BBE\u8BA1\u4E09\u4E2A\u7C7B\u5171\u540C\u4F7F\u7528\u4E00\u4E2A\u4E0D\u5305\u62EC\u51FD\u6570\u7684\u3001\u5341\u5206\u7B80\u5355\u7684 EmployeeData \u7C7B\uFF08\u89C1\u56FE 7.3\uFF09\uFF0C\u6BCF\u4E2A\u7C7B\u53EA\u5305\u542B\u4E0E\u4E4B\u76F8\u5173\u7684\u51FD\u6570\u4EE3\u7801\uFF0C\u4E92\u76F8\u4E0D\u53EF\u89C1\uFF0C\u8FD9\u6837\u5C31\u4E0D\u5B58\u5728\u4E92\u76F8\u4F9D\u8D56\u7684\u60C5\u51B5\u4E86\u3002</p></blockquote>',29),f=t("The three classes do not know about each other"),y=e("p",null,"The downside of this solution is that the developers now have three classes that they have to instantiate and track. A common solution to this dilemma is to use the Facade pattern (Figure 7.4).",-1),k=e("blockquote",null,[e("p",null,"\u8FD9\u79CD\u89E3\u51B3\u65B9\u6848\u7684\u574F\u5904\u5728\u4E8E\uFF1A\u7A0B\u5E8F\u5458\u73B0\u5728\u9700\u8981\u5728\u7A0B\u5E8F\u91CC\u5904\u7406\u4E09\u4E2A\u7C7B\u3002\u53E6\u4E00\u79CD\u89E3\u51B3\u529E\u6CD5\u662F\u4F7F\u7528 Facade \u8BBE\u8BA1\u6A21\u5F0F\uFF08\u89C1\u56FE 7.4\uFF09\u3002")],-1),g=t("The Facade pattern"),q=e("p",null,"The EmployeeFacade contains very little code. It is responsible for instantiating and delegating to the classes with the functions.",-1),w=e("blockquote",null,[e("p",null,"\u8FD9\u6837\u4E00\u6765\uFF0CEmployeeFacade \u7C7B\u6240\u9700\u8981\u7684\u4EE3\u7801\u91CF\u5C31\u5F88\u5C11\u4E86\uFF0C\u5B83\u4EC5\u4EC5\u5305\u542B\u4E86\u521D\u59CB\u5316\u548C\u8C03\u7528\u4E09\u4E2A\u5177\u4F53\u5B9E\u73B0\u7C7B\u7684\u51FD\u6570\u3002")],-1),_=e("p",null,"Some developers prefer to keep the most important business rules closer to the data. This can be done by keeping the most important method in the original Employee class and then using that class as a Facade for the lesser functions (Figure 7.5).",-1),v=e("blockquote",null,[e("p",null,"\u5F53\u7136\uFF0C\u4E5F\u6709\u4E9B\u7A0B\u5E8F\u5458\u66F4\u503E\u5411\u4E8E\u628A\u6700\u91CD\u8981\u7684\u4E1A\u52A1\u903B\u8F91\u4E0E\u6570\u636E\u653E\u5728\u4E00\u8D77\uFF0C\u90A3\u4E48\u6211\u4EEC\u4E5F\u53EF\u4EE5\u9009\u62E9\u5C06\u6700\u91CD\u8981\u7684\u51FD\u6570\u4FDD\u7559\u5728 Employee \u7C7B\u4E2D\uFF0C\u540C\u65F6\u7528\u8FD9\u4E2A\u7C7B\u6765\u8C03\u7528\u5176\u4ED6\u6CA1\u90A3\u4E48\u91CD\u8981\u7684\u51FD\u6570\uFF08\u89C1\u56FE 7.5\uFF09\u3002")],-1),O=t("The most important method is kept in the original Employee class and used as a Facade for the lesser functions"),T=e("p",null,"You might object to these solutions on the basis that every class would contain just one function. This is hardly the case. The number of functions required to calculate pay, generate a report, or save the data is likely to be large in each case. Each of those classes would have many private methods in them.",-1),C=e("blockquote",null,[e("p",null,"\u8BFB\u8005\u4E5F\u8BB8\u4F1A\u53CD\u5BF9\u4E0A\u9762\u8FD9\u4E9B\u89E3\u51B3\u65B9\u6848\uFF0C\u56E0\u4E3A\u770B\u4E0A\u53BB\u8FD9\u91CC\u7684\u6BCF\u4E2A\u7C7B\u4E2D\u90FD\u53EA\u6709\u4E00\u4E2A\u51FD\u6570\u3002\u4E8B\u5B9E\u4E0A\u5E76\u975E\u5982\u6B64\uFF0C\u56E0\u4E3A\u65E0\u8BBA\u662F\u8BA1\u7B97\u5DE5\u8D44\u3001\u751F\u6210\u62A5\u8868\u8FD8\u662F\u4FDD\u5B58\u6570\u636E\u90FD\u662F\u4E00\u4E2A\u5F88\u590D\u6742\u7684\u8FC7\u7A0B\uFF0C\u6BCF\u4E2A\u7C7B\u90FD\u53EF\u80FD\u5305\u542B\u4E86\u8BB8\u591A\u79C1\u6709\u51FD\u6570\u3002")],-1),S=e("p",null,"Each of the classes that contain such a family of methods is a scope. Outside of that scope, no one knows that the private members of the family exist.",-1),P=e("blockquote",null,[e("p",null,"\u603B\u800C\u8A00\u4E4B\uFF0C\u4E0A\u9762\u7684\u6BCF\u4E00\u4E2A\u7C7B\u90FD\u5206\u522B\u5BB9\u7EB3\u4E86\u4E00\u7EC4\u4F5C\u7528\u4E8E\u76F8\u540C\u4F5C\u7528\u57DF\u7684\u51FD\u6570\uFF0C\u800C\u5728\u8BE5\u4F5C\u7528\u57DF\u4E4B\u5916\uFF0C\u5B83\u4EEC\u5404\u81EA\u7684\u79C1\u6709\u51FD\u6570\u662F\u4E92\u76F8\u4E0D\u53EF\u89C1\u7684\u3002")],-1),E=e("h2",{id:"conclusion-\u672C\u7AE0\u5C0F\u7ED3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#conclusion-\u672C\u7AE0\u5C0F\u7ED3","aria-hidden":"true"},"#"),t(" CONCLUSION \u672C\u7AE0\u5C0F\u7ED3")],-1),R=e("p",null,"The Single Responsibility Principle is about functions and classes\u2014but it reappears in a different form at two more levels. At the level of components, it becomes the Common Closure Principle. At the architectural level, it becomes the Axis of Change responsible for the creation of Architectural Boundaries. We\u2019ll be studying all of these ideas in the chapters to come.",-1),F=e("blockquote",null,[e("p",null,"\u5355\u4E00\u804C\u8D23\u539F\u5219\u4E3B\u8981\u8BA8\u8BBA\u7684\u662F\u51FD\u6570\u548C\u7C7B\u4E4B\u95F4\u7684\u5173\u7CFB\u2014\u2014\u4F46\u662F\u5B83\u5728\u4E24\u4E2A\u8BA8\u8BBA\u5C42\u9762\u4E0A\u4F1A\u4EE5\u4E0D\u540C\u7684\u5F62\u5F0F\u51FA\u73B0\u3002\u5728\u7EC4\u4EF6\u5C42\u9762\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5C06\u5176\u79F0\u4E3A\u5171\u540C\u95ED\u5305\u539F\u5219\uFF08Common Closure Principle)\uFF0C\u5728\u8F6F\u4EF6\u67B6\u6784\u5C42\u9762\uFF0C\u5B83\u5219\u662F\u7528\u4E8E\u5960\u5B9A\u67B6\u6784\u8FB9\u754C\u7684\u53D8\u66F4\u8F74\u5FC3\uFF08Axis of Change\uFF09\u3002\u6211\u4EEC\u5728\u63A5\u4E0B\u6765\u7684\u7AE0\u8282\u4E2D\u4F1A\u6DF1\u5165\u5B66\u4E60\u8FD9\u4E9B\u539F\u5219\u3002")],-1);function I(H,x){const o=h("Figures");return i(),r("div",null,[p,s(o,{figure:"7-1"},{default:a(()=>[u]),_:1}),d,s(o,{figure:"7-2"},{default:a(()=>[m]),_:1}),b,s(o,{figure:"7-3"},{default:a(()=>[f]),_:1}),y,k,s(o,{figure:"7-4"},{default:a(()=>[g]),_:1}),q,w,_,v,s(o,{figure:"7-5"},{default:a(()=>[O]),_:1}),T,C,S,P,E,R,F])}const B=n(c,[["render",I],["__file","ch7.html.vue"]]);export{B as default};
